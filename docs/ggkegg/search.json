[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"ggkegg fetches information KEGG parse, analyze visualize using ggplot2 ggraph, combined packages investigating biological functions using KEGG.One main aims ggkegg tidykegg manupilating KEGG information tidy ways using tidygraph.","code":"\n# devtools::install_github(\"noriakis/ggkegg\")\nlibrary(ggkegg)\nlibrary(dplyr)\nlibrary(tidygraph)\npathway(\"hsa04110\") |> ## Obtain and parse the pathway\n  activate(nodes) |> ## node manipulation\n  mutate(convert_hsa=convert_id(\"hsa\"),\n         convert_map=convert_id(\"pathway\")) |> ## convert IDs for organism hsa and pathway\n  ggraph(x=x, y=y)+ ## ggraph plot\n  geom_node_rect(aes(filter=type==\"gene\",\n                     fill=I(bgcolor)),\n                 color=\"black\")+\n  geom_node_text(aes(label=convert_hsa),\n                 size=2, family=\"serif\")"},{"path":"pathway.html","id":"pathway","chapter":"2 Pathway","heading":"2 Pathway","text":"Providing ggkegg pathway ID, fetches information, parse make ggraph object. Inside, parse_kgml pathway function used return igraph tbl_graph object.\npathway function core function downloads parses KGML files. file already exists current working directory, downloaded . function also extracts reactions included pathway edges. nodes represented type=line, function converts nodes edges based coords. conversion carried process_line function.example first fetches eco00270 parse information, convert pathway eco identifiers, delete zero degree nodes returns igraph object.x-coordinate, y-coordinate, width, height described KGML listed x, y, width, height. Based information, xmin, xmax, ymin, ymax calculated stored node table.","code":"\nlibrary(ggkegg)\nlibrary(ggfx)\nlibrary(ggraph)\nlibrary(igraph)\nlibrary(clusterProfiler)\nlibrary(dplyr)\nlibrary(tidygraph)\ng <- ggkegg(pid=\"eco00270\",\n            convert_org = c(\"pathway\",\"eco\"),\n            delete_zero_degree = TRUE,\n            return_igraph = TRUE)\ngg <- ggraph(g, layout=\"stress\") \ngg$data$type |> unique()\n#> [1] \"map\"      \"compound\" \"gene\"\ngg + geom_edge_diagonal(\n  aes(color=subtype,\n      filter=type!=\"maplink\"))+\n  geom_node_point(\n  aes(filter= !type%in%c(\"map\",\"compound\")),\n    fill=gg$data[!gg$data$type%in%c(\"map\",\"compound\"),]$bgcolor,\n    color=\"black\",\n    shape=21, size=4\n  )+\n  geom_node_point(\n    aes(filter= !type%in%c(\"map\",\"gene\")),\n    fill=gg$data[!gg$data$type%in%c(\"map\",\"gene\"),]$bgcolor,\n    color=\"black\",\n    shape=21, size=6\n  )+\n  geom_node_text(\n    aes(label=converted_name,\n        filter=type==\"gene\"),\n    repel=TRUE,\n    bg.colour=\"white\")+\n  theme_void()"},{"path":"pathway.html","id":"geom_node_rect","chapter":"2 Pathway","heading":"2.1 geom_node_rect","text":"package also provides geom_node_rect function, allows drawing rectangles specified locations based mappings xmin, xmax, ymin, ymax.","code":""},{"path":"pathway.html","id":"assigning-colors-to-nodes","chapter":"2 Pathway","heading":"2.1.1 Assigning colors to nodes","text":"can set diffent multiple colors nodes using geom_node_rect. application useful visualizing factors log2 fold change among multiple conditions.possible specify number groups.","code":"\ng <- pathway(\"ko00520\")\nV(g)$color_one <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Set1\"))(length(V(g)))\nV(g)$color_two <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Set2\"))(length(V(g)))\n\nggraph(g, x=x, y=y) +\n  geom_node_rect(aes(xmin=xmin, xmax=x, fill=I(color_one)), alpha=0.5)+\n  geom_node_rect(aes(xmin=x, xmax=xmax, fill=I(color_two)), alpha=0.5)+\n  ggfx::with_outer_glow(geom_node_text(aes(label=name |> \n                       strsplit(\":\") |> \n                       sapply(\"[\", 2) |>\n                       strsplit(\" \") |>\n                       sapply(\"[\", 1),\n                     filter=type==\"ortholog\"),\n                     size=2), colour=\"white\", expand=1)\nV(g)$color_one <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Set1\"))(length(V(g)))\nV(g)$color_two <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Set2\"))(length(V(g)))\nV(g)$color_three <- colorRampPalette(RColorBrewer::brewer.pal(5,\"PuOr\"))(length(V(g)))\nV(g)$color_four <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Paired\"))(length(V(g)))\n\nV(g)$space <- V(g)$width/4\n\nggraph(g, x=x, y=y) +\n  geom_node_rect(aes(xmin=xmin, xmax=xmin+space, fill=I(color_one), filter=type==\"ortholog\"))+\n  geom_node_rect(aes(xmin=xmin+space, xmax=xmin+2*space, fill=I(color_two), filter=type==\"ortholog\"))+\n  geom_node_rect(aes(xmin=xmin+2*space, xmax=xmin+3*space, fill=I(color_three), filter=type==\"ortholog\"))+\n  geom_node_rect(aes(xmin=xmin+3*space, xmax=xmin+4*space, fill=I(color_four), filter=type==\"ortholog\"))+\n  ggfx::with_outer_glow(geom_node_text(aes(label=name |> \n                                             strsplit(\":\") |> \n                                             sapply(\"[\", 2) |>\n                                             strsplit(\" \") |>\n                                             sapply(\"[\", 1),\n                                           filter=type==\"ortholog\"),\n                                       size=2), colour=\"white\", expand=1)+\n  theme_void()"},{"path":"pathway.html","id":"highlighting-set-of-nodes-and-edges","chapter":"2 Pathway","heading":"2.2 Highlighting set of nodes and edges","text":"want obtain ko01230, highlight components\ninvolved M00002, show corresponding compound names map,\ncan write follows using highligh_set_edges highlight_set_nodes.show example highlighting Metabolic pathways (ko01100), using M00021 definition. highlight_module function accepts kegg_module class object return boolean edges involved reaction inside module nodes compounds involved reaction. Please note produce exactly output KEGG mapper. adds new columns tbl_graph TRUE nodes edges meet respective conditions.Multiple modules involved Cysteine methionine metabolism, highlighting M00017 ggforce.visualizing information compounds, recommended use geom_node_text, ggrepel, shadowtext.necessary, possible visualize information included highlighted pathway place original map using annotation_custom function. example, annotation ggplot first created converted grob using ggplotify. grob drawn desired position.also possible highlight desired edges nodes. case, highlight_set_edges highlight_set_nodes functions used within mutate generate new column containing boolean indicating whether specified IDs included . can highlight nodes edges desired geoms. set , TRUE returned IDs included query included node. set , TRUE returned IDs included query included node.example highlighting combined graphhighlight:visualizing large maps global overview maps, better use geom_edge_link0, described documentation ggraph geom_edge_*. Moreover, nodes, combining scattermore package’s geom_scattermore ggraph’s StatFilter allows faster rendering.","code":"\npathway(\"ko01230\") |> \n  process_line() |>\n  activate(nodes) |>\n  mutate(\n    compound=convert_id(\"compound\"),\n    M00002=highlight_set_nodes(module(\"M00002\")@reaction_components)) |>\n  activate(edges) |>\n  mutate(M00002=highlight_set_edges(module(\"M00002\")@definition_components)) |>\n  ggraph(x=x, y=y)+\n  geom_edge_link()+\n  with_outer_glow(geom_edge_link(aes(color=M00002, filter=M00002)),\n                  colour=\"pink\")+\n  geom_node_point(shape=21,aes(filter=type!=\"line\"))+\n  with_outer_glow(geom_node_point(shape=21, aes(filter=M00002, color=M00002)),\n                  colour=\"pink\")+\n  geom_node_text(aes(label=compound, filter=M00002), repel=TRUE,\n                 bg.colour=\"white\", size=2)+\n  theme_void()\ng <- pathway(\"ko01100\") |> \n  process_line() |>\n  highlight_module(module(\"M00021\")) |>\n  mutate(compound=convert_id(\"compound\"))\n\ng |> ggraph(x=x, y=y) +\n  geom_node_point(size=1, aes(color=I(fgcolor),\n    filter=fgcolor!=\"none\" & type!=\"line\"))+\n  geom_edge_link(width=0.1, aes(color=I(fgcolor),\n                                filter=type==\"line\"& fgcolor!=\"none\"))+\n  with_outer_glow(\n    geom_edge_link(width=1,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  with_outer_glow(\n    geom_node_point(size=2,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  theme_void()\nlist_of_modules <- c(\"M00021\",\"M00338\",\"M00609\",\"M00017\",\"M00034\",\"M00035\",\"M00368\")\nfor (mm in list_of_modules) {\n  g <- g |> highlight_module(module(mm))\n}\n\nggraph(g,x=x,y=y,layout=\"manual\") +\n  geom_edge_link0(width=0.5, color=\"grey\")+\n  geom_edge_link(color=\"red\",aes(filter=M00017|M00021|M00338|M00609|M00034|M00035|M00368))+\ngeom_node_point(size=2, color=\"red\",aes(filter=M00017|M00021|M00338|M00609|M00034|M00035|M00368))+\n  ggforce::geom_mark_rect(aes(fill=M00017,\n                              label=module(\"M00017\")@name,\n                              x=x, y=y,\n                              group=M00017,\n                              filter=M00017),\n                          label.fill = \"transparent\",\n                          label.fontsize = 10,\n                          expand=unit(1,\"mm\"))+\n  theme_void()\ng |> ggraph(x=x, y=y) +\n  geom_node_point(size=1, aes(color=I(fgcolor),\n    filter=fgcolor!=\"none\" & type!=\"line\"))+\n  geom_edge_link(width=0.1, aes(color=I(fgcolor),\n                                filter=type==\"line\"& fgcolor!=\"none\"))+\n  with_outer_glow(\n    geom_edge_link(width=1,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  with_outer_glow(\n    geom_node_point(size=2,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n    geom_node_text(aes(label=compound, filter=M00021),\n                   repel=TRUE, bg.colour=\"white\", size=5)+\n  theme_void()\n\nannot <- g |>  ggraph(x=x, y=y)+\n  with_outer_glow(\n    geom_edge_link(width=1,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  with_outer_glow(\n    geom_node_point(size=2,\n                    aes(color=I(fgcolor),\n                        filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n    geom_node_text(aes(label=compound, filter=M00021),\n                   repel=TRUE, bg.colour=\"white\", size=5)\ng |>\n  ggraph(x=x, y=y) +\n  geom_node_point(size=1, aes(color=I(fgcolor),\n                              filter=fgcolor!=\"none\" & type!=\"line\"))+\n  geom_edge_link(width=0.1, aes(color=I(fgcolor),\n                                filter=type==\"line\"& fgcolor!=\"none\"))+\n  with_outer_glow(\n    geom_edge_link(width=1,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  with_outer_glow(\n    geom_node_point(size=2,\n                    aes(color=I(fgcolor),\n                        filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  annotation_custom(ggplotify::as.grob(annot),\n    ymin=-1500, ymax=0, xmin=0, xmax=1500)+ ## your desired position\n  theme_void()\n\ngg <- g |> activate(edges) |> \n  mutate(highlight=highlight_set_edges(c(\"ko:K00790\",\"ko:K00789\")))\ngg |>\n  ggraph(x=x, y=y) + geom_edge_link(width=0.1, aes(filter=fgcolor!=\"none\",\n                                                   color=I(fgcolor))) + \n  with_outer_glow(geom_edge_link(width=1, aes(filter=highlight,\n   color=I(fgcolor))), colour=\"red\", expand=3) + theme_graph()\nlibrary(graphhighlight)\ng |> ggraph(x=x, y=y) +\n  geom_edge_link(width=0.5, aes(color=I(fgcolor), filter=fgcolor!=\"none\")) +\n  geom_node_point(size=1, aes(color=I(fgcolor), filter=fgcolor!=\"none\" & type!=\"line\"))+\n  highlight_node(glow=TRUE, filter=\"fgcolor!='none' & type!='line'\",\n                 glow_base_size=TRUE,glow_size=0.5)+\n  theme_void()\nst <- Sys.time()\nggraph(g, x=x, y=y) +geom_edge_link0(aes(color=I(fgcolor)))+\n  scattermore::geom_scattermore(pointsize=1, stat=StatFilter,\n    aes(x=x, y=y, color=I(fgcolor),\n    filter=type!=\"map\"))\ned <- Sys.time()\ned-st\n#> Time difference of 0.9408278 secs\n\nst <- Sys.time()\nggraph(g, x=x, y=y) +geom_edge_link(aes(color=I(fgcolor)))+\n  geom_node_point(size=2, aes(color=I(fgcolor),\n    filter=type!=\"map\"))\ned <- Sys.time()\ned-st\n#> Time difference of 23.97227 secs"},{"path":"pathway.html","id":"overlaying-original-kegg-pathway-images-on-ggraph","chapter":"2 Pathway","heading":"2.3 Overlaying original KEGG pathway images on ggraph","text":"Using magick, can overlay original KEGG pathway image graph made (add components original image). package provides overlay_raw_map function, allows mapping raster image onto graph specifying pathway ID color made transparent.can use favorite geoms annotate KEGG map combining functions.","code":"\ng <- pathway(\"ko00640\",group_rect_nudge=0) ## Obtain pathway graph (don't show grouping rect)\ngg <- ggraph(g, layout=\"manual\", x=x, y=y)+\n  geom_node_point(aes(filter=type==\"compound\"), color=\"blue\", size=2)+\n  geom_node_rect(fill=\"red\",aes(filter=type==\"ortholog\"))+\n  overlay_raw_map(\"ko00640\")+\n  theme_void()\nggsave(file=\"tmp.png\",gg,width=12,height=7,dpi=300,units=\"in\")\ncowplot::ggdraw()+cowplot::draw_image(\"tmp.png\")\nm <- module(\"M00013\")\ng <- g |> mutate(mod=highlight_set_nodes(m@reaction_components,how=\"all\"))\ngg <- ggraph(g, layout=\"manual\", x=x, y=y)+\n  geom_node_rect(fill=\"grey\",aes(filter=type==\"ortholog\"))+\n  geom_node_point(aes(filter=type==\"compound\"), color=\"blue\", size=2)+\n  overlay_raw_map(\"ko00640\")+\n  ggfx::with_outer_glow(geom_node_point(aes(filter=mod, x=x, y=y), color=\"red\",size=2),\n                        colour=\"yellow\",expand=5)+\n  theme_void()\nggsave(file=\"tmp.png\",gg,width=12,height=7,dpi=300,units=\"in\")\ncowplot::ggdraw()+cowplot::draw_image(\"tmp.png\")"},{"path":"pathway.html","id":"group-of-nodes","chapter":"2 Pathway","heading":"2.4 Group of nodes","text":"groups specified KGML type=“group”. pathway function adds edges linking group ID component ID, allowing visualization groups layout specified KGML. edges mentioned specified type in_group.","code":"\ng <- pathway(\"hsa03460\") |> mutate(conv=convert_id(\"hsa\"))\ng <- delete_vertex_attr(g, \"x\")\ng <- delete_vertex_attr(g, \"y\")\nggraph(g, layout = \"nicely\") +\n  geom_node_point(aes(filter=type==\"gene\" | type==\"group\"), color=\"black\") +\n  geom_edge_link(aes(color=subtype),end_cap=circle(2,\"mm\"),\n                 start_cap=circle(2,\"mm\"),\n                     label_dodge = unit(2,\"mm\"))+\n  geom_node_text(aes(label=conv), repel=TRUE, bg.colour=\"white\")+\n  theme_void()"},{"path":"pathway.html","id":"combining-multiple-pathways-in-their-native-layouts","chapter":"2 Pathway","heading":"2.5 Combining multiple pathways in their native layouts","text":"Combining multiple pathways using native layouts possible mutating nodes’ positions contracting multiple graphs.","code":"\n\n## Mutate X position for the first graph\ng1 <-pathway(\"ko00640\")\npos <- g1 |> activate(nodes) |> data.frame() |> summarise(min=min(y))\ng1_mut <- g1 |> activate(nodes) |> mutate(x=x/max(x))\n\n## Mutate Y position and x position for the second graph\ng2 <-pathway(\"ko00620\")\ng2_mut <- g2 |> activate(nodes) |> mutate(y=y+pos$min, x=x/max(x))\njoined_raw <- graph_join(g1_mut, g2_mut)\njoined_name <- graph_join(g1_mut, g2_mut, by=c(\"name\",\"x\",\"y\"))\n\n## Group by node names and take attribute of first rows\n## For edges, combine reaction\nnewg <- joined_raw |>\n  convert(to_contracted, name) |>\n  activate(nodes) |>\n  mutate(purrr::map_vec(.orig_data, function(x) x[1,]))|>\n  activate(edges) |>\n  mutate(reaction=purrr::map_vec(.orig_data, \n                                 function(x) paste0(unique(x$reaction),\n                                                    collapse=\",\")),\n         subtype=purrr::map_vec(.orig_data, \n                                 function(x) unique(x$subtype)))\n## Highlight the cpd:C00024 node for normal-joined, and contracted graph by name\n## Blue color indicates occurrence in both pathway\n\n## Normal joined\njoined_name |> morph(to_contracted, name) |> \n  activate(nodes) |>\n  mutate(occ=purrr::map_vec(.orig_data, function(x) dim(x)[1])) |> \n  unmorph() |>\n  ggraph(layout=\"manual\", x=x, y=y) + \n  geom_edge_link0(width=0.1, aes(color=subtype,\n                                 filter=subtype %in% c(\"substrate\",\"product\")))+\n  geom_node_point() +\n  geom_node_point(color=\"blue\", aes(filter=occ>1))+\n  graphhighlight::highlight_node(filter=name==\"cpd:C00024\", glow=TRUE,\n                                 highlight_color = \"red\")+\n  theme_void()\n\n## Contracted\nnewg |> \n  activate(nodes) |> mutate(\n    ko=convert_id(\"ko\"),\n    occ=purrr::map_vec(.orig_data, function(x) dim(x)[1])) |>\nggraph(layout=\"manual\", x=x, y=y) + \n  geom_edge_link0(width=0.1, aes(color=subtype,\n                                 filter=subtype %in% c(\"substrate\",\"product\")))+\n  geom_node_point()+\n  geom_node_point(color=\"blue\", aes(filter=occ>1)) + \n  geom_node_point(color=\"red\", aes(filter=name==\"cpd:C00024\"))+\n  graphhighlight::highlight_node(filter=name==\"cpd:C00024\", glow=TRUE,\n                                 highlight_color = \"red\")+\n  geom_node_text(size=1.5, family=\"serif\", repel=TRUE, bg.colour=\"white\",\n                 aes(label=ko, filter=type==\"ortholog\"))+\n  theme_void()"},{"path":"pathway.html","id":"multi_pathway_native","chapter":"2 Pathway","heading":"2.5.1 multi_pathway_native","text":"employing multi_pathway_native function, one can array multiple native KGML layouts panel. conjunction to_contracted, becomes feasible examine relationships genes across various pathways.","code":"\npathways <- c(\"hsa04110\",\"hsa03460\")\nmultig <- multi_pathway_native(pathways, row_num=2)\n#> [1] \"1 1\"\n#> [1] \"2 1\"\n\nmultig |>\n  ggraph(layout=\"manual\", x=x, y=y)+\n  geom_edge_link(alpha=0.2,\n                 arrow=arrow(length=unit(1,\"mm\")),\n                 start_cap=circle(5,\"mm\"),\n                 end_cap=circle(5,\"mm\"))+\n  geom_node_point(aes(color=pathway_id))+\n  theme_void()"},{"path":"pathway.html","id":"visualize-the-result-of-enrichkegg","chapter":"2 Pathway","heading":"2.6 Visualize the result of enrichKEGG","text":"library can directly visualize functional enrichment analysis result using enrichKEGG clusterProfiler. enrich_attribute boolean value whether investigated gene pathway . piping enrichResult class object pathway_number ggkegg, enrich_attribute included resulting graph. Highlight enrich_attribute resulting graph. quick inspection, rawMap function can used simply producing highlighted graph overlaid KEGG raw map.","code":"\ndata(geneList, package='DOSE')\nde <- names(geneList)[1:100]\nenrichKEGG(de, pvalueCutoff=0.01) |>\n  ggkegg(convert_org = \"hsa\",\n         pathway_number=1) +\n    geom_edge_link(\n    aes(color=subtype),\n    arrow = arrow(length = unit(1, 'mm')), \n    start_cap = square(1, 'cm'),\n    end_cap = square(1.5, 'cm')) + \n    geom_node_rect(aes(filter=.data$undefined & !.data$type==\"gene\"),\n                   fill=\"transparent\", color=\"red\")+\n    geom_node_rect(aes(filter=!.data$undefined &\n                         .data$type==\"gene\"), fill=\"white\", color=\"black\")+\n    geom_node_text(aes(label=converted_name,\n                       filter=.data$type == \"gene\"),\n                   size=2.5,\n                   color=\"black\",family=\"serif\")+\n    with_outer_glow(geom_node_text(aes(label=converted_name,\n                                       filter=.data$enrich_attribute),\n                                   size=2.5, color=\"red\"),\n                    colour=\"white\",\n                    expand=4)+\n    theme_void()\n\n\n## Quick inspection\nres <- enrichKEGG(de, pvalueCutoff=0.01) |> rawMap()\nggsave(file=\"tmp.png\",res,width=12,height=7,dpi=300,units=\"in\")\ncowplot::ggdraw()+cowplot::draw_image(\"tmp.png\")"},{"path":"module.html","id":"module","chapter":"3 Module","heading":"3 Module","text":"Module information can obtained parsed. Parsing DEFINITION REACTION supported. definition, first function breaks definition blocks, make graphical representation using ggraph tbl_graph text using geom_text geom_rect. calling module function, kegg_module class object created.module function creates object kegg_module class, stores parsed information reactions definitions internal slots. providing kegg_module object various functions, possible execute various operations related module.Visualizing reactions module. Please report reaction properly parsed way.","code":"\nlibrary(ggkegg)\nlibrary(tidygraph)\nlibrary(dplyr)\nmod <- module(\"M00004\")\nmod\n#> M00004\n#> Pentose phosphate pathway (Pentose phosphate cycle)\nlibrary(igraph)\nmod <- module(\"M00004\")\n\n## Some edges are duplicate and have different reactions,\n## so simplify\nmod@reaction_graph |> \n  convert(to_simple) |>\n  activate(edges) |> \n  mutate(reaction=lapply(.orig_data,\n                         function(x) \n                           paste0(unique(x[[\"reaction\"]]),\n                                  collapse=\",\"))) |>\n  ggraph()+\n    geom_node_point()+\n    geom_edge_parallel(\n      aes(label=reaction), angle_calc = \"along\",\n      label_dodge = unit(5,\"mm\"),\n      label_colour = \"tomato\",\n      arrow = arrow(length = unit(1, 'mm')),\n      end_cap = circle(5, 'mm'),\n      start_cap = circle(5, \"mm\"))+\n    geom_node_text(aes(label=name), repel=TRUE,\n                   bg.colour=\"white\", size=4)+\n    theme_void()"},{"path":"module.html","id":"module-definition-in-graph","chapter":"3 Module","heading":"3.1 Module definition in graph","text":"can visualize module definition graph. make grouping nodes nodes leading nodes connected argument (‘+’ ’ ’), connect definition. example , wrapper function plot_module_blocks() visualizes definitions module. Red represents relationships, relationships (compound ) expressed edge labels.","code":"\nmodule(\"M00009\") |>\n  obtain_sequential_module_definition() |> ## return tbl_graph\n  plot_module_blocks() ## wrapper function"},{"path":"module.html","id":"module-definition-in-text","chapter":"3 Module","heading":"3.2 Module definition in text","text":"can also visualize module definition text.","code":"\nmodule(\"M00004\") |>\n  module_text() |> ## return data.frame\n  plot_module_text() ## wrapper function"},{"path":"module.html","id":"module-completeness","chapter":"3 Module","heading":"3.3 Module completeness","text":"Given vector interesting KOs, module completeness can calculated using boolean expression.","code":"\nmod <- module(\"M00009\")\nquery <- sample(mod@definition_components,5) |>\n  strsplit(\":\") |>\n  sapply(\"[\",2)\nquery\n#> [1] \"K00241\" \"K00246\" \"K01676\" \"K18118\" \"K00025\"\nmod |>\n  module_completeness(query) |>\n  kableExtra::kable()"},{"path":"module.html","id":"module-abundance-and-pathway-abundance-calculation","chapter":"3 Module","heading":"3.4 Module abundance and pathway abundance calculation","text":"","code":"\nvec <- c(0.1, 0.5)\nnames(vec) <- c(\"K00234\",\"K01676\")\nmodule_abundance(\"M00009\", vec)\n#> [1] 0.3947368"},{"path":"module.html","id":"visualize-the-result-of-enricher","chapter":"3 Module","heading":"3.5 Visualize the result of enricher","text":"performed experiments involving KEGG Orthology, performed enrichment analysis KO module relationship.","code":"\nlibrary(BiocFileCache)\n#> Warning: package 'BiocFileCache' was built under R version\n#> 4.2.2\n#> Loading required package: dbplyr\n#> Warning: package 'dbplyr' was built under R version 4.2.3\n#> \n#> Attaching package: 'dbplyr'\n#> The following objects are masked from 'package:dplyr':\n#> \n#>     ident, sql\nlibrary(clusterProfiler)\n#> \n#> clusterProfiler v4.7.1.003  For help: https://yulab-smu.top/biomedical-knowledge-mining-book/\n#> \n#> If you use clusterProfiler in published research, please cite:\n#> T Wu, E Hu, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo, and G Yu. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. The Innovation. 2021, 2(3):100141\n#> \n#> Attaching package: 'clusterProfiler'\n#> The following object is masked from 'package:igraph':\n#> \n#>     simplify\n#> The following object is masked from 'package:stats':\n#> \n#>     filter\n\n## Download and cache KO to module relationship\nurl <- paste0(\"https://rest.kegg.jp/link/ko/module\")\nbfc <- BiocFileCache()\npath <- bfcrpath(bfc, url)\nmodule.bg <- apply(data.table::fread(path), 2, function(x) sapply(strsplit(x, \":\"), \"[\",2))|> data.frame()|>`colnames<-`(c(\"term\",\"gene\"))\n\n## Using the table, perform enrichment analysis.\nmod.enrich <- enricher(c(\"K00431\",\"K00832\"),TERM2GENE=module.bg)\n\n## Visualize using ggkegg\ndd <- ggkegg(mod.enrich)\ndd"},{"path":"network.html","id":"network","chapter":"4 Network","heading":"4 Network","text":"also possible parse KEGG NETWORK plot network way. case, network function used.","code":"\nlibrary(ggkegg)\nlibrary(tidygraph)\nlibrary(dplyr)\nkne <- network(\"N00002\")\nkne\n#> N00002\n#> BCR-ABL fusion kinase to RAS-ERK signaling pathway"},{"path":"network.html","id":"combining-multiple-networks","chapter":"4 Network","heading":"4.1 Combining multiple networks","text":"example obtaining multiple networks, merging graph_join, plotting using plot_kegg_network wrapper function. network_graph function function generates graph string. possible specify definition expanded type generate graph.using ggforce, possible draw multiple graphs showing genes belong network.","code":"\nkne <- network(\"N00385\")  ## HCMV\nkne2 <- network(\"N00366\") ## HPV\none <- kne |> network_graph()\ntwo <- kne2 |> network_graph()\ntwo\n#> # A tbl_graph: 6 nodes and 5 edges\n#> #\n#> # A rooted tree\n#> #\n#> # A tibble: 6 × 3\n#>   name     network_name                          network_ID\n#>   <chr>    <chr>                                 <chr>     \n#> 1 E5       HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> 2 V-ATPase HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> 3 EGFR     HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> 4 PI3K     HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> 5 PIP3     HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> 6 AKT      HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> #\n#> # A tibble: 5 × 4\n#>    from    to type  subtype  \n#>   <int> <int> <chr> <chr>    \n#> 1     1     2 -|    reference\n#> 2     2     3 -|    reference\n#> 3     3     4 ->    reference\n#> # ℹ 2 more rows\ngraph_join(one, two, by=\"name\") |> plot_kegg_network()\nkne3 <- network(\"N00485\") ## EBV\nkne4 <- network(\"N00030\") ## EGF-EGFR-RAS-PI3K\nthree <- kne3 |> network_graph()\nfour <- kne4 |> network_graph()\n\ngg <- Reduce(function(x,y) graph_join(x,y, by=\"name\"), list(one, two, three, four))\ncoln <- gg |> activate(nodes) |> data.frame() |> colnames() \nnids <- coln[grepl(\"network_ID\",coln)]\n\nnet <- plot_kegg_network(gg)\nfor (i in nids) {\n  net <- net + ggforce::geom_mark_hull(alpha=0.2, aes(group=.data[[i]],\n    fill=.data[[i]], x=x, y=y, filter=!is.na(.data[[i]])))\n}\nnet + scale_fill_manual(values=viridis::plasma(4), name=\"ID\")\n## Better to plot points and edges after the hull"},{"path":"usecases.html","id":"usecases","chapter":"5 Usecases","heading":"5 Usecases","text":"","code":""},{"path":"usecases.html","id":"visualizing-numerical-attributes-from-deseq2","chapter":"5 Usecases","heading":"5.1 Visualizing numerical attributes from DESeq2","text":"providing results DESeq2 package, often used transcriptome analysis, possible reflect numerical results nodes graph. assign_deseq2 function can used purpose. specifying numerical value (e.g., log2FoldChange) want reflect graph column argument, can assign value nodes. multiple genes hit, numeric_combine argument specifies combine multiple values (default mean)., use RNA-Seq dataset analyzed transcriptome changes human urothelial cells infected BK polyomavirus (Baker et al. 2022). raw sequences obtained Sequence Read Archive processed nf-core, subsequently analyzed using tximport, salmon DESeq2.","code":"\nlibrary(ggkegg)\nlibrary(DESeq2)\nlibrary(org.Hs.eg.db)\nlibrary(dplyr)\n\nload(\"uro.deseq.res.rda\") ## Storing DESeq() result\nres\n#> class: DESeqDataSet \n#> dim: 29744 26 \n#> metadata(1): version\n#> assays(8): counts avgTxLength ... replaceCounts\n#>   replaceCooks\n#> rownames(29744): A1BG A1BG-AS1 ... ZZEF1 ZZZ3\n#> rowData names(27): baseMean baseVar ... maxCooks\n#>   replace\n#> colnames(26): SRR14509882 SRR14509883 ... SRR14509906\n#>   SRR14509907\n#> colData names(27): Assay.Type AvgSpotLen ...\n#>   viral_infection replaceable\nvinf <- results(res, contrast=c(\"viral_infection\",\"BKPyV (Dunlop) MOI=1\",\"No infection\"))\n\n## LFC\ng <- pathway(\"hsa04110\") |> mutate(deseq2=assign_deseq2(vinf),\n                                   padj=assign_deseq2(vinf, column=\"padj\"),\n                                   converted_name=convert_id(\"hsa\"))\n\nggraph(g, layout=\"manual\", x=x, y=y) + \n  geom_edge_link(width=0.5, arrow = arrow(length = unit(1, 'mm')), \n                 start_cap = square(1, 'cm'),\n                 end_cap = square(1.5, 'cm'), aes(color=subtype))+\n  geom_node_rect(aes(fill=deseq2, filter=type==\"gene\"), color=\"black\")+\n  ggfx::with_outer_glow(geom_node_text(aes(label=converted_name, filter=type!=\"group\"), size=2.5), colour=\"white\", expand=1)+\n  scale_fill_gradient(low=\"blue\",high=\"red\", name=\"LFC\")+\n  theme_void()\n\n## Adjusted p-values\nggraph(g, layout=\"manual\", x=x, y=y) + \n  geom_edge_link(width=0.5, arrow = arrow(length = unit(1, 'mm')), \n                 start_cap = square(1, 'cm'),\n                 end_cap = square(1.5, 'cm'), aes(color=subtype))+\n  geom_node_rect(aes(fill=padj, filter=type==\"gene\"), color=\"black\")+\n  ggfx::with_outer_glow(geom_node_text(aes(label=converted_name, filter=type!=\"group\"), size=2.5), colour=\"white\", expand=1)+\n  scale_fill_gradient(name=\"padj\")+\n  theme_void()\n\n## Adjusted p-values\nggraph(g, layout=\"manual\", x=x, y=y) + \n  geom_edge_link(width=0.5, arrow = arrow(length = unit(1, 'mm')), \n                 start_cap = square(1, 'cm'),\n                 end_cap = square(1.5, 'cm'), aes(color=subtype))+\n  geom_node_rect(aes(fill=padj, filter=type==\"gene\"), color=\"black\")+\n  ggfx::with_outer_glow(geom_node_text(aes(label=converted_name, filter=type!=\"group\"), size=2.5), colour=\"white\", expand=1)+\n  scale_fill_gradient(name=\"padj\")+\n  theme_void()\n\n## Highlighting differentially expressed genes at adjusted p-values < 0.05 with coloring of adjusted p-values on raw KEGG map\ngg <- ggraph(g, layout=\"manual\", x=x, y=y)+\n  geom_node_rect(aes(fill=padj, filter=type==\"gene\"))+\n  ggfx::with_outer_glow(geom_node_rect(aes(fill=padj, filter=!is.na(padj) & padj<0.05)),\n                        colour=\"yellow\", expand=5)+\n  overlay_raw_map(\"hsa04110\", transparent_colors = c(\"#cccccc\",\"#FFFFFF\",\"#BFBFFF\",\"#BFFFBF\"))+\n  scale_fill_gradient(low=\"pink\",high=\"steelblue\") + theme_void()\n\nggsave(file=\"tmp.png\",gg,width=20,height=15,dpi=300,units=\"in\")\ncowplot::ggdraw()+cowplot::draw_image(\"tmp.png\")"},{"path":"usecases.html","id":"integrating-numeric-vector-to-tbl_graph","chapter":"5 Usecases","heading":"5.2 Integrating numeric vector to tbl_graph","text":"Numerical values can reflected node edge tables, utilizing either node_numeric edge_numeric functions. input can named vector tibble containing id value columns.","code":"\nvec <- 1\nnames(vec) <- c(\"hsa:51343\")\nnew_g <- g |> mutate(num=node_numeric(vec))\nnew_g\n#> # A tbl_graph: 134 nodes and 157 edges\n#> #\n#> # A directed acyclic multigraph with 40 components\n#> #\n#> # A tibble: 134 × 22\n#>   name        type  reaction graphics_name     x     y width\n#>   <chr>       <chr> <chr>    <chr>         <dbl> <dbl> <dbl>\n#> 1 hsa:1029    gene  <NA>     CDKN2A, ARF,…   532  -218    46\n#> 2 hsa:51343   gene  <NA>     FZR1, CDC20C…   981  -630    46\n#> 3 hsa:4171 h… gene  <NA>     MCM2, BM28, …   553  -681    46\n#> 4 hsa:23594 … gene  <NA>     ORC6, ORC6L.…   494  -681    46\n#> 5 hsa:10393 … gene  <NA>     ANAPC10, APC…   981  -392    46\n#> 6 hsa:10393 … gene  <NA>     ANAPC10, APC…   981  -613    46\n#> # ℹ 128 more rows\n#> # ℹ 15 more variables: height <dbl>, fgcolor <chr>,\n#> #   bgcolor <chr>, graphics_type <chr>, coords <chr>,\n#> #   xmin <dbl>, xmax <dbl>, ymin <dbl>, ymax <dbl>,\n#> #   orig.id <chr>, pathway_id <chr>, deseq2 <dbl>,\n#> #   padj <dbl>, converted_name <chr>, num <dbl>\n#> #\n#> # A tibble: 157 × 4\n#>    from    to type  subtype        \n#>   <int> <int> <chr> <chr>          \n#> 1   118    39 GErel expression     \n#> 2    50    61 PPrel inhibition     \n#> 3    50    61 PPrel phosphorylation\n#> # ℹ 154 more rows"},{"path":"usecases.html","id":"integrating-matrix-to-tbl_graph","chapter":"5 Usecases","heading":"5.3 Integrating matrix to tbl_graph","text":"want reflect expression matrix graph, edge_matrix node_matrix functions can useful. specifying matrix gene IDs, can assign numeric values sample tbl_graph. edge_matrix assigns sum two nodes connected edge, ignoring group nodes (Adnan et al. 2020).","code":"\nmat <- assay(vst(res))\nnew_g <- g |> edge_matrix(mat) |> node_matrix(mat)\nnew_g\n#> # A tbl_graph: 134 nodes and 157 edges\n#> #\n#> # A directed acyclic multigraph with 40 components\n#> #\n#> # A tibble: 134 × 47\n#>   name        type  reaction graphics_name     x     y width\n#>   <chr>       <chr> <chr>    <chr>         <dbl> <dbl> <dbl>\n#> 1 hsa:1029    gene  <NA>     CDKN2A, ARF,…   532  -218    46\n#> 2 hsa:51343   gene  <NA>     FZR1, CDC20C…   981  -630    46\n#> 3 hsa:4171 h… gene  <NA>     MCM2, BM28, …   553  -681    46\n#> 4 hsa:23594 … gene  <NA>     ORC6, ORC6L.…   494  -681    46\n#> 5 hsa:10393 … gene  <NA>     ANAPC10, APC…   981  -392    46\n#> 6 hsa:10393 … gene  <NA>     ANAPC10, APC…   981  -613    46\n#> # ℹ 128 more rows\n#> # ℹ 40 more variables: height <dbl>, fgcolor <chr>,\n#> #   bgcolor <chr>, graphics_type <chr>, coords <chr>,\n#> #   xmin <dbl>, xmax <dbl>, ymin <dbl>, ymax <dbl>,\n#> #   orig.id <chr>, pathway_id <chr>, deseq2 <dbl>,\n#> #   padj <dbl>, converted_name <chr>, SRR14509882 <dbl>,\n#> #   SRR14509883 <dbl>, SRR14509884 <dbl>, …\n#> #\n#> # A tibble: 157 × 32\n#>    from    to type  subtype        from_nd to_nd SRR14509882\n#>   <int> <int> <chr> <chr>          <chr>   <chr>       <dbl>\n#> 1   118    39 GErel expression     undefi… hsa:…        NA  \n#> 2    50    61 PPrel inhibition     hsa:29… hsa:…        24.4\n#> 3    50    61 PPrel phosphorylati… hsa:29… hsa:…        24.4\n#> # ℹ 154 more rows\n#> # ℹ 25 more variables: SRR14509883 <dbl>,\n#> #   SRR14509884 <dbl>, SRR14509885 <dbl>,\n#> #   SRR14509886 <dbl>, SRR14509887 <dbl>,\n#> #   SRR14509888 <dbl>, SRR14509889 <dbl>,\n#> #   SRR14509890 <dbl>, SRR14509891 <dbl>,\n#> #   SRR14509892 <dbl>, SRR14509893 <dbl>, …"},{"path":"usecases.html","id":"visualizing-multiple-enrichment-results","chapter":"5 Usecases","heading":"5.4 Visualizing multiple enrichment results","text":"can visualize results multiple enrichment analyses. Similar using ggkegg function enrichResult class, append_cp function can used within mutate function. providing enrichResult object function, pathway visualized present result, gene information within pathway can reflected graph. example, addition changes urothelial cells mentioned , changes renal proximal tubular epithelial cells compared (Assetta et al. 2016).example applies similar reflection Raw KEGG map highlights genes show statistically significant changes conditions using ggfx yellow outer glow, composing dotplot produced clusterProfiler enrichment results patchwork.","code":"\n\n## These are RDAs storing DEGs\nload(\"degListRPTEC.rda\")\nload(\"degURO.rda\")\n\nlibrary(org.Hs.eg.db);\nlibrary(clusterProfiler);\ninput_uro <- bitr(uroUp, ## DEGs in urothelial cells\n              fromType = \"SYMBOL\",\n              toType = \"ENTREZID\",\n              OrgDb = org.Hs.eg.db)$ENTREZID\ninput_rptec <- bitr(gls$day3_up_rptec, ## DEGs at 3 days post infection in RPTECs\n              fromType = \"SYMBOL\",\n              toType = \"ENTREZID\",\n              OrgDb = org.Hs.eg.db)$ENTREZID\n\nekuro <- enrichKEGG(gene = input_uro)\nekrptec <- enrichKEGG(gene = input_rptec)\n\ng1 <- pathway(\"hsa04110\") |> mutate(uro=append_cp(ekuro, how=\"all\"),\n                                    rptec=append_cp(ekrptec, how=\"all\"),\n                                    converted_name=convert_id(\"hsa\"))\nggraph(g1, layout=\"manual\", x=x, y=y) + \n  geom_edge_link(width=0.5, arrow = arrow(length = unit(1, 'mm')), \n                 start_cap = square(1, 'cm'),\n                 end_cap = square(1.5, 'cm'), aes(color=subtype))+\n  geom_node_rect(aes(fill=uro, xmax=x,  filter=type==\"gene\"))+\n  geom_node_rect(aes(fill=rptec, xmin=x, filter=type==\"gene\"))+\n  scale_fill_manual(values=c(\"steelblue\",\"tomato\"), name=\"urothelial|rptec\")+\n  ggfx::with_outer_glow(geom_node_text(aes(label=converted_name, filter=type!=\"group\"), size=2), colour=\"white\", expand=1)+\n  theme_void()\nlibrary(patchwork)\nright <- (dotplot(ekuro) + ggtitle(\"Urothelial\")) /\n(dotplot(ekrptec) + ggtitle(\"RPTECs\"))\n\ng1 <- pathway(\"hsa03410\") |>\n  mutate(uro=append_cp(ekuro, how=\"all\"),\n        rptec=append_cp(ekrptec, how=\"all\"),\n        converted_name=convert_id(\"hsa\"))\ngg <- ggraph(g1, layout=\"manual\", x=x, y=y)+\n  ggfx::with_outer_glow(\n    geom_node_rect(aes(filter=uro&rptec),\n                   color=\"gold\", fill=\"transparent\"),\n    colour=\"gold\", expand=15, sigma=10)+\n  geom_node_rect(aes(fill=uro, filter=type==\"gene\"))+\n  geom_node_rect(aes(fill=rptec, xmin=x, filter=type==\"gene\")) +\n  overlay_raw_map(\"hsa03410\", transparent_colors = c(\"#cccccc\",\"#FFFFFF\",\"#BFBFFF\",\"#BFFFBF\"))+\n  scale_fill_manual(values=c(\"steelblue\",\"tomato\"),\n                    name=\"urothelial|rptec\")+\n  theme_void()\ngg2 <- gg + right + plot_layout(design=\"\nAAAA###\nAAAABBB\nAAAABBB\nAAAA###\n\"\n)\nggsave(file=\"tmp.png\",gg2,width=20,height=15,dpi=300,units=\"in\")\ncowplot::ggdraw()+cowplot::draw_image(\"tmp.png\")"},{"path":"usecases.html","id":"projecting-the-gene-regulatory-networks-on-kegg-map","chapter":"5 Usecases","heading":"5.5 Projecting the gene regulatory networks on KEGG map","text":"package, possible project inferred networks gene regulatory networks KO networks inferred software onto KEGG maps. following example projecting subset KO networks within pathway inferred CBNplot onto reference map corresponding pathway using MicrobiomeProfiler. course, also possible project networks created using methods.Plot resulting map. example, strength estimated CBNplot first displayed colored edges, edges reference graph drawn black top . Also, edges included graphs highlighted yellow.","code":"\nlibrary(dplyr)\nlibrary(igraph)\nlibrary(tidygraph)\nlibrary(CBNplot)\nlibrary(ggkegg)\nlibrary(MicrobiomeProfiler)\ndata(Rat_data)\nko.res <- enrichKO(Rat_data)\nexp.dat <- matrix(abs(rnorm(910)), 91, 10) %>% magrittr::set_rownames(value=Rat_data) %>% magrittr::set_colnames(value=paste0('S', seq_len(ncol(.))))\nreturnnet <- bngeneplot(ko.res, exp=exp.dat, pathNum=1, orgDb=NULL,returnNet = TRUE)\npg <- pathway(\"ko00650\")\njoined <- combine_with_bnlearn(pg, returnnet$str, returnnet$av)\n## Summarize duplicate edges including `strength` attribute\nnumber <- joined |> activate(edges) |> data.frame() |> group_by(from,to) |>\n  summarise(n=n(), incstr=sum(!is.na(strength)))\n\n## Annotate them\njoined <- joined |> activate(edges) |> full_join(number) |> mutate(both=n>1&incstr>0)\n\njoined |> \n  activate(nodes) |>\n  filter(!is.na(type)) |>\n  mutate(convertKO=convert_id(\"ko\")) |>\n  activate(edges) |>\n  ggraph(x=x, y=y) +\n  geom_edge_link0(width=0.5,aes(filter=!is.na(strength),\n                              color=strength), linetype=1)+\n  ggfx::with_outer_glow(\n    geom_edge_link0(width=0.5,aes(filter=!is.na(strength) & both,\n                                  color=strength), linetype=1),\n    colour=\"yellow\", sigma=1, expand=1)+\n  geom_edge_link0(width=0.1, aes(filter=is.na(strength)))+\n  scale_edge_color_gradient(low=\"blue\",high=\"red\")+\n  geom_node_rect(color=\"black\", aes(fill=type))+\n  geom_node_text(aes(label=convertKO), size=2)+\n  geom_node_text(aes(label=ifelse(grepl(\":\", graphics_name), strsplit(graphics_name, \":\") |>\n                                    sapply(\"[\",2) |> stringr::str_wrap(22), stringr::str_wrap(graphics_name, 22)),\n                     filter=!is.na(type) & type==\"map\"), family=\"serif\",\n                 size=2, na.rm=TRUE)+\n  theme_void()"},{"path":"usecases.html","id":"cluster-marker-genes-in-single-cell-transcriptomics","chapter":"5 Usecases","heading":"5.6 Cluster marker genes in single-cell transcriptomics","text":"package can also applied single-cell analysis. example, consider mapping marker genes clusters onto KEGG pathways plotting together reduced dimension plots. , use Seurat package. conduct fundamental analysis.Subsequently, employ scplot plot results dimensionality reduction using UMAP.\nAmong , present study, perform enrichment analysis marker genes clusters 1 5.Obtain color information ggplot2 obtain pathway using ggkegg. , selected Osteoclast differentiation (hsa04380), nodes colored ggfx according colors reduced dimension plot, markers cluster colored specified color (tomato). facilitates linkage pathway information, KEGG, single-cell analysis data, enabling creation intuitive comprehensible visual representations.Example composing multiple pathways:","code":"\nlibrary(Seurat)\n# dir = \"../filtered_gene_bc_matrices/hg19\"\n# pbmc.data <- Read10X(data.dir = dir)\n# pbmc <- CreateSeuratObject(counts = pbmc.data, project = \"pbmc3k\",\n#                            min.cells=3, min.features=200)\n# pbmc <- NormalizeData(pbmc)\n# pbmc <- FindVariableFeatures(pbmc, selection.method = \"vst\")\n# pbmc <- ScaleData(pbmc, features = row.names(pbmc))\n# pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))\n# pbmc <- FindNeighbors(pbmc, dims = 1:10, verbose = FALSE)\n# pbmc <- FindClusters(pbmc, resolution = 0.5, verbose = FALSE)\n# pbmc <- RunUMAP(pbmc, dims = 1:10, umap.method = \"uwot\", metric = \"cosine\")\n# markers <- FindAllMarkers(pbmc)\n# save(pbmc, markers, file=\"../sc_data.rda\")\n\n## To reduce file size, pre-calculated RDA will be loaded\nload(\"../sc_data.rda\")\nlibrary(scplot)\n## scplot utilizes scattermore for rendering, in this instance, we override the highlighting by geom_node_point.\ndd <- sc_dim(pbmc) + \n  ggfx::with_outer_glow(geom_node_point(size=1, aes(x=UMAP_1, y=UMAP_2, filter=ident==\"1\", color=ident)),\n                        colour=\"tomato\", expand=9)+\n  ggfx::with_outer_glow(geom_node_point(size=1, aes(x=UMAP_1, y=UMAP_2, filter=ident==\"5\", color=ident)),\n                        colour=\"tomato\", expand=9)+\n  sc_dim_geom_label(geom = shadowtext::geom_shadowtext, \n                    color='black', bg.color='white')\n\nlibrary(clusterProfiler)\nmarker_1 <- clusterProfiler::bitr((markers |> filter(cluster==\"1\" & p_val_adj < 1e-50) |>\n                                     dplyr::select(gene))$gene,fromType=\"SYMBOL\",toType=\"ENTREZID\",OrgDb = org.Hs.eg.db)$ENTREZID\nmarker_5 <- clusterProfiler::bitr((markers |> filter(cluster==\"5\" & p_val_adj < 1e-50) |>\n                                     dplyr::select(gene))$gene,fromType=\"SYMBOL\",toType=\"ENTREZID\",OrgDb = org.Hs.eg.db)$ENTREZID\nmk1_enrich <- enrichKEGG(marker_1)\nmk5_enrich <- enrichKEGG(marker_5)\nbuilt <- ggplot_build(dd)$data[[1]]\ncols <- built$colour\nnames(cols) <- as.character(as.numeric(built$group)-1)\ngr_cols <- cols[!duplicated(cols)]\n\ng <- pathway(\"hsa04380\") |> mutate(marker_1=append_cp(mk1_enrich),\n                                   marker_5=append_cp(mk5_enrich))\ngg <- ggraph(g, layout=\"manual\", x=x, y=y)+\n  ggfx::with_outer_glow(\n    geom_node_rect(aes(filter=marker_1&marker_5),\n                   color=\"tomato\", fill=\"white\"), ## Marker 1 & 5\n    colour=\"tomato\", expand=9)+\n  ggfx::with_outer_glow(\n    geom_node_rect(aes(filter=marker_1&!marker_5),\n                   color=gr_cols[\"1\"], fill=\"white\"), ## Marker 1\n    colour=gr_cols[\"1\"], expand=9)+\n  ggfx::with_outer_glow(\n    geom_node_rect(aes(filter=marker_5&!marker_1),\n                   color=gr_cols[\"5\"], fill=\"white\"), ## Marker 5\n    colour=gr_cols[\"5\"], expand=9)+\n  overlay_raw_map(\"hsa04380\",\n                  transparent_colors = c(\"#cccccc\",\"#FFFFFF\",\"#BFBFFF\",\"#BFFFBF\"))+\n  theme_void()\nggsave(\"tmp.png\",\n       gg+dd+plot_layout(widths=c(0.7,0.3)),\n       width=20, height=6, dpi=300, units=\"in\")\ncowplot::ggdraw()+cowplot::draw_image(\"tmp.png\")\n\ndd <- sc_dim(pbmc) + \n  ggfx::with_outer_glow(geom_node_point(size=1, aes(x=UMAP_1, y=UMAP_2, filter=ident==\"1\", color=ident)),\n                        colour=\"tomato\", expand=9)+\n  ggfx::with_outer_glow(geom_node_point(size=1, aes(x=UMAP_1, y=UMAP_2, filter=ident==\"5\", color=ident)),\n                        colour=\"tomato\", expand=9)+\n  ggfx::with_outer_glow(geom_node_point(size=1, aes(x=UMAP_1, y=UMAP_2, filter=ident==\"4\", color=ident)),\n                        colour=\"gold\", expand=9)+\n  ggfx::with_outer_glow(geom_node_point(size=1, aes(x=UMAP_1, y=UMAP_2, filter=ident==\"6\", color=ident)),\n                        colour=\"gold\", expand=9)+\n  sc_dim_geom_label(geom = shadowtext::geom_shadowtext, \n                    color='black', bg.color='white')\n\nlibrary(clusterProfiler)\nlibrary(org.Hs.eg.db)\nmarker_1 <- clusterProfiler::bitr((markers |> filter(cluster==\"1\" & p_val_adj < 1e-50) |>\n                                     dplyr::select(gene))$gene,fromType=\"SYMBOL\",toType=\"ENTREZID\",OrgDb = org.Hs.eg.db)$ENTREZID\nmarker_5 <- clusterProfiler::bitr((markers |> filter(cluster==\"5\" & p_val_adj < 1e-50) |>\n                                     dplyr::select(gene))$gene,fromType=\"SYMBOL\",toType=\"ENTREZID\",OrgDb = org.Hs.eg.db)$ENTREZID\nmarker_6 <- clusterProfiler::bitr((markers |> filter(cluster==\"6\" & p_val_adj < 1e-50) |>\n                                     dplyr::select(gene))$gene,fromType=\"SYMBOL\",toType=\"ENTREZID\",OrgDb = org.Hs.eg.db)$ENTREZID\nmarker_4 <- clusterProfiler::bitr((markers |> filter(cluster==\"4\" & p_val_adj < 1e-50) |>\n                                     dplyr::select(gene))$gene,fromType=\"SYMBOL\",toType=\"ENTREZID\",OrgDb = org.Hs.eg.db)$ENTREZID\nmk1_enrich <- enrichKEGG(marker_1)\nmk5_enrich <- enrichKEGG(marker_5)\nmk6_enrich <- enrichKEGG(marker_6)\nmk4_enrich <- enrichKEGG(marker_4)\n\nbuilt <- ggplot_build(dd)$data[[1]]\ncols <- built$colour\nnames(cols) <- as.character(as.numeric(built$group)-1)\ngr_cols <- cols[!duplicated(cols)]\n\ng1 <- pathway(\"hsa04612\") |> mutate(marker_4=append_cp(mk4_enrich),\n                                   marker_6=append_cp(mk6_enrich))\ngg1 <- ggraph(g1, layout=\"manual\", x=x, y=y)+\n  ggfx::with_outer_glow(\n    geom_node_rect(aes(filter=marker_4&marker_6),\n                   color=\"gold\", fill=\"white\"),\n    colour=\"gold\", expand=9)+\n  ggfx::with_outer_glow(\n    geom_node_rect(aes(filter=marker_4&!marker_6),\n                   color=gr_cols[\"4\"], fill=\"white\"),\n    colour=gr_cols[\"4\"], expand=9)+\n  ggfx::with_outer_glow(\n    geom_node_rect(aes(filter=marker_6&!marker_4),\n                   color=gr_cols[\"6\"], fill=\"white\"),\n    colour=gr_cols[\"6\"], expand=9)+\n  overlay_raw_map(\"hsa04612\",\n                  transparent_colors = c(\"#b3b3b3\",\n                                         \"#cccccc\",\n                                         \"#FFFFFF\",\n                                         \"#BFBFFF\",\n                                         \"#BFFFBF\"))+\n  theme_void()\n\ng2 <- pathway(\"hsa04380\") |> mutate(marker_1=append_cp(mk1_enrich),\n                                   marker_5=append_cp(mk5_enrich))\ngg2 <- ggraph(g2, layout=\"manual\", x=x, y=y)+\n  ggfx::with_outer_glow(\n    geom_node_rect(aes(filter=marker_1&marker_5),\n                   color=\"tomato\", fill=\"white\"), ## Marker 1 & 5\n    colour=\"tomato\", expand=9)+\n  ggfx::with_outer_glow(\n    geom_node_rect(aes(filter=marker_1&!marker_5),\n                   color=gr_cols[\"1\"], fill=\"white\"), ## Marker 1\n    colour=gr_cols[\"1\"], expand=9)+\n  ggfx::with_outer_glow(\n    geom_node_rect(aes(filter=marker_5&!marker_1),\n                   color=gr_cols[\"5\"], fill=\"white\"), ## Marker 5\n    colour=gr_cols[\"5\"], expand=9)+\n  overlay_raw_map(\"hsa04380\",\n                  transparent_colors = c(\"#cccccc\",\"#FFFFFF\",\"#BFBFFF\",\"#BFFFBF\"))+\n  theme_void()\nleft <-  (gg2 + ggtitle(\"Marker 1 and 5\")) /\n (gg1 + ggtitle(\"Marker 4 and 6\"))\n\nfinal <- left + dd + plot_layout(design=\"\n            AAAAA###\n            AAAAACCC\n            BBBBBCCC\n            BBBBB###\n            \")\n\nggsave(\"tmp.png\",\n       final,\n       width=15, height=10, dpi=300, units=\"in\")\ncowplot::ggdraw()+cowplot::draw_image(\"tmp.png\")"}]
