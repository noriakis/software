[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"ggkegg fetches information KEGG parse, analyze visualize using ggplot2 ggraph. Combined packages investigating biological functions using KEGG.","code":""},{"path":"ggkegg.html","id":"ggkegg","chapter":"2 ggkegg","heading":"2 ggkegg","text":"ggkegg fetches information KEGG parse, analyze visualize using ggplot2 ggraph. Combined packages investigating biological functions using KEGG.One main aims ggkegg manupilating KEGG information tidy ways using tidygraph.","code":"\n# devtools::install_github(\"noriakis/ggkegg\")\nlibrary(ggkegg)\nlibrary(dplyr)\nlibrary(tidygraph)\nparse_kgml(\"hsa04110\") |> ## Obtain and parse the pathway\n  activate(nodes) |> ## node manipulation\n  mutate(convert_hsa=convert_id(\"hsa\"),\n         convert_map=convert_id(\"pathway\")) |> ## convert IDs for organism hsa and pathway\n  ggraph(x=x, y=y)+ ## ggraph plot\n  geom_node_rect(aes(filter=type==\"gene\",\n                     fill=I(bgcolor)),\n                 color=\"black\")+\n  geom_node_text(aes(label=convert_hsa),\n                 size=2, family=\"serif\")"},{"path":"pathway.html","id":"pathway","chapter":"3 Pathway","heading":"3 Pathway","text":"Providing ggkegg pathway ID, fetches information, parse make ggraph object. Inside, parse_kgml function used return igraph tbl_graph object.","code":"\nlibrary(ggkegg)\nlibrary(ggfx)\nlibrary(ggraph)\nlibrary(clusterProfiler)\nlibrary(dplyr)\nlibrary(tidygraph)\ng <- ggkegg(pid=\"eco00270\",\n            convert_org = c(\"pathway\",\"eco\"),\n            delete_zero_degree = TRUE,\n            return_igraph = TRUE)\ngg <- ggraph(g, layout=\"stress\") \ngg$data$type |> unique()\n#> [1] \"map\"      \"compound\" \"gene\"\ngg + geom_edge_diagonal(\n  aes(color=subtype,\n      filter=type!=\"maplink\"))+\n  geom_node_point(\n  aes(filter= !type%in%c(\"map\",\"compound\")),\n    fill=gg$data[!gg$data$type%in%c(\"map\",\"compound\"),]$bgcolor,\n    color=\"black\",\n    shape=21, size=4\n  )+\n  geom_node_point(\n    aes(filter= !type%in%c(\"map\",\"gene\")),\n    fill=gg$data[!gg$data$type%in%c(\"map\",\"gene\"),]$bgcolor,\n    color=\"black\",\n    shape=21, size=6\n  )+\n  geom_node_text(\n    aes(label=converted_name,\n        filter=type==\"gene\"),\n    repel=TRUE,\n    bg.colour=\"white\")+\n  theme_void()"},{"path":"pathway.html","id":"highlighting-set-of-nodes-and-edges","chapter":"3 Pathway","heading":"3.1 Highlighting set of nodes and edges","text":"want obtain ko01230, sand highlight components\ninvolved M00002, show corresponding compound names map,\ncan write follows using highligh_set_edges highlight_set_nodes.","code":"\nparse_kgml(\"ko01230\") |> \n  process_line() |>\n  activate(nodes) |>\n  mutate(\n    compound=convert_id(\"compound\"),\n    M00002=highlight_set_nodes(obtain_module(\"M00002\")$components)) |>\n  activate(edges) |>\n  mutate(M00002=highlight_set_edges(obtain_module(\"M00002\")$components)) |>\n  ggraph(x=x, y=y)+\n  geom_edge_link()+\n  with_outer_glow(geom_edge_link(aes(color=M00002, filter=M00002)),\n                  colour=\"pink\")+\n  geom_node_point(shape=21,aes(filter=type!=\"line\"))+\n  with_outer_glow(geom_node_point(shape=21, aes(filter=M00002, color=M00002)),\n                  colour=\"pink\")+\n  geom_node_text(aes(label=compound, filter=M00002), repel=TRUE,\n                 bg.colour=\"white\", size=2)+\n  theme_void()"},{"path":"pathway.html","id":"visualize-the-result-of-enrichkegg","chapter":"3 Pathway","heading":"3.2 Visualize the result of enrichKEGG","text":"can visualize functional enrichment analysis result using enrichKEGG clusterProfiler. enrich_attribute boolean value whether investigated gene pathway .","code":"\ndata(geneList, package='DOSE')\nde <- names(geneList)[1:100]\nenrichKEGG(de, pvalueCutoff=0.01) |>\n  ggkegg(convert_org = \"hsa\",\n         pathway_number=1) +\n    geom_edge_link(\n    aes(color=subtype),\n    arrow = arrow(length = unit(1, 'mm')), \n    start_cap = square(1, 'cm'),\n    end_cap = square(1.5, 'cm')) + \n    geom_node_rect(aes(filter=.data$undefined & !.data$type==\"gene\"),\n                   fill=\"transparent\", color=\"red\")+\n    geom_node_rect(aes(filter=!.data$undefined &\n                         .data$type==\"gene\"), fill=\"white\", color=\"black\")+\n    geom_node_text(aes(label=converted_name,\n                       filter=.data$type == \"gene\"),\n                   size=2.5,\n                   color=\"black\",family=\"serif\")+\n    with_outer_glow(geom_node_text(aes(label=converted_name,\n                                       filter=.data$enrich_attribute),\n                                   size=2.5, color=\"red\"),\n                    colour=\"white\",\n                    expand=4)+\n    theme_void()"},{"path":"module.html","id":"module","chapter":"4 Module","heading":"4 Module","text":"Module information can obtained parsed. Parsing DEFINITION REACTION supported. definition, first function breaks definition steps, make graphical representation using ggraph text .Visualizing reactions module. Please report reaction properly parsed way.","code":"\nlibrary(ggkegg)\nlibrary(tidygraph)\nlibrary(dplyr)\nmod <- obtain_module(\"M00004\")\nmod\n#> $name\n#> [1] \"Pentose phosphate pathway (Pentose phosphate cycle)\"\n#> \n#> $definition\n#> [1] \"(K13937,((K00036,K19243) (K01057,K07404))) K00033 K01783 (K01807,K01808) K00615 ((K00616 (K01810,K06859,K15916)),K13810)\"\n#> \n#> $reaction\n#>  [1] \"R02736,R10907  C01172 -> C01236\"           \n#>  [2] \"R02035  C01236 -> C00345\"                  \n#>  [3] \"R01528,R10221  C00345 -> C00199\"           \n#>  [4] \"R01529  C00199 -> C00231\"                  \n#>  [5] \"R01056  C00199 -> C00117\"                  \n#>  [6] \"R01641  C00117 + C00231 -> C05382 + C00118\"\n#>  [7] \"R01827  C05382 + C00118 -> C00279 + C05345\"\n#>  [8] \"R01830  C00279 + C00231 -> C05345 + C00118\"\n#>  [9] \"R02740  C05345 -> C00668\"                  \n#> [10] \"R02739  C00668 -> C01172\"                  \n#> \n#> $components\n#>  [1] \"ko:K13937\"  \"ko:K00036\"  \"ko:K19243\"  \"ko:K01057\" \n#>  [5] \"ko:K07404\"  \"ko:K00033\"  \"ko:K01783\"  \"ko:K01807\" \n#>  [9] \"ko:K01808\"  \"ko:K00615\"  \"ko:K00616\"  \"ko:K01810\" \n#> [13] \"ko:K06859\"  \"ko:K15916\"  \"ko:K13810\"  \"cpd:C01172\"\n#> [17] \"cpd:C01236\" \"cpd:C01236\" \"cpd:C00345\" \"cpd:C00345\"\n#> [21] \"cpd:C00199\" \"cpd:C00199\" \"cpd:C00231\" \"cpd:C00199\"\n#> [25] \"cpd:C00117\" \"cpd:C00117\" \"cpd:C00231\" \"cpd:C05382\"\n#> [29] \"cpd:C00118\" \"cpd:C05382\" \"cpd:C00118\" \"cpd:C00279\"\n#> [33] \"cpd:C05345\" \"cpd:C00279\" \"cpd:C00231\" \"cpd:C05345\"\n#> [37] \"cpd:C00118\" \"cpd:C05345\" \"cpd:C00668\" \"cpd:C00668\"\n#> [41] \"cpd:C01172\" \"rn:R02736\"  \"rn:R10907\"  \"rn:R02035\" \n#> [45] \"rn:R01528\"  \"rn:R10221\"  \"rn:R01529\"  \"rn:R01056\" \n#> [49] \"rn:R01641\"  \"rn:R01827\"  \"rn:R01830\"  \"rn:R02740\" \n#> [53] \"rn:R02739\"\nlibrary(igraph)\nmod <- obtain_module(\"M00004\")\n\n## return the tbl_graph\nreac <- parse_module(mod, \"reaction\")\n\n## Some edges are duplicate and have different reactions,\n## so simplify\nreac |> \n  convert(to_simple) |>\n  activate(edges) |> \n  mutate(reaction=lapply(.orig_data,\n                         function(x) \n                           paste0(unique(x[[\"reaction\"]]),\n                                  collapse=\",\"))) |>\n  ggraph()+\n    geom_node_point()+\n    geom_edge_parallel(\n      aes(label=reaction), angle_calc = \"along\",\n      label_dodge = unit(5,\"mm\"),\n      label_colour = \"tomato\",\n      arrow = arrow(length = unit(1, 'mm')),\n      end_cap = circle(5, 'mm'),\n      start_cap = circle(5, \"mm\"))+\n    geom_node_text(aes(label=name), repel=TRUE,\n                   bg.colour=\"white\", size=4)+\n    theme_void()"},{"path":"module.html","id":"visualize-the-result-of-enricher","chapter":"4 Module","heading":"4.1 Visualize the result of enricher","text":"performed experiments involving KEGG Orthology, performed enrichment analysis KO module relationship.","code":"\nlibrary(BiocFileCache)\n#> Warning: package 'BiocFileCache' was built under R version\n#> 4.2.2\n#> Loading required package: dbplyr\n#> Warning: package 'dbplyr' was built under R version 4.2.3\n#> \n#> Attaching package: 'dbplyr'\n#> The following objects are masked from 'package:dplyr':\n#> \n#>     ident, sql\nlibrary(clusterProfiler)\n#> \n#> clusterProfiler v4.7.1.003  For help: https://yulab-smu.top/biomedical-knowledge-mining-book/\n#> \n#> If you use clusterProfiler in published research, please cite:\n#> T Wu, E Hu, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo, and G Yu. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. The Innovation. 2021, 2(3):100141\n#> \n#> Attaching package: 'clusterProfiler'\n#> The following object is masked from 'package:igraph':\n#> \n#>     simplify\n#> The following object is masked from 'package:stats':\n#> \n#>     filter\n\n## Download and cache KO to module relationship\nurl <- paste0(\"https://rest.kegg.jp/link/ko/module\")\nbfc <- BiocFileCache()\npath <- bfcrpath(bfc, url)\nmodule.bg <- apply(data.table::fread(path), 2, function(x) sapply(strsplit(x, \":\"), \"[\",2))|> data.frame()|>`colnames<-`(c(\"term\",\"gene\"))\n\n## Using the table, perform enrichment analysis.\nmod.enrich <- enricher(c(\"K00431\",\"K00832\"),TERM2GENE=module.bg)\n\n## Visualize using ggkegg\ndd <- ggkegg(mod.enrich)\ndd"},{"path":"usecases.html","id":"usecases","chapter":"5 Usecases","heading":"5 Usecases","text":"","code":""}]
