[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"ggkegg fetches information KEGG parse, analyze visualize using ggplot2 ggraph, combined packages investigating biological functions using KEGG.One main aims ggkegg tidykegg manupilating KEGG information tidy ways using tidygraph.","code":"\n# devtools::install_github(\"noriakis/ggkegg\")\nlibrary(ggkegg)\nlibrary(dplyr)\nlibrary(tidygraph)\npathway(\"hsa04110\") |> ## Obtain and parse the pathway\n  activate(nodes) |> ## node manipulation\n  mutate(convert_hsa=convert_id(\"hsa\"),\n         convert_map=convert_id(\"pathway\")) |> ## convert IDs for organism hsa and pathway\n  ggraph(x=x, y=y)+ ## ggraph plot\n  geom_node_rect(aes(filter=type==\"gene\",\n                     fill=I(bgcolor)),\n                 color=\"black\")+\n  geom_node_text(aes(label=convert_hsa),\n                 size=2, family=\"serif\")"},{"path":"pathway.html","id":"pathway","chapter":"2 Pathway","heading":"2 Pathway","text":"Providing ggkegg pathway ID, fetches information, parse make ggraph object. Inside, parse_kgml pathway function used return igraph tbl_graph object.\npathway function core function downloads parses KGML files. file already exists current working directory, downloaded . function also extracts reactions included pathway edges. nodes represented type=line, function converts nodes edges based coords. conversion carried process_line function.example first fetches eco00270 parse information, convert pathway eco identifiers, delete zero degree nodes returns igraph object.x-coordinate, y-coordinate, width, height described KGML listed x, y, width, height. Based information, xmin, xmax, ymin, ymax calculated stored node table.","code":"\nlibrary(ggkegg)\nlibrary(ggfx)\nlibrary(ggraph)\nlibrary(igraph)\nlibrary(clusterProfiler)\nlibrary(dplyr)\nlibrary(tidygraph)\ng <- ggkegg(pid=\"eco00270\",\n            convert_org = c(\"pathway\",\"eco\"),\n            delete_zero_degree = TRUE,\n            return_igraph = TRUE)\ngg <- ggraph(g, layout=\"stress\") \ngg$data$type |> unique()\n#> [1] \"map\"      \"compound\" \"gene\"\ngg + geom_edge_diagonal(\n  aes(color=subtype,\n      filter=type!=\"maplink\"))+\n  geom_node_point(\n  aes(filter= !type%in%c(\"map\",\"compound\")),\n    fill=gg$data[!gg$data$type%in%c(\"map\",\"compound\"),]$bgcolor,\n    color=\"black\",\n    shape=21, size=4\n  )+\n  geom_node_point(\n    aes(filter= !type%in%c(\"map\",\"gene\")),\n    fill=gg$data[!gg$data$type%in%c(\"map\",\"gene\"),]$bgcolor,\n    color=\"black\",\n    shape=21, size=6\n  )+\n  geom_node_text(\n    aes(label=converted_name,\n        filter=type==\"gene\"),\n    repel=TRUE,\n    bg.colour=\"white\")+\n  theme_void()"},{"path":"pathway.html","id":"geom_node_rect","chapter":"2 Pathway","heading":"2.1 geom_node_rect","text":"package also provides geom_node_rect function, allows drawing rectangles specified locations based mappings xmin, xmax, ymin, ymax.","code":""},{"path":"pathway.html","id":"assigning-colors-to-nodes","chapter":"2 Pathway","heading":"2.1.1 Assigning colors to nodes","text":"can set diffent multiple colors nodes using geom_node_rect. application useful visualizing factors log2 fold change among multiple conditions.possible specify number groups.","code":"\ng <- pathway(\"ko00520\")\nV(g)$color_one <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Set1\"))(length(V(g)))\nV(g)$color_two <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Set2\"))(length(V(g)))\n\nggraph(g, x=x, y=y) +\n  geom_node_rect(aes(xmin=xmin, xmax=x, fill=I(color_one)), alpha=0.5)+\n  geom_node_rect(aes(xmin=x, xmax=xmax, fill=I(color_two)), alpha=0.5)+\n  ggfx::with_outer_glow(geom_node_text(aes(label=name |> \n                       strsplit(\":\") |> \n                       sapply(\"[\", 2) |>\n                       strsplit(\" \") |>\n                       sapply(\"[\", 1),\n                     filter=type==\"ortholog\"),\n                     size=2), colour=\"white\", expand=1)\nV(g)$color_one <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Set1\"))(length(V(g)))\nV(g)$color_two <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Set2\"))(length(V(g)))\nV(g)$color_three <- colorRampPalette(RColorBrewer::brewer.pal(5,\"PuOr\"))(length(V(g)))\nV(g)$color_four <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Paired\"))(length(V(g)))\n\nV(g)$space <- V(g)$width/4\n\nggraph(g, x=x, y=y) +\n  geom_node_rect(aes(xmin=xmin, xmax=xmin+space, fill=I(color_one), filter=type==\"ortholog\"))+\n  geom_node_rect(aes(xmin=xmin+space, xmax=xmin+2*space, fill=I(color_two), filter=type==\"ortholog\"))+\n  geom_node_rect(aes(xmin=xmin+2*space, xmax=xmin+3*space, fill=I(color_three), filter=type==\"ortholog\"))+\n  geom_node_rect(aes(xmin=xmin+3*space, xmax=xmin+4*space, fill=I(color_four), filter=type==\"ortholog\"))+\n  ggfx::with_outer_glow(geom_node_text(aes(label=name |> \n                                             strsplit(\":\") |> \n                                             sapply(\"[\", 2) |>\n                                             strsplit(\" \") |>\n                                             sapply(\"[\", 1),\n                                           filter=type==\"ortholog\"),\n                                       size=2), colour=\"white\", expand=1)+\n  theme_void()"},{"path":"pathway.html","id":"highlighting-set-of-nodes-and-edges","chapter":"2 Pathway","heading":"2.2 Highlighting set of nodes and edges","text":"want obtain ko01230, highlight components\ninvolved M00002, show corresponding compound names map,\ncan write follows using highligh_set_edges highlight_set_nodes.Also example highlighting Metabolic pathways (ko01100), using M00021 definition. highlight_module function accepts kegg_module class object return boolean edges involved reaction inside module nodes compounds involved reaction. Please note produce exactly output KEGG mapper. Internally, higlight_module_compound highlight_module_reaction utilized, add new columns tbl_graph TRUE nodes edges meet respective conditions.visualizing information compounds, recommended use geom_node_text, ggrepel, shadowtext.necessary, possible visualize information included highlighted pathway place original map using annotation_custom function. example, annotation ggplot first created converted grob using ggplotify. grob drawn desired position.course, also possible highlight desired edges nodes. case, highlight_set_edges highlight_set_nodes functions used within mutate generate new column containing boolean indicating whether specified IDs included . , possible highlight nodes edges. set , TRUE returned IDs included query included node. set , TRUE returned IDs included query included node.highlight combined graphhighlight:","code":"\npathway(\"ko01230\") |> \n  process_line() |>\n  activate(nodes) |>\n  mutate(\n    compound=convert_id(\"compound\"),\n    M00002=highlight_set_nodes(module(\"M00002\")@reaction_components)) |>\n  activate(edges) |>\n  mutate(M00002=highlight_set_edges(module(\"M00002\")@definition_components)) |>\n  ggraph(x=x, y=y)+\n  geom_edge_link()+\n  with_outer_glow(geom_edge_link(aes(color=M00002, filter=M00002)),\n                  colour=\"pink\")+\n  geom_node_point(shape=21,aes(filter=type!=\"line\"))+\n  with_outer_glow(geom_node_point(shape=21, aes(filter=M00002, color=M00002)),\n                  colour=\"pink\")+\n  geom_node_text(aes(label=compound, filter=M00002), repel=TRUE,\n                 bg.colour=\"white\", size=2)+\n  theme_void()\ng <- pathway(\"ko01100\") |> \n  process_line() |>\n  highlight_module(module(\"M00021\")) |>\n  mutate(compound=convert_id(\"compound\"))\n\ng |> ggraph(x=x, y=y) +\n  geom_node_point(size=1, aes(color=I(fgcolor),\n    filter=fgcolor!=\"none\" & type!=\"line\"))+\n  geom_edge_link(width=0.1, aes(color=I(fgcolor),\n                                filter=type==\"line\"& fgcolor!=\"none\"))+\n  with_outer_glow(\n    geom_edge_link(width=1,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  with_outer_glow(\n    geom_node_point(size=2,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  theme_void()\ng |> ggraph(x=x, y=y) +\n  geom_node_point(size=1, aes(color=I(fgcolor),\n    filter=fgcolor!=\"none\" & type!=\"line\"))+\n  geom_edge_link(width=0.1, aes(color=I(fgcolor),\n                                filter=type==\"line\"& fgcolor!=\"none\"))+\n  with_outer_glow(\n    geom_edge_link(width=1,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  with_outer_glow(\n    geom_node_point(size=2,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n    geom_node_text(aes(label=compound, filter=M00021),\n                   repel=TRUE, bg.colour=\"white\", size=5)+\n  theme_void()\n\nannot <- g |>  ggraph(x=x, y=y)+\n  with_outer_glow(\n    geom_edge_link(width=1,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  with_outer_glow(\n    geom_node_point(size=2,\n                    aes(color=I(fgcolor),\n                        filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n    geom_node_text(aes(label=compound, filter=M00021),\n                   repel=TRUE, bg.colour=\"white\", size=5)\ng |>\n  ggraph(x=x, y=y) +\n  geom_node_point(size=1, aes(color=I(fgcolor),\n                              filter=fgcolor!=\"none\" & type!=\"line\"))+\n  geom_edge_link(width=0.1, aes(color=I(fgcolor),\n                                filter=type==\"line\"& fgcolor!=\"none\"))+\n  with_outer_glow(\n    geom_edge_link(width=1,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  with_outer_glow(\n    geom_node_point(size=2,\n                    aes(color=I(fgcolor),\n                        filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  annotation_custom(ggplotify::as.grob(annot),\n    ymin=-1500, ymax=0, xmin=0, xmax=1500)+ ## your desired position\n  theme_void()\n\ngg <- g |> activate(edges) |> \n  mutate(highlight=highlight_set_edges(c(\"ko:K00790\",\"ko:K00789\")))\ngg |>\n  ggraph(x=x, y=y) + geom_edge_link(width=0.1, aes(filter=fgcolor!=\"none\",\n                                                   color=I(fgcolor))) + \n  with_outer_glow(geom_edge_link(width=1, aes(filter=highlight,\n   color=I(fgcolor))), colour=\"red\", expand=3) + theme_graph()\nlibrary(graphhighlight)\ng |> ggraph(x=x, y=y) +\n  geom_edge_link(width=0.5, aes(color=I(fgcolor), filter=fgcolor!=\"none\")) +\n  geom_node_point(size=1, aes(color=I(fgcolor), filter=fgcolor!=\"none\" & type!=\"line\"))+\n  highlight_node(glow=TRUE, filter=\"fgcolor!='none' & type!='line'\",\n                 glow_base_size=TRUE,glow_size=0.5)+\n  theme_void()"},{"path":"pathway.html","id":"visualize-the-result-of-enrichkegg","chapter":"2 Pathway","heading":"2.3 Visualize the result of enrichKEGG","text":"library can directly visualize functional enrichment analysis result using enrichKEGG clusterProfiler. enrich_attribute boolean value whether investigated gene pathway . piping enrichResult class object pathway_number ggkegg, enrich_attribute included resulting graph. Highlight enrich_attribute resulting graph.","code":"\ndata(geneList, package='DOSE')\nde <- names(geneList)[1:100]\nenrichKEGG(de, pvalueCutoff=0.01) |>\n  ggkegg(convert_org = \"hsa\",\n         pathway_number=1) +\n    geom_edge_link(\n    aes(color=subtype),\n    arrow = arrow(length = unit(1, 'mm')), \n    start_cap = square(1, 'cm'),\n    end_cap = square(1.5, 'cm')) + \n    geom_node_rect(aes(filter=.data$undefined & !.data$type==\"gene\"),\n                   fill=\"transparent\", color=\"red\")+\n    geom_node_rect(aes(filter=!.data$undefined &\n                         .data$type==\"gene\"), fill=\"white\", color=\"black\")+\n    geom_node_text(aes(label=converted_name,\n                       filter=.data$type == \"gene\"),\n                   size=2.5,\n                   color=\"black\",family=\"serif\")+\n    with_outer_glow(geom_node_text(aes(label=converted_name,\n                                       filter=.data$enrich_attribute),\n                                   size=2.5, color=\"red\"),\n                    colour=\"white\",\n                    expand=4)+\n    theme_void()"},{"path":"module.html","id":"module","chapter":"3 Module","heading":"3 Module","text":"Module information can obtained parsed. Parsing DEFINITION REACTION supported. definition, first function breaks definition blocks, make graphical representation using ggraph tbl_graph text using geom_text geom_rect. calling module function, kegg_module class object created.module function creates object kegg_module class, stores parsed information reactions definitions internal slots. providing kegg_module object various functions, possible execute various operations related module.Visualizing reactions module. Please report reaction properly parsed way.","code":"\nlibrary(ggkegg)\nlibrary(tidygraph)\nlibrary(dplyr)\nmod <- module(\"M00004\")\nmod\n#> M00004\n#> Pentose phosphate pathway (Pentose phosphate cycle)\nlibrary(igraph)\nmod <- module(\"M00004\")\n\n## Some edges are duplicate and have different reactions,\n## so simplify\nmod@reaction_graph |> \n  convert(to_simple) |>\n  activate(edges) |> \n  mutate(reaction=lapply(.orig_data,\n                         function(x) \n                           paste0(unique(x[[\"reaction\"]]),\n                                  collapse=\",\"))) |>\n  ggraph()+\n    geom_node_point()+\n    geom_edge_parallel(\n      aes(label=reaction), angle_calc = \"along\",\n      label_dodge = unit(5,\"mm\"),\n      label_colour = \"tomato\",\n      arrow = arrow(length = unit(1, 'mm')),\n      end_cap = circle(5, 'mm'),\n      start_cap = circle(5, \"mm\"))+\n    geom_node_text(aes(label=name), repel=TRUE,\n                   bg.colour=\"white\", size=4)+\n    theme_void()"},{"path":"module.html","id":"module-definition-in-graph","chapter":"3 Module","heading":"3.1 Module definition in graph","text":"can visualize module definition graph. make grouping nodes nodes leading nodes connected argument (‘+’ ’ ’), connect definition. example , wrapper function plot_module_blocks() visualizes definitions module. Red represents relationships, relationships (compound ) expressed edge labels.","code":"\nmodule(\"M00009\") |>\n  obtain_sequential_module_definition() |> ## return tbl_graph\n  plot_module_blocks() ## wrapper function"},{"path":"module.html","id":"module-completeness","chapter":"3 Module","heading":"3.2 Module completeness","text":"Given vector interesting KOs, module completeness can calculated using boolean expression.","code":"\nmod <- module(\"M00009\")\nquery <- sample(mod@definition_components,5) |>\n  strsplit(\":\") |>\n  sapply(\"[\",2)\nquery\n#> [1] \"K00236\" \"K00241\" \"K00658\" \"K00024\" \"K00176\"\nmod |>\n  module_completeness(query) |>\n  kableExtra::kable()"},{"path":"module.html","id":"visualize-the-result-of-enricher","chapter":"3 Module","heading":"3.3 Visualize the result of enricher","text":"performed experiments involving KEGG Orthology, performed enrichment analysis KO module relationship.","code":"\nlibrary(BiocFileCache)\n#> Loading required package: dbplyr\n#> Warning: package 'dbplyr' was built under R version 4.2.3\n#> \n#> Attaching package: 'dbplyr'\n#> The following objects are masked from 'package:dplyr':\n#> \n#>     ident, sql\nlibrary(clusterProfiler)\n#> \n#> clusterProfiler v4.7.1.003  For help: https://yulab-smu.top/biomedical-knowledge-mining-book/\n#> \n#> If you use clusterProfiler in published research, please cite:\n#> T Wu, E Hu, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo, and G Yu. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. The Innovation. 2021, 2(3):100141\n#> \n#> Attaching package: 'clusterProfiler'\n#> The following object is masked from 'package:igraph':\n#> \n#>     simplify\n#> The following object is masked from 'package:stats':\n#> \n#>     filter\n\n## Download and cache KO to module relationship\nurl <- paste0(\"https://rest.kegg.jp/link/ko/module\")\nbfc <- BiocFileCache()\npath <- bfcrpath(bfc, url)\nmodule.bg <- apply(data.table::fread(path), 2, function(x) sapply(strsplit(x, \":\"), \"[\",2))|> data.frame()|>`colnames<-`(c(\"term\",\"gene\"))\n\n## Using the table, perform enrichment analysis.\nmod.enrich <- enricher(c(\"K00431\",\"K00832\"),TERM2GENE=module.bg)\n\n## Visualize using ggkegg\ndd <- ggkegg(mod.enrich)\ndd"},{"path":"network.html","id":"network","chapter":"4 Network","heading":"4 Network","text":"also possible parse KEGG NETWORK plot network way. case, network function used.","code":"\nlibrary(ggkegg)\nlibrary(tidygraph)\nlibrary(dplyr)\nkne <- network(\"N00002\")\nkne\n#> N00002\n#> BCR-ABL fusion kinase to RAS-ERK signaling pathway"},{"path":"network.html","id":"combining-multiple-networks","chapter":"4 Network","heading":"4.1 Combining multiple networks","text":"example obtaining multiple networks, merging graph_join, plotting using plot_kegg_network wrapper function. network_graph function function generates graph string. possible specify definition expanded type generate graph.using ggforce, possible draw multiple graphs showing genes belong network.","code":"\nkne <- network(\"N00385\")  ## HCMV\nkne2 <- network(\"N00366\") ## HPV\none <- kne |> network_graph()\ntwo <- kne2 |> network_graph()\ntwo\n#> # A tbl_graph: 6 nodes and 5 edges\n#> #\n#> # A rooted tree\n#> #\n#> # A tibble: 6 × 3\n#>   name     network_name                          network_ID\n#>   <chr>    <chr>                                 <chr>     \n#> 1 E5       HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> 2 V-ATPase HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> 3 EGFR     HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> 4 PI3K     HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> 5 PIP3     HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> 6 AKT      HPV E5 to EGFR-PI3K signaling pathway N00366    \n#> #\n#> # A tibble: 5 × 4\n#>    from    to type  subtype  \n#>   <int> <int> <chr> <chr>    \n#> 1     1     2 -|    reference\n#> 2     2     3 -|    reference\n#> 3     3     4 ->    reference\n#> # ℹ 2 more rows\ngraph_join(one, two, by=\"name\") |> plot_kegg_network()\nkne3 <- network(\"N00485\") ## EBV\nkne4 <- network(\"N00030\") ## EGF-EGFR-RAS-PI3K\nthree <- kne3 |> network_graph()\nfour <- kne4 |> network_graph()\n\ngg <- Reduce(function(x,y) graph_join(x,y, by=\"name\"), list(one, two, three, four))\ncoln <- gg |> activate(nodes) |> data.frame() |> colnames() \nnids <- coln[grepl(\"network_ID\",coln)]\n\nnet <- plot_kegg_network(gg)\nfor (i in nids) {\n  net <- net + ggforce::geom_mark_hull(alpha=0.2, aes(group=.data[[i]],\n    fill=.data[[i]], x=x, y=y, filter=!is.na(.data[[i]])))\n}\nnet + scale_fill_manual(values=viridis::plasma(4), name=\"ID\")\n## Better to plot points and edges after the hull"},{"path":"usecases.html","id":"usecases","chapter":"5 Usecases","heading":"5 Usecases","text":"","code":""},{"path":"usecases.html","id":"projecting-the-gene-regulatory-networks-on-kegg-map","chapter":"5 Usecases","heading":"5.1 Projecting the gene regulatory networks on KEGG map","text":"package, possible project inferred networks gene regulatory networks KO networks inferred software onto KEGG maps. following example projecting subset KO networks within pathway inferred CBNplot onto reference map corresponding pathway using MicrobiomeProfiler. course, also possible project networks created using methods.Plot resulting map. example, strength estimated CBNplot first displayed colored edges, edges reference graph drawn black top .","code":"\nlibrary(dplyr)\nlibrary(igraph)\nlibrary(tidygraph)\nlibrary(CBNplot)\nlibrary(ggkegg)\nlibrary(MicrobiomeProfiler)\ndata(Rat_data)\nko.res <- enrichKO(Rat_data)\nexp.dat <- matrix(abs(rnorm(910)), 91, 10) %>% magrittr::set_rownames(value=Rat_data) %>% magrittr::set_colnames(value=paste0('S', seq_len(ncol(.))))\nreturnnet <- bngeneplot(ko.res, exp=exp.dat, pathNum=1, orgDb=NULL,returnNet = TRUE)\npg <- pathway(\"ko00650\")\njoined <- combine_with_bnlearn(pg, returnnet$str, returnnet$av)\njoined |> \n  activate(nodes) |>\n  mutate(convertKO=convert_id(\"ko\")) |>\n  activate(edges) |>\n  filter() |>\n  ggraph(x=x, y=y) +\n  geom_edge_link(width=2,aes(filter=!is.na(strength), color=strength),\n                 start_cap=circle(4,\"mm\"),\n                 end_cap=circle(4,\"mm\"))+\n  \n  geom_edge_link(\n    width=0.1, aes(filter=is.na(strength)),\n    start_cap=circle(4,\"mm\"),\n    end_cap=circle(4,\"mm\"))+\n  scale_edge_color_gradient(low=\"blue\",high=\"red\")+\n  geom_node_rect(fill=\"white\", color=\"black\")+\n  geom_node_text(aes(label=convertKO), size=2)"}]
