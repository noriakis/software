[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"ggkegg fetches information KEGG parse, analyze visualize using ggplot2 ggraph, combined packages investigating biological functions using KEGG.One main aims ggkegg tidykegg manupilating KEGG information tidy ways using tidygraph.","code":"\n# devtools::install_github(\"noriakis/ggkegg\")\nlibrary(ggkegg)\nlibrary(dplyr)\nlibrary(tidygraph)\npathway(\"hsa04110\") |> ## Obtain and parse the pathway\n  activate(nodes) |> ## node manipulation\n  mutate(convert_hsa=convert_id(\"hsa\"),\n         convert_map=convert_id(\"pathway\")) |> ## convert IDs for organism hsa and pathway\n  ggraph(x=x, y=y)+ ## ggraph plot\n  geom_node_rect(aes(filter=type==\"gene\",\n                     fill=I(bgcolor)),\n                 color=\"black\")+\n  geom_node_text(aes(label=convert_hsa),\n                 size=2, family=\"serif\")"},{"path":"pathway.html","id":"pathway","chapter":"2 Pathway","heading":"2 Pathway","text":"Providing ggkegg pathway ID, fetches information, parse make ggraph object. Inside, parse_kgml pathway function used return igraph tbl_graph object.example first fetches eco00270 parse information, convert pathway eco identifiers, delete zero degree nodes returns igraph object.","code":"\nlibrary(ggkegg)\nlibrary(ggfx)\nlibrary(ggraph)\nlibrary(igraph)\nlibrary(clusterProfiler)\nlibrary(dplyr)\nlibrary(tidygraph)\ng <- ggkegg(pid=\"eco00270\",\n            convert_org = c(\"pathway\",\"eco\"),\n            delete_zero_degree = TRUE,\n            return_igraph = TRUE)\ngg <- ggraph(g, layout=\"stress\") \ngg$data$type |> unique()\n#> [1] \"map\"      \"compound\" \"gene\"\ngg + geom_edge_diagonal(\n  aes(color=subtype,\n      filter=type!=\"maplink\"))+\n  geom_node_point(\n  aes(filter= !type%in%c(\"map\",\"compound\")),\n    fill=gg$data[!gg$data$type%in%c(\"map\",\"compound\"),]$bgcolor,\n    color=\"black\",\n    shape=21, size=4\n  )+\n  geom_node_point(\n    aes(filter= !type%in%c(\"map\",\"gene\")),\n    fill=gg$data[!gg$data$type%in%c(\"map\",\"gene\"),]$bgcolor,\n    color=\"black\",\n    shape=21, size=6\n  )+\n  geom_node_text(\n    aes(label=converted_name,\n        filter=type==\"gene\"),\n    repel=TRUE,\n    bg.colour=\"white\")+\n  theme_void()"},{"path":"pathway.html","id":"assigning-colors-to-nodes","chapter":"2 Pathway","heading":"2.1 Assigning colors to nodes","text":"can set diffent multiple colors nodes using geom_node_rect.","code":"\ng <- pathway(\"ko00520\")\nV(g)$color_one <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Set1\"))(length(V(g)))\nV(g)$color_two <- colorRampPalette(RColorBrewer::brewer.pal(5,\"Set2\"))(length(V(g)))\n\nggraph(g, x=x, y=y) +\n  geom_node_rect(aes(xmin=xmin, xmax=x, fill=I(color_one)), alpha=0.5)+\n  geom_node_rect(aes(xmin=x, xmax=xmax, fill=I(color_two)), alpha=0.5)+\n  ggfx::with_outer_glow(geom_node_text(aes(label=name |> \n                       strsplit(\":\") |> \n                       sapply(\"[\", 2) |>\n                       strsplit(\" \") |>\n                       sapply(\"[\", 1),\n                     filter=type==\"ortholog\"),\n                     size=2), colour=\"white\", expand=1)"},{"path":"pathway.html","id":"highlighting-set-of-nodes-and-edges","chapter":"2 Pathway","heading":"2.2 Highlighting set of nodes and edges","text":"want obtain ko01230, highlight components\ninvolved M00002, show corresponding compound names map,\ncan write follows using highligh_set_edges highlight_set_nodes.Also example highlighting Metabolic pathways (ko01100), using M00021 definition. highlight_module function accepts kegg_module class object return boolean edges involved reaction inside module nodes compounds involved reaction. Please note produce exactly output KEGG mapper.","code":"\npathway(\"ko01230\") |> \n  process_line() |>\n  activate(nodes) |>\n  mutate(\n    compound=convert_id(\"compound\"),\n    M00002=highlight_set_nodes(module(\"M00002\")@reaction_components)) |>\n  activate(edges) |>\n  mutate(M00002=highlight_set_edges(module(\"M00002\")@definition_components)) |>\n  ggraph(x=x, y=y)+\n  geom_edge_link()+\n  with_outer_glow(geom_edge_link(aes(color=M00002, filter=M00002)),\n                  colour=\"pink\")+\n  geom_node_point(shape=21,aes(filter=type!=\"line\"))+\n  with_outer_glow(geom_node_point(shape=21, aes(filter=M00002, color=M00002)),\n                  colour=\"pink\")+\n  geom_node_text(aes(label=compound, filter=M00002), repel=TRUE,\n                 bg.colour=\"white\", size=2)+\n  theme_void()\npathway(\"ko01100\") |> \n  process_line() |>\n  highlight_module(module(\"M00021\")) |>\n  ggraph(x=x, y=y) +\n  geom_node_point(size=1, aes(color=I(fgcolor),\n    filter=fgcolor!=\"none\" & type!=\"line\"))+\n  geom_edge_link(width=0.1, aes(color=I(fgcolor),\n                                filter=type==\"line\"& fgcolor!=\"none\"))+\n  with_outer_glow(\n    geom_edge_link(width=1,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  with_outer_glow(\n    geom_node_point(size=2,\n                   aes(color=I(fgcolor),\n                       filter=fgcolor!=\"none\" & M00021)),\n    colour=\"red\", expand=3\n  )+\n  theme_void()"},{"path":"pathway.html","id":"visualize-the-result-of-enrichkegg","chapter":"2 Pathway","heading":"2.3 Visualize the result of enrichKEGG","text":"can visualize functional enrichment analysis result using enrichKEGG clusterProfiler. enrich_attribute boolean value whether investigated gene pathway . piping enrichResult class object pathway_number ggkegg, enrich_attribute included resulting graph. Highlight enrich_attribute resulting graph.","code":"\ndata(geneList, package='DOSE')\nde <- names(geneList)[1:100]\nenrichKEGG(de, pvalueCutoff=0.01) |>\n  ggkegg(convert_org = \"hsa\",\n         pathway_number=1) +\n    geom_edge_link(\n    aes(color=subtype),\n    arrow = arrow(length = unit(1, 'mm')), \n    start_cap = square(1, 'cm'),\n    end_cap = square(1.5, 'cm')) + \n    geom_node_rect(aes(filter=.data$undefined & !.data$type==\"gene\"),\n                   fill=\"transparent\", color=\"red\")+\n    geom_node_rect(aes(filter=!.data$undefined &\n                         .data$type==\"gene\"), fill=\"white\", color=\"black\")+\n    geom_node_text(aes(label=converted_name,\n                       filter=.data$type == \"gene\"),\n                   size=2.5,\n                   color=\"black\",family=\"serif\")+\n    with_outer_glow(geom_node_text(aes(label=converted_name,\n                                       filter=.data$enrich_attribute),\n                                   size=2.5, color=\"red\"),\n                    colour=\"white\",\n                    expand=4)+\n    theme_void()"},{"path":"module.html","id":"module","chapter":"3 Module","heading":"3 Module","text":"Module information can obtained parsed. Parsing DEFINITION REACTION supported. definition, first function breaks definition steps, make graphical representation using ggraph tbl_graph text using geom_text geom_rect. calling module function, kegg_module class object created.Visualizing reactions module. Please report reaction properly parsed way.","code":"\nlibrary(ggkegg)\nlibrary(tidygraph)\nlibrary(dplyr)\nmod <- module(\"M00004\")\nmod\n#> M00004\n#> Pentose phosphate pathway (Pentose phosphate cycle)\nlibrary(igraph)\nmod <- module(\"M00004\")\n\n## Some edges are duplicate and have different reactions,\n## so simplify\nmod@reaction_graph |> \n  convert(to_simple) |>\n  activate(edges) |> \n  mutate(reaction=lapply(.orig_data,\n                         function(x) \n                           paste0(unique(x[[\"reaction\"]]),\n                                  collapse=\",\"))) |>\n  ggraph()+\n    geom_node_point()+\n    geom_edge_parallel(\n      aes(label=reaction), angle_calc = \"along\",\n      label_dodge = unit(5,\"mm\"),\n      label_colour = \"tomato\",\n      arrow = arrow(length = unit(1, 'mm')),\n      end_cap = circle(5, 'mm'),\n      start_cap = circle(5, \"mm\"))+\n    geom_node_text(aes(label=name), repel=TRUE,\n                   bg.colour=\"white\", size=4)+\n    theme_void()"},{"path":"module.html","id":"module-definition-in-graph","chapter":"3 Module","heading":"3.1 Module definition in graph","text":"can visualize module definition graph. make grouping nodes nodes leading nodes connected argument (‘+’ ’ ’), connect definition.","code":"\nmodule(\"M00009\") |>\n  obtain_sequential_module_definition() |> ## return tbl_graph\n  plot_module_steps() ## wrapper function"},{"path":"module.html","id":"module-completeness","chapter":"3 Module","heading":"3.2 Module completeness","text":"Given vector interesting KOs, module completeness can calculated using boolean expression.","code":"\nmod <- module(\"M00009\")\nquery <- sample(mod@definition_components,5) |>\n  strsplit(\":\") |>\n  sapply(\"[\",2)\nmod |>\n  module_completeness(query) |>\n  kableExtra::kable()"},{"path":"module.html","id":"visualize-the-result-of-enricher","chapter":"3 Module","heading":"3.3 Visualize the result of enricher","text":"performed experiments involving KEGG Orthology, performed enrichment analysis KO module relationship.","code":"\nlibrary(BiocFileCache)\n#> Loading required package: dbplyr\n#> \n#> Attaching package: 'dbplyr'\n#> The following objects are masked from 'package:dplyr':\n#> \n#>     ident, sql\nlibrary(clusterProfiler)\n#> \n#> clusterProfiler v4.6.2  For help: https://yulab-smu.top/biomedical-knowledge-mining-book/\n#> \n#> If you use clusterProfiler in published research, please cite:\n#> T Wu, E Hu, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo, and G Yu. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. The Innovation. 2021, 2(3):100141\n#> \n#> Attaching package: 'clusterProfiler'\n#> The following object is masked from 'package:igraph':\n#> \n#>     simplify\n#> The following object is masked from 'package:stats':\n#> \n#>     filter\n\n## Download and cache KO to module relationship\nurl <- paste0(\"https://rest.kegg.jp/link/ko/module\")\nbfc <- BiocFileCache()\npath <- bfcrpath(bfc, url)\nmodule.bg <- apply(data.table::fread(path), 2, function(x) sapply(strsplit(x, \":\"), \"[\",2))|> data.frame()|>`colnames<-`(c(\"term\",\"gene\"))\n\n## Using the table, perform enrichment analysis.\nmod.enrich <- enricher(c(\"K00431\",\"K00832\"),TERM2GENE=module.bg)\n\n## Visualize using ggkegg\ndd <- ggkegg(mod.enrich)\ndd"},{"path":"usecases.html","id":"usecases","chapter":"4 Usecases","heading":"4 Usecases","text":"","code":""}]
