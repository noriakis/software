[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"documentation R package stana. stana developed analysis intra-species diversity R environment.","code":""},{"path":"index.html","id":"motivation","chapter":"1 About","heading":"1.1 Motivation","text":"Computational pipelines developed illuminate intra-species diversity, derived single nucleotide variants (SNVs) gene contents species. However, limited software performing integrated analyses, resulting unprepared environment. developed R package named stana, integrate analyse data generated metagenomic sequences. package allows necessary preprocessing, functional analysis, statistical analysis, visualization results.","code":""},{"path":"index.html","id":"bugs-and-errors","chapter":"1 About","heading":"1.2 Bugs and errors","text":"find bugs errors, please report Issues make pull request.\naddition, feature suggestions always welcome appreciated.","code":""},{"path":"importing.html","id":"importing","chapter":"2 Importing","heading":"2 Importing","text":"stana aimed import metagenotyping results various pipelines.\npackage designed primarily MIDAS MIDAS2, outputs \ngene copy numbers default. Note slot name snps refers just variable, reflect actual meaning.","code":"\nlibrary(stana)"},{"path":"importing.html","id":"midas","chapter":"2 Importing","heading":"2.1 MIDAS","text":"MIDAS, loadMIDAS function can used import output merge command. MIDAS MIDAS2 examples, load example dataset deposited study investigating gut microbiome hemodialysis patients (Shi et al. 2022). hd_meta includes named list grouping. First like see many samples profiled species.load interesting species.","code":"\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS(\"../merge_midas1\", cl=hd_meta, only_stat=TRUE)\nstana$snps |> head() |> DT::datatable()\nstana <- loadMIDAS(\"../merge_midas1/\", cl=hd_meta, candSp=\"Bacteroides_uniformis_57318\")\n#> Bacteroides_uniformis_57318\n#>   Snps\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in SNV\n#>   Genes\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in genes\n#> Overall, 1 species met criteria in SNPs\n#> Overall, 1 species met criteria in genes\nstana\n#> Type: MIDAS1\n#> Directory: ../merge_midas1/\n#> Species number: 1\n#> Loaded SNV table: 1\n#> Loaded gene table (copynum): 1\n#> 13.9 Mb"},{"path":"importing.html","id":"midas2","chapter":"2 Importing","heading":"2.2 MIDAS2","text":"MIDAS2, loadMIDAS2 function can used import output merge command.can check stats many samples profiled species, only_stat. returns list tibbles names snps genes.long output expected, one species loaded .data profiled UHGG. loadSummary loadInfo can specified load SNV summary SNV info per species, default TRUE.ID conversion, metadata accompanied default database can used.taxonomy table can loaded providing taxtbl argument.coverage species per sample plotted plotCoverage.","code":"\nload(\"../hd_meta.rda\")\nhd_meta\n#> $HC\n#>  [1] \"ERR9492498\" \"ERR9492502\" \"ERR9492507\" \"ERR9492508\"\n#>  [5] \"ERR9492512\" \"ERR9492497\" \"ERR9492499\" \"ERR9492501\"\n#>  [9] \"ERR9492504\" \"ERR9492505\" \"ERR9492509\" \"ERR9492511\"\n#> [13] \"ERR9492500\" \"ERR9492503\" \"ERR9492506\" \"ERR9492510\"\n#> \n#> $R\n#>  [1] \"ERR9492489\" \"ERR9492490\" \"ERR9492492\" \"ERR9492494\"\n#>  [5] \"ERR9492519\" \"ERR9492524\" \"ERR9492526\" \"ERR9492527\"\n#>  [9] \"ERR9492528\" \"ERR9492513\" \"ERR9492514\" \"ERR9492518\"\n#> [13] \"ERR9492520\" \"ERR9492522\" \"ERR9492523\" \"ERR9492525\"\n#> [17] \"ERR9492491\" \"ERR9492493\" \"ERR9492495\" \"ERR9492496\"\n#> [21] \"ERR9492515\" \"ERR9492516\" \"ERR9492517\" \"ERR9492521\"\nstana <- loadMIDAS2(\"../merge_uhgg\", only_stat=TRUE, cl=hd_meta)\nstana$snps |> dplyr::filter(group==\"HC\") |> dplyr::arrange(desc(n)) |> head()\n#> # A tibble: 6 × 3\n#> # Groups:   species_id [6]\n#>   species_id group     n\n#>   <chr>      <chr> <int>\n#> 1 101346     HC       12\n#> 2 102438     HC       10\n#> 3 101378     HC        9\n#> 4 102478     HC        9\n#> 5 102492     HC        8\n#> 6 100044     HC        7\nstana <- loadMIDAS2(\"../merge_uhgg\", candSp=\"100002\", cl=hd_meta)\n#> SNPS\n#>   100002\n#>     Number of snps: 2058\n#>     Number of samples: 5\n#>       Number of samples in HC: 1\n#>       Number of samples in R: 4\n#>       Not passed the filter\n#> Genes\n#>   100002\n#>     Number of genes: 23427\n#>     Number of samples: 7\n#>       Number of samples in HC: 1\n#>       Number of samples in R: 6\n#>       Not passed the filter\ngetSlot(stana, \"snps\")[[\"100002\"]] |> head()\n#>                                 ERR9492497 ERR9492515\n#> gnl|Prokka|UHGG000004_1|2901|A           1          1\n#> gnl|Prokka|UHGG000004_1|4071|C           1          0\n#> gnl|Prokka|UHGG000004_1|11094|T          1          0\n#> gnl|Prokka|UHGG000004_1|11148|T          1          0\n#> gnl|Prokka|UHGG000004_1|11940|G          0          0\n#> gnl|Prokka|UHGG000004_1|11970|C          0          0\n#>                                 ERR9492526 ERR9492527\n#> gnl|Prokka|UHGG000004_1|2901|A           0      0.429\n#> gnl|Prokka|UHGG000004_1|4071|C           1      0.000\n#> gnl|Prokka|UHGG000004_1|11094|T          0      0.000\n#> gnl|Prokka|UHGG000004_1|11148|T          0      0.429\n#> gnl|Prokka|UHGG000004_1|11940|G          1      0.444\n#> gnl|Prokka|UHGG000004_1|11970|C          1      0.556\n#>                                 ERR9492528\n#> gnl|Prokka|UHGG000004_1|2901|A           0\n#> gnl|Prokka|UHGG000004_1|4071|C           0\n#> gnl|Prokka|UHGG000004_1|11094|T          1\n#> gnl|Prokka|UHGG000004_1|11148|T          1\n#> gnl|Prokka|UHGG000004_1|11940|G          0\n#> gnl|Prokka|UHGG000004_1|11970|C          0\ngetSlot(stana, \"freqTableSnps\") |> head()\n#>        species HC R\n#> 100002  100002  1 4\ntaxtbl <- read.table(\"../metadata_uhgg.tsv\", sep=\"\\t\",\n                     header=1, row.names=1, check.names = FALSE)\ntaxtbl |> head()\n#>          representative MGnify_accession species_closest\n#> 100001 GUT_GENOME000001  MGYG-HGUT-00001          100049\n#> 100002 GUT_GENOME000004  MGYG-HGUT-00002          100201\n#> 100003 GUT_GENOME000008  MGYG-HGUT-00003          103279\n#> 100004 GUT_GENOME000010  MGYG-HGUT-00004          103876\n#> 100005 GUT_GENOME000017  MGYG-HGUT-00005          101623\n#> 100006 GUT_GENOME000020  MGYG-HGUT-00006          100011\n#>        ani_closest gtpro_kmer_counts phyeco_marker_counts\n#> 100001    83.35600                NA                   15\n#> 100002    84.86955             29822                   15\n#> 100003    93.41555              1115                   15\n#> 100004    78.17620                NA                   15\n#> 100005    85.84275                NA                   15\n#> 100006    93.07075                NA                   15\n#>        phyeco_pass_ratio pangene_counts genome_counts\n#> 100001                 1           4893             4\n#> 100002                 1         147601           358\n#> 100003                 1         113409          1178\n#> 100004                 1          12599            24\n#> 100005                 1           5488             2\n#> 100006                 1           2656             1\n#>        Genome_type  Length N_contigs    N50 GC_content\n#> 100001     Isolate 3219614       137  47258      28.26\n#> 100002     Isolate 4433090       100 109266      42.60\n#> 100003     Isolate 3229507        35 158570      58.52\n#> 100004     Isolate 3698872       105  90296      54.19\n#> 100005     Isolate 3930422        32 350032      28.59\n#> 100006     Isolate 2822523        36 121380      32.65\n#>        Completeness Contamination\n#> 100001        98.59          0.70\n#> 100002        99.37          0.00\n#> 100003       100.00          0.00\n#> 100004        98.66          0.22\n#> 100005        99.30          0.00\n#> 100006        99.26          1.39\n#>                                                                                                                                                Lineage\n#> 100001                                 d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Peptostreptococcales;f__Peptostreptococcaceae;g__GCA-900066495;s__\n#> 100002                            d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Lachnospirales;f__Lachnospiraceae;g__Blautia_A;s__Blautia_A sp900066165\n#> 100003                                   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Rikenellaceae;g__Alistipes;s__Alistipes shahii\n#> 100004                   d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Oscillospirales;f__Ruminococcaceae;g__Anaerotruncus;s__Anaerotruncus colihominis\n#> 100005 d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Peptostreptococcales;f__Peptostreptococcaceae;g__Terrisporobacter;s__Terrisporobacter glycolicus_A\n#> 100006                       d__Bacteria;p__Firmicutes;c__Bacilli;o__Staphylococcales;f__Staphylococcaceae;g__Staphylococcus;s__Staphylococcus xylosus\n#>        Continent\n#> 100001    Europe\n#> 100002    Europe\n#> 100003    Europe\n#> 100004    Europe\n#> 100005    Europe\n#> 100006    Europe\nloadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=\"100002\", taxtbl=taxtbl, db=\"uhgg\")\n#> SNPS\n#>   100002\n#>   d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Lachnospirales;f__Lachnospiraceae;g__Blautia_A;s__Blautia_A sp900066165\n#>     Number of snps: 2058\n#>     Number of samples: 5\n#>       Number of samples in HC: 1\n#>       Number of samples in R: 4\n#>       Not passed the filter\n#> Genes\n#>   100002\n#>   d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Lachnospirales;f__Lachnospiraceae;g__Blautia_A;s__Blautia_A sp900066165\n#>     Number of genes: 23427\n#>     Number of samples: 7\n#>       Number of samples in HC: 1\n#>       Number of samples in R: 6\n#>       Not passed the filter\n#> Type: MIDAS2\n#> Directory: ../merge_uhgg\n#> Species number: 1\n#> Filter type: group, number: 2, proportion: 0.8\n#> Loaded SNV table: 1\n#>   Species cleared SNV filter: 0\n#> Loaded gene table (copynum): 1\n#>   Species cleared gene filter: 0\n#> 4.2 Mb\nplotCoverage(stana, \"100002\", pointSize=5)"},{"path":"importing.html","id":"instrain","chapter":"2 Importing","heading":"2.3 inStrain","text":"inStrain, need compare command output, profile command. First like know species profiled. just_species option list species table. , load example dataset profiled inStrain, using default database described original tutorial. inStrain, loading SNV tables often impossible, must specify candidate_species investigation.recalculates minor allele frequency based pooled SNV information (individual SNV information), thus takes long time case number profiled positions large. can set cl argument needed.","code":"\nsp <- loadInStrain(\"../inStrain_out\", just_species=TRUE)\nsp\n#>  [1] \"GUT_GENOME000022\" \"GUT_GENOME000024\"\n#>  [3] \"GUT_GENOME000147\" \"GUT_GENOME000220\"\n#>  [5] \"GUT_GENOME000221\" \"GUT_GENOME000224\"\n#>  [7] \"GUT_GENOME000225\" \"GUT_GENOME000231\"\n#>  [9] \"GUT_GENOME000509\" \"GUT_GENOME007566\"\n#> [11] \"GUT_GENOME009103\" \"GUT_GENOME031782\"\n#> [13] \"GUT_GENOME034989\" \"GUT_GENOME044231\"\n#> [15] \"GUT_GENOME067546\" \"GUT_GENOME068725\"\n#> [17] \"GUT_GENOME080972\" \"GUT_GENOME090701\"\n#> [19] \"GUT_GENOME094995\" \"GUT_GENOME096045\"\n#> [21] \"GUT_GENOME096080\" \"GUT_GENOME096083\"\n#> [23] \"GUT_GENOME096473\" \"GUT_GENOME096573\"\n#> [25] \"GUT_GENOME102034\" \"GUT_GENOME103721\"\n#> [27] \"GUT_GENOME104570\" \"GUT_GENOME109880\"\n#> [29] \"GUT_GENOME112794\" \"GUT_GENOME113322\"\n#> [31] \"GUT_GENOME114679\" \"GUT_GENOME115272\"\n#> [33] \"GUT_GENOME115357\" \"GUT_GENOME116258\"\n#> [35] \"GUT_GENOME116897\" \"GUT_GENOME117271\"\n#> [37] \"GUT_GENOME132077\" \"GUT_GENOME135463\"\n#> [39] \"GUT_GENOME140076\" \"GUT_GENOME142015\"\n#> [41] \"GUT_GENOME142390\" \"GUT_GENOME143131\"\n#> [43] \"GUT_GENOME143211\" \"GUT_GENOME143348\"\n#> [45] \"GUT_GENOME143497\" \"GUT_GENOME143505\"\n#> [47] \"GUT_GENOME149497\" \"GUT_GENOME156849\"\n#> [49] \"GUT_GENOME174809\" \"GUT_GENOME175554\"\n#> [51] \"GUT_GENOME189814\" \"GUT_GENOME195293\"\n#> [53] \"GUT_GENOME208589\" \"GUT_GENOME210309\"\n#> [55] \"GUT_GENOME210710\" \"GUT_GENOME217823\"\n#> [57] \"GUT_GENOME217842\" \"GUT_GENOME217850\"\n#> [59] \"GUT_GENOME234840\" \"GUT_GENOME252930\"\n#> [61] \"GUT_GENOME258721\" \"GUT_GENOME261411\"\n#> [63] \"GUT_GENOME272874\" \"GUT_GENOME274362\"\n#> [65] \"GUT_GENOME275708\" \"GUT_GENOME277090\"\n#> [67] \"GUT_GENOME284693\" \"GUT_GENOME286118\"\ninstr_chk <- \"GUT_GENOME142015\"\ninstr <- loadInStrain(\"../inStrain_out\", instr_chk, skip_pool=FALSE) ## Load MAF table\n#> Loading allele count table\n#> Loading the large table...\n#> Loading key table\n#> Loading info table\n#> Candidate species: GUT_GENOME142015\n#>   Candidate key numbers: 1\n#>   Dimension of pooled SNV table for species: 2359827\n#> Calculating MAF\ninstr\n#> Type: InStrain\n#> Directory: ../inStrain_out\n#> Species number: 1\n#> Loaded SNV table: 1\n#> 77.7 Mb"},{"path":"importing.html","id":"metasnv","chapter":"2 Importing","heading":"2.4 metaSNV","text":"loading output metaSNV, metaSNV.py metaSNV_Filtering.py typically performed beforehand. can use just_species return species ID. Note loadmetaSNV currently supported load SNV profiles.","code":"\nmeta <- loadmetaSNV(\"../metasnv_sample_out\")\n#>   Loading refGenome1clus\n#>   Loading refGenome2clus\n#>   Loading refGenome3clus"},{"path":"statistial-analysis.html","id":"statistial-analysis","chapter":"3 Statistial analysis","heading":"3 Statistial analysis","text":"stana provides functions perform statistical analysis based loaded data.","code":"\nlibrary(stana)\nlibrary(phangorn)\nlibrary(ggtree)\n## Examine sample object\nload(system.file(\"extdata\", \"sysdata.rda\", package = \"stana\"))"},{"path":"statistial-analysis.html","id":"consensus-sequence-calling","chapter":"3 Statistial analysis","heading":"3.1 Consensus sequence calling","text":"consensus sequence calling can performed MIDAS MIDAS2 output, provides statistics SNVs. implementation based call_consensus.py script available MIDAS. use pair-wise distances sequences calculated dist.ml default amino acid model (JC69), performs neighbor-joining tree estimation NJ.sequences stored phyDat class object fastaList slot, list species ID name.Matrix characters can returned return_mat=TRUE. return stana object.can use MSA stored fastaList slot infer phylogenetic tree choices.\nplotTree function can used internally infer plot tree based grouping.\ndist_method set dist.ml default, can pass arguments function tree_args.","code":"\nstana <- consensusSeqMIDAS2(stana, species=\"100003\", verbose=FALSE)\n#> Beginning calling for 100003\n#>   Site number: 5019\n#>   Profiled samples: 11\n#>   Included samples: 11\n\n## Tree estimation and visualization by `phangorn` and `ggtree`\ndm <- dist.ml(stana@fastaList$`100003`)\ntre <- NJ(dm)\ntre <- groupOTU(tre, stana@cl)\ntp <- ggtree(tre, aes(color=.data$group),\n             layout='circular') +\n        geom_tippoint(size=3) +\n        ggtree::scale_color_manual(values=stana@colors)\ntp\nstana <- stana |>\n    consensusSeq(argList=list(site_prev=0.8))\n#> Beginning calling for 100003\n#>   Site number: 5019\n#>   Profiled samples: 11\n#>   Included samples: 11\ngetFasta(stana)[[1]]\n#> 11 sequences with 4214 character and 2782 different site patterns.\n#> The states are a c g t\nmat <- stana |>\n    consensusSeq(argList=list(site_prev=0.8, return_mat=TRUE))\n#> Beginning calling for 100003\n#>   Site number: 5019\n#>   Profiled samples: 11\n#>   Included samples: 11\nmat |> dim()\n#> [1]   11 4214\nlibrary(phangorn)\nstana <- plotTree(stana, dist_method=\"dist.hamming\", tree_args=list(exclude=\"all\"))\ngetTree(stana)[[1]]\n#> \n#> Phylogenetic tree with 11 tips and 9 internal nodes.\n#> \n#> Tip labels:\n#>   ERR1711593, ERR1711594, ERR1711596, ERR1711598, ERR1711603, ERR1711605, ...\n#> \n#> Unrooted; includes branch lengths."},{"path":"statistial-analysis.html","id":"permanova","chapter":"3 Statistial analysis","heading":"3.2 PERMANOVA","text":"Using adonis2 function vegan, one can compare distance matrix based SNV frequency gene copy numbers, tree-based distance specified group. target=tree specified, tree shuold stana@treeList, species name key. ape::cophenetic.phylo() used calculate distance tips based branch length. Distance method can chosen dist function stats. can specify distArg pass arguments dist. Also, distance calculated directly sequences can used. case, target='fasta' chosen, function calculate distance provided AAfunc argument.","code":"\nstana <- setTree(stana, \"100003\", tre)\nstana <- doAdonis(stana, specs = \"100003\", target=\"tree\")\n#> Performing adonis in 100003\n#>   R2: 0.0740407267582885, Pr: 0.694\ngetAdonis(stana)[[\"100003\"]]\n#> Permutation test for adonis under reduced model\n#> Terms added sequentially (first to last)\n#> Permutation: free\n#> Number of permutations: 999\n#> \n#> adonis2(formula = d ~ gr)\n#>          Df SumOfSqs      R2      F Pr(>F)\n#> gr        1  0.15557 0.07404 0.7196  0.694\n#> Residual  9  1.94558 0.92596              \n#> Total    10  2.10115 1.00000"},{"path":"statistial-analysis.html","id":"comparing-gene-copy-numbers","chapter":"3 Statistial analysis","heading":"3.3 Comparing gene copy numbers","text":"MIDAS MIDAS2 output (genes slot filled stana object), gene copy numbers can compared one one using exact Wilcoxon rank-sum test using wilcox.exact exactRankTests computing exact conditional p-values. Note p-values adjusted multiple comparisons made.","code":"\nres <- compareGenes(stana, \"100003\")\n#> Testing total of 21806\nres[[\"UHGG000008_01733\"]]\n#> \n#>  Exact Wilcoxon rank sum test\n#> \n#> data:  c(1.154444, 2.404241, 0, 1.421386, 1.50773, 0) and c(0.535732, 1.709442, 1.31675, 3.44086, 2.712423, 1.923076, 1.062853, c(1.154444, 2.404241, 0, 1.421386, 1.50773, 0) and 1.21147, 0, 1.509217)\n#> W = 22, p-value = 0.4256\n#> alternative hypothesis: true mu is not equal to 0"},{"path":"statistial-analysis.html","id":"performing-boruta","chapter":"3 Statistial analysis","heading":"3.4 Performing Boruta","text":"Boruta algorithm can run matrices obtain important marker (SNV gene) distinguishing group doBoruta function. function performs Boruta algorithm specified data returns Boruta class result. default, function performs fixes tentative input. disable , specify doFix=FALSE., visualize copy numbers important genes confirmed group.","code":"\nlibrary(Boruta)\nbrres <- doBoruta(stana, \"100003\")\n#> Using grouping from the slot\n#> If needed, please provide preprocessed matrix of genes to `mat`\n#> Feature number: 21806\n#> Performing Boruta\n#> Warning in Boruta::TentativeRoughFix(rf): There are no\n#> Tentative attributes! Returning original object.\nbrres\n#> $boruta\n#> Boruta performed 97 iterations in 37.24746 secs.\n#>  8 attributes confirmed important: UHGG000008_01798,\n#> UHGG025024_01181, UHGG035311_01086, UHGG060667_01243,\n#> UHGG158704_01078 and 3 more;\n#>  21798 attributes confirmed unimportant:\n#> UHGG000008_00008, UHGG000008_00009, UHGG000008_00010,\n#> UHGG000008_00012, UHGG000008_00015 and 21793 more;\nplotGenes(stana, \"100003\",\n          brres$boruta$finalDecision[brres$boruta$finalDecision==\"Confirmed\"] |> names())+\n  ggplot2::facet_wrap(.~geneID,scales=\"free_y\")"},{"path":"statistial-analysis.html","id":"aggregating-gene-copy-numbers","chapter":"3 Statistial analysis","heading":"3.5 Aggregating gene copy numbers","text":"","code":"\n## This returns new stana object\nstanacomb <- combineGenes(list(stana, stana), species=\"100003\")\n#> Common genes: 21806\n#> Duplicate label found in group\ndim(stanacomb@genes[[\"100003\"]])\n#> [1] 21806    32"},{"path":"function.html","id":"function","chapter":"4 Functional annotation","heading":"4 Functional annotation","text":"functional profiling, several functions prepared stana. Note functions primarily designed MIDAS MIDAS2, profile gene copy numbers within species default.","code":"\nlibrary(stana)\nlibrary(ComplexHeatmap)"},{"path":"function.html","id":"parsing-patric-results","chapter":"4 Functional annotation","heading":"4.1 Parsing PATRIC results","text":"Use checkPATRIC function obtain information related PATRIC functional annotation. function accepts input named list genes, returns functional annotation results. function uses BiocFileCache() cache obtained results API.","code":"\ngenes <- list(\"test\"=read.table(\"../test_genes.txt\")$V1)\ngenes |> head()\n#> $test\n#>  [1] \"1280701.3.peg.1153\" \"1280701.3.peg.1169\"\n#>  [3] \"1280701.3.peg.1174\" \"1280701.3.peg.1179\"\n#>  [5] \"1280701.3.peg.1186\" \"1280701.3.peg.203\" \n#>  [7] \"1280701.3.peg.361\"  \"1280701.3.peg.363\" \n#>  [9] \"1280701.3.peg.368\"  \"1280701.3.peg.369\" \n#> [11] \"1280701.3.peg.570\"  \"1280701.3.peg.758\" \n#> [13] \"1280701.3.peg.762\"  \"1410605.3.peg.1201\"\n#> [15] \"1410605.3.peg.1204\" \"1410605.3.peg.1463\"\n#> [17] \"1410605.3.peg.1510\" \"1410605.3.peg.1568\"\n#> [19] \"1410605.3.peg.450\"  \"1410605.3.peg.593\" \n#> [21] \"1410605.3.peg.655\"  \"1410605.3.peg.833\" \n#> [23] \"1410605.3.peg.844\"  \"1410605.3.peg.903\" \n#> [25] \"1410605.3.peg.953\"  \"1447715.5.peg.1455\"\n#> [27] \"1447715.5.peg.1549\" \"1447715.5.peg.1582\"\n#> [29] \"1447715.5.peg.256\"  \"1447715.5.peg.33\"  \n#> [31] \"1447715.5.peg.566\"  \"1447715.5.peg.964\"\nres <- checkPATRIC(genes, \"pathway_name\")\n#> Obtaining annotations of 3 genomes\n#>   Obtaining information on 1280701.3\n#>   Obtaining information on 1410605.3\n#>   Obtaining information on 1447715.5\n#> Checking results on cluster test\n#>   total of 2 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 2 annotation obtained after removal of duplication\nDT::datatable(res$test$DF, options = list(scrollX=TRUE))"},{"path":"function.html","id":"draw-the-network","chapter":"4 Functional annotation","heading":"4.1.1 Draw the network","text":"can draw graph obtained results depicting enzyme KEGG PATHWAY relationship.","code":"\ndrawPATRIC(genes)\n#> Obtaining annotations of 3 genomes\n#>   Obtaining information on 1280701.3\n#>   Obtaining information on 1410605.3\n#>   Obtaining information on 1447715.5\n#> Checking results on cluster test\n#>   total of 2 annotation obtained\n#>   remove duplicate based on ec_description\n#>   total of 2 annotation obtained after removal of duplication\n#> Making graph on pathway_name and ec_description\n#>   subsetting to 5 label on each category\n#> $test\n#> $test$DF\n#>                  patric_id ec_number\n#> 254  fig|1280701.3.peg.570  4.2.1.51\n#> 608 fig|1280701.3.peg.1186  2.1.1.37\n#>                          ec_description pathway_id\n#> 254              Prephenate dehydratase        400\n#> 608 DNA (cytosine-5-)-methyltransferase        270\n#>                                            pathway_name\n#> 254 Phenylalanine, tyrosine and tryptophan biosynthesis\n#> 608                  Cysteine and methionine metabolism\n#> \n#> $test$REMOVEDUP\n#>                  patric_id ec_number\n#> 254  fig|1280701.3.peg.570  4.2.1.51\n#> 608 fig|1280701.3.peg.1186  2.1.1.37\n#>                          ec_description pathway_id\n#> 254              Prephenate dehydratase        400\n#> 608 DNA (cytosine-5-)-methyltransferase        270\n#>                                            pathway_name\n#> 254 Phenylalanine, tyrosine and tryptophan biosynthesis\n#> 608                  Cysteine and methionine metabolism\n#> \n#> $test$SORTED\n#> \n#> DNA (cytosine-5-)-methyltransferase \n#>                                   1 \n#>              Prephenate dehydratase \n#>                                   1 \n#> \n#> $test$GRAPH\n#> IGRAPH 5d71bb4 UN-- 4 2 -- \n#> + attr: name (v/c)\n#> + edges from 5d71bb4 (vertex names):\n#> [1] Prephenate dehydratase             --Phenylalanine, tyrosine and tryptophan biosynthesis\n#> [2] DNA (cytosine-5-)-methyltransferase--Cysteine and methionine metabolism                 \n#> \n#> $test$PLOT"},{"path":"function.html","id":"parsing-eggnog-mapper-v2-results","chapter":"4 Functional annotation","heading":"4.2 Parsing eggNOG-mapper v2 results","text":"Use checkEGGNOG function read output eggNOG-mapper v2.\nperform annotation genes using server software.\nSpecify IDs want obtain ret, “KEGG_ko” “KEGG_Pathway”.\nannotation can used functions.","code":"\ntib <- checkEGGNOG(\"../annotations_gtdb/100224_eggnog_out.emapper.annotations\",\n    ret=\"KEGG_ko\")\ntib |> head() |> DT::datatable()"},{"path":"function.html","id":"draw-the-network-1","chapter":"4 Functional annotation","heading":"4.2.1 Draw the network","text":"can draw relationships IDs drawEGGNOG.","code":"\ndrawEGGNOG(\"../annotations_gtdb/100224_eggnog_out.emapper.annotations\",\n            candPlot = c(\"KEGG_ko\",\"KEGG_Pathway\"),\n            geneIDs = tib$ID |> head(100))\n#> # A tibble: 4,287 × 3\n#>    ID                    name          value                \n#>    <chr>                 <chr>         <chr>                \n#>  1 GCF_002846775.1_00408 seed_ortholog 1690.BPSG_1412       \n#>  2 GCF_002846775.1_00408 eggNOG_OGs    COG0304@1|root       \n#>  3 GCF_002846775.1_00408 eggNOG_OGs    COG0331@1|root       \n#>  4 GCF_002846775.1_00408 eggNOG_OGs    COG2030@1|root       \n#>  5 GCF_002846775.1_00408 eggNOG_OGs    COG4981@1|root       \n#>  6 GCF_002846775.1_00408 eggNOG_OGs    COG0304@2|Bacteria   \n#>  7 GCF_002846775.1_00408 eggNOG_OGs    COG0331@2|Bacteria   \n#>  8 GCF_002846775.1_00408 eggNOG_OGs    COG2030@2|Bacteria   \n#>  9 GCF_002846775.1_00408 eggNOG_OGs    COG4981@2|Bacteria   \n#> 10 GCF_002846775.1_00408 eggNOG_OGs    2GIY4@201174|Actinob…\n#> # ℹ 4,277 more rows\n#> $graph\n#> IGRAPH 5e723c6 UN-- 21 922 -- \n#> + attr: name (v/c), category (v/c), size (v/n)\n#> + edges from 5e723c6 (vertex names):\n#>  [1] ko:K11533--ko00061 ko:K11533--ko01100\n#>  [3] ko:K11533--ko01212 ko:K11533--ko04931\n#>  [5] ko:K11533--ko00061 ko:K11533--ko01100\n#>  [7] ko:K11533--ko01212 ko:K11533--ko04931\n#>  [9] ko:K11533--ko00061 ko:K11533--ko01100\n#> [11] ko:K11533--ko01212 ko:K11533--ko04931\n#> [13] ko:K11533--ko00061 ko:K11533--ko01100\n#> [15] ko:K11533--ko01212 ko:K11533--ko04931\n#> + ... omitted several edges\n#> \n#> $plot"},{"path":"function.html","id":"heatmap-of-the-gene-copy-numbers-with-functional-annotations","chapter":"4 Functional annotation","heading":"4.3 Heatmap of the gene copy numbers with functional annotations","text":"can inspect overview functional differences using gene copy numbers along simplifyEnrichment. plotHeatmap function can used stana object preprocessed gene copy number matrix input. function, anno_PATRIC_keywords anno_eggNOG_keywords used plot word clouds alongside Heatmap ComplexHeatmap. easy MIDAS, function obtains functional annotation PATRIC API server annotation step needed.","code":""},{"path":"function.html","id":"midas-1","chapter":"4 Functional annotation","heading":"4.3.1 MIDAS","text":"MIDAS, function automatically query API PATRIC server using gene names. gene number large typically, one can filter genes options filter_zero_frac, filter_max_frac filter_max_value. However, one perform filtering beforehand provide matrix mat. mat specified, filtering options ignored.","code":"\nlibrary(ComplexHeatmap)\nlibrary(simplifyEnrichment)\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS(\"../merge_midas1/\", cl=hd_meta, candSp=\"Bacteroides_uniformis_57318\")\n#> Bacteroides_uniformis_57318\n#>   Snps\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in SNV\n#>   Genes\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in genes\n#> Overall, 1 species met criteria in SNPs\n#> Overall, 1 species met criteria in genes\nplotHeatmap(stana, \"Bacteroides_uniformis_57318\",filter_max_value = 2,filter_max_frac = 0)\n#> In resulting matrix, max: 1.99955229433902, min: 0\n#> Dimension: 4911, 29\n#> Obtaining gene information from PATRIC server\n#> Obtaining annotations of 7 genomes\n#>   Obtaining information on 1235787.3\n#>   Obtaining information on 1339348.3\n#>   Obtaining information on 411479.10\n#>   Obtaining information on 457393.3\n#>   Obtaining information on 585543.3\n#>   Obtaining information on 997889.3\n#>   Obtaining information on 997890.3\n#> Checking results on cluster 1\n#>   total of 273 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 261 annotation obtained after removal of duplication\n#> Checking results on cluster 2\n#>   total of 334 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 329 annotation obtained after removal of duplication\n#> Checking results on cluster 3\n#>   total of 693 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 662 annotation obtained after removal of duplication\n#> Checking results on cluster 4\n#>   total of 175 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 174 annotation obtained after removal of duplication\n#> Checking results on cluster 5\n#>   total of 310 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 303 annotation obtained after removal of duplication\n#> Checking results on cluster 6\n#>   total of 898 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 868 annotation obtained after removal of duplication\n#> Checking results on cluster 7\n#>   total of 521 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 503 annotation obtained after removal of duplication\n#> Checking results on cluster 8\n#>   total of 701 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 675 annotation obtained after removal of duplication\n#> Checking results on cluster 9\n#>   total of 1140 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 1105 annotation obtained after removal of duplication\n#> Checking results on cluster 10\n#>   total of 1090 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 1053 annotation obtained after removal of duplication"},{"path":"function.html","id":"midas2-1","chapter":"4 Functional annotation","heading":"4.3.2 MIDAS2","text":"MIDAS2, users provide eggNOG annotation eggNOG slot stana object. fnc argument accepts KEGG_Pathway KEGG_Module available eggNOG annotation. function queries KEGG REST API obtain pathway module description.set eggNOG-mapper v2 annotation file eggNOG slot stana object.\ncan done setAnnotation function.can set removeAdditional argument filter words displayed.","code":"\nload(\"../hd_meta.rda\")\ntaxtbl <- read.table(\"../metadata_uhgg.tsv\", sep=\"\\t\",\n                     header=1, row.names=1, check.names = FALSE)\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=c(\"101346\"), taxtbl=taxtbl, db=\"uhgg\")\n#> SNPS\n#>   101346\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__Bacteroides;s__Bacteroides uniformis\n#>     Number of snps: 70178\n#>     Number of samples: 28\n#>       Number of samples in HC: 12\n#>       Number of samples in R: 16\n#>       Passed the filter\n#> Genes\n#>   101346\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__Bacteroides;s__Bacteroides uniformis\n#>     Number of genes: 120158\n#>     Number of samples: 31\n#>       Number of samples in HC: 13\n#>       Number of samples in R: 18\n#>       Passed the filter\n## Set the annotation file\nstana <- setAnnotation(stana, list(\"101346\"=\"../annotations_uhgg/101346_eggnog_out.emapper.annotations\"))\nlibrary(ComplexHeatmap)\nlibrary(simplifyEnrichment)\n\nplotHeatmap(stana, \"101346\",\n    fnc=\"KEGG_Module\",\n    removeAdditional=c(\"cycle\",\"pathway\"),\n    filter_zero_frac = 0.5,\n    filter_max_frac = 0,\n    filter_max_value = 5)\n#> In resulting matrix, max: 4.999739, min: 0\n#> Dimension: 3501, 31\n#> MIDAS2, looking for the annotation file by eggNOG-mapper v2\n#> Loading annotation"},{"path":"function.html","id":"kgeg-pathway-and-kegg-orthology","chapter":"4 Functional annotation","heading":"4.4 KGEG PATHWAY and KEGG ORTHOLOGY","text":"","code":""},{"path":"function.html","id":"visualization-of-kegg-pathway","chapter":"4 Functional annotation","heading":"4.4.1 Visualization of KEGG PATHWAY","text":"KEGG PATHWAY frequently used characterize metabolic function microbiome. Utilizing ggkegg, information intra-species diversity, particulary gene copy number differences, can reflected onto KEGG PATHWAY. needs genes slot filled, annotations files, typically eggNOG-mapper v2, needed.","code":""},{"path":"function.html","id":"visualizing-differences-per-species","chapter":"4 Functional annotation","heading":"4.4.1.1 Visualizing differences per species","text":"Load profile multiple species.Next, set eggNOG-mapper v2 annotation file eggNOG slot stana object.\nway, plotKEGGPathway function automatically calculates abundance user-defined method.plotKEGGPathway can run providing stana object, species (multiple species, rectangular nodes split),\npathway ID visualize. , visualize ko00620, Pyruvate metabolism example. large annotation table, calculation takes time can provide pre-calculated KO table kos slot stana object, specify only_ko = TRUE first return KO table.default, scale . install ggh4x, multiple scales can added, specifying multi_scale argument.can provide multiple pathway IDs pathway_id, returns list plot.way, differences orthologies pathway across multiple species can readily captured.","code":"\nload(\"../hd_meta.rda\")\ntaxtbl <- read.table(\"../metadata_uhgg.tsv\", sep=\"\\t\",\n                     header=1, row.names=1, check.names = FALSE)\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=c(\"101346\",\"102438\"), taxtbl=taxtbl, db=\"uhgg\")\n#> SNPS\n#>   101346\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__Bacteroides;s__Bacteroides uniformis\n#>     Number of snps: 70178\n#>     Number of samples: 28\n#>       Number of samples in HC: 12\n#>       Number of samples in R: 16\n#>       Passed the filter\n#>   102438\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Tannerellaceae;g__Parabacteroides;s__Parabacteroides distasonis\n#>     Number of snps: 18102\n#>     Number of samples: 28\n#>       Number of samples in HC: 10\n#>       Number of samples in R: 18\n#>       Passed the filter\n#> Genes\n#>   101346\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__Bacteroides;s__Bacteroides uniformis\n#>     Number of genes: 120158\n#>     Number of samples: 31\n#>       Number of samples in HC: 13\n#>       Number of samples in R: 18\n#>       Passed the filter\n#>   102438\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Tannerellaceae;g__Parabacteroides;s__Parabacteroides distasonis\n#>     Number of genes: 47046\n#>     Number of samples: 29\n#>       Number of samples in HC: 11\n#>       Number of samples in R: 18\n#>       Passed the filter\n## Set the annotation file\nstana <- setAnnotation(stana, list(\"101346\"=\"../annotations_uhgg/101346_eggnog_out.emapper.annotations\",\n    \"102438\"=\"../annotations_uhgg/102438_eggnog_out.emapper.annotations\"))\nstana <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", only_ko=TRUE, multi_scale=FALSE)\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", multi_scale=FALSE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", multi_scale=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"),\n                      pathway_id=c(\"ko00270\",\"ko00620\"),\n                      multi_scale=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg2 <- patchwork::wrap_plots(gg)\ngg2"},{"path":"function.html","id":"visualizing-calculated-values-across-species","chapter":"4 Functional annotation","heading":"4.4.2 Visualizing calculated values across species","text":"want see sum values across species, can set option summarize=TRUE. way, KO values across specified species summed, compared groups, plotted.","code":"\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"),\n                      pathway_id=c(\"ko00270\",\"ko00620\"),\n                      summarize=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 102438: HC / R\ngg2 <- patchwork::wrap_plots(gg)\ngg2"},{"path":"function.html","id":"show-which-species-have-the-kos","chapter":"4 Functional annotation","heading":"4.4.3 Show which species have the KOs","text":"specify point_mode=TRUE, function plot points KOs pathways\nbased whether specified species corresponding KOs annotated.","code":"\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"),\n                      pathway_id=c(\"ko00270\"),\n                      sp_colors=c(\"blue\",\"red\") |> setNames(c(\"101346\",\"102438\")),\n                      point_mode=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\n#> Point mode enabled\ngg\n#> $ko00270"},{"path":"visualization.html","id":"visualization","chapter":"5 Visualization","heading":"5 Visualization","text":"stana offers visualization functions can interpret profiled data.","code":"\nlibrary(stana)\nlibrary(ComplexHeatmap)"},{"path":"visualization.html","id":"plotpca","chapter":"5 Visualization","heading":"5.1 plotPCA","text":"can plot principal component analysis results using prcomp plotPCA function across grouping specified. group specified, No_Group label assigned samples.","code":"\nmt <- loadmetaSNV(\"../metasnv_sample_out/\",just_species = TRUE)\nmt <- loadmetaSNV(\"../metasnv_sample_out/\", candSp=mt[1])\n#>   Loading refGenome1clus\nplotPCA(mt, species=getID(mt)[1])\n#> After filtering: 1022 SNVs\n#> $refGenome1clus"},{"path":"visualization.html","id":"visualization-of-gene-copy-numbers","chapter":"5 Visualization","heading":"5.2 Visualization of gene copy numbers","text":"Default color mapping can changed changeColors.","code":"\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=\"102478\")\n#> SNPS\n#>   102478\n#>     Number of snps: 77431\n#>     Number of samples: 31\n#>       Number of samples in HC: 9\n#>       Number of samples in R: 22\n#>       Passed the filter\n#> Genes\n#>   102478\n#>     Number of genes: 150996\n#>     Number of samples: 32\n#>       Number of samples in HC: 10\n#>       Number of samples in R: 22\n#>       Passed the filter\nplotGenes(stana, \"102478\", c(\"UHGG000186_00531\",\"UHGG000186_00521\"))\nstana <- changeColors(stana, c(\"blue\",\"red\"))\nplotGenes(stana, \"102478\", c(\"UHGG000186_00531\",\"UHGG000186_00521\"))"},{"path":"visualization.html","id":"visualization-of-functional-analysis-results","chapter":"5 Visualization","heading":"5.3 Visualization of functional analysis results","text":"See 4.","code":""},{"path":"visualization.html","id":"visualization-of-instrain-results","chapter":"5 Visualization","heading":"5.4 Visualization of inStrain results","text":"imported inStrain compare profiles can visualized. loaded genome-wide comparison table strain cluster table can visualized using genomeHeatmap strainClusterHeatmap ComplexHeatmap. genomeHeatmap, typically population ANI consensus ANI plotted, columns listed genomeWide_compare.tsv can plotted. parameters passed Heatmap can specified heatmapArgs. cluster information (getCl(stana)) available cl specified, columns split present grouping. Please refer documentation inStrain popANI conANI.","code":"\ninstr_chk <- \"GUT_GENOME142015\"\ninstr <- loadInStrain(\"../inStrain_out\", instr_chk)\ngenomeHeatmap(instr, instr_chk, column = \"popANI\", heatmapArgs = list(show_column_name=FALSE))\nstrainClusterHeatmap(instr, instr_chk, heatmapArgs = list(show_column_name=FALSE))"}]
