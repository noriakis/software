[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"documentation R package stana. stana developed analysis intra-species diversity R environment.","code":""},{"path":"index.html","id":"motivation","chapter":"1 About","heading":"1.1 Motivation","text":"Computational pipelines developed illuminate intra-species diversity, derived single nucleotide variants (SNVs) gene contents species. However, limited software performing integrated analyses, resulting unprepared environment. developed R package named stana, integrate analyse data generated metagenomic sequences. package allows necessary preprocessing, functional analysis, statistical analysis, visualization results.","code":""},{"path":"index.html","id":"bugs-and-errors","chapter":"1 About","heading":"1.2 Bugs and errors","text":"find bugs errors, please report Issues make pull request.\naddition, feature suggestions always welcome appreciated.","code":""},{"path":"importing-and-filtering.html","id":"importing-and-filtering","chapter":"2 Importing and filtering","heading":"2 Importing and filtering","text":"stana aimed import metagenotyping results various pipelines.\npackage designed handle types metagenotyping software MIDAS MIDAS2, outputs \ngene copy numbers default. Note slot name snps refers just variable, reflect actual meaning. species ID stana object interpreted character.Along specifying directory load, grouping variables set stana object. default, named list groups used (categorical). cl argument functions cl slot corresponds information. Additionally, metadata ordinaly data.frame can set setMetadata. row names id column represent sample names.species IDs specified, species directory loaded, consumes many times memory sample number large.","code":"\nlibrary(stana)"},{"path":"importing-and-filtering.html","id":"midas","chapter":"2 Importing and filtering","heading":"2.1 MIDAS","text":"MIDAS, loadMIDAS function can used import output merge command. MIDAS MIDAS2 examples, load example dataset deposited study investigating gut microbiome hemodialysis patients (Shi et al. 2022). hd_meta includes named list grouping. First like see many samples profiled species.load interesting species.","code":"\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS(\"../merge_midas1\", cl=hd_meta, only_stat=TRUE)\nstana$snps |> head() |> DT::datatable()\nstana <- loadMIDAS(\"../merge_midas1/\", cl=hd_meta, candSp=\"Bacteroides_uniformis_57318\")\n#> Bacteroides_uniformis_57318\n#>   Snps\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in SNV\n#>   Genes\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in genes\n#> Overall, 1 species met criteria in SNPs\n#> Overall, 1 species met criteria in genes\nstana\n#> # A stana: MIDAS1\n#> # Loaded directory: ../merge_midas1/\n#> # Species number: 1\n#> # Group info (list): HC/R\n#> # Loaded SNV table: 1 ID: Bacteroides_uniformis_57318\n#> # Loaded gene table: 1 ID: Bacteroides_uniformis_57318\n#> # Size: 14586704 B"},{"path":"importing-and-filtering.html","id":"midas2","chapter":"2 Importing and filtering","heading":"2.2 MIDAS2","text":"MIDAS2, loadMIDAS2 function can used import output merge command.MIDAS2, function assumes default database UHGG GTDB used. custom databases, use snv gene function described documentation.MIDAS2, lz4 binary must PATH correctly load data.can check stats many samples profiled species, only_stat. returns list tibbles names snps genes.long output expected, one species loaded .data profiled UHGG. loadSummary loadInfo can specified load SNV summary SNV info per species, default TRUE.default, taxonomy ID converted using default MIDAS2 database information.coverage species per sample plotted plotCoverage.","code":"\nload(\"../hd_meta.rda\")\nhd_meta\n#> $HC\n#>  [1] \"ERR9492498\" \"ERR9492502\" \"ERR9492507\" \"ERR9492508\"\n#>  [5] \"ERR9492512\" \"ERR9492497\" \"ERR9492499\" \"ERR9492501\"\n#>  [9] \"ERR9492504\" \"ERR9492505\" \"ERR9492509\" \"ERR9492511\"\n#> [13] \"ERR9492500\" \"ERR9492503\" \"ERR9492506\" \"ERR9492510\"\n#> \n#> $R\n#>  [1] \"ERR9492489\" \"ERR9492490\" \"ERR9492492\" \"ERR9492494\"\n#>  [5] \"ERR9492519\" \"ERR9492524\" \"ERR9492526\" \"ERR9492527\"\n#>  [9] \"ERR9492528\" \"ERR9492513\" \"ERR9492514\" \"ERR9492518\"\n#> [13] \"ERR9492520\" \"ERR9492522\" \"ERR9492523\" \"ERR9492525\"\n#> [17] \"ERR9492491\" \"ERR9492493\" \"ERR9492495\" \"ERR9492496\"\n#> [21] \"ERR9492515\" \"ERR9492516\" \"ERR9492517\" \"ERR9492521\"\nstana <- loadMIDAS2(\"../merge_uhgg\", only_stat=TRUE, cl=hd_meta)\nstana$snps |> dplyr::filter(group==\"HC\") |> dplyr::arrange(desc(n)) |> head()\n#> # A tibble: 6 × 5\n#> # Groups:   species_id [6]\n#>   species_id group     n species_name    species_description\n#>   <chr>      <chr> <int> <chr>           <chr>              \n#> 1 101346     HC       12 s__KS41 sp0035… s__KS41 sp003584895\n#> 2 102438     HC       10 s__Synechococc… s__Synechococcus_C…\n#> 3 101378     HC        9 s__CAG-873 sp0… s__CAG-873 sp00249…\n#> 4 102478     HC        9 s__Clostridium… s__Clostridium_A l…\n#> 5 102492     HC        8 s__Thalassospi… s__Thalassospira l…\n#> 6 100044     HC        7 s__Helicobacte… s__Helicobacter py…\nstana <- loadMIDAS2(\"../merge_uhgg\", candSp=\"100002\", cl=hd_meta)\n#>   100002\n#>   s__Staphylococcus aureus\n#>     Number of snps: 2058\n#>     Number of samples: 5\n#>   100002\n#>   s__Staphylococcus aureus\n#>     Number of genes: 23427\n#>     Number of samples: 7\ngetSlot(stana, \"snps\")[[\"100002\"]] |> head()\n#>                                 ERR9492497 ERR9492515\n#> gnl|Prokka|UHGG000004_1|2901|A           1          1\n#> gnl|Prokka|UHGG000004_1|4071|C           1          0\n#> gnl|Prokka|UHGG000004_1|11094|T          1          0\n#> gnl|Prokka|UHGG000004_1|11148|T          1          0\n#> gnl|Prokka|UHGG000004_1|11940|G          0          0\n#> gnl|Prokka|UHGG000004_1|11970|C          0          0\n#>                                 ERR9492526 ERR9492527\n#> gnl|Prokka|UHGG000004_1|2901|A           0      0.429\n#> gnl|Prokka|UHGG000004_1|4071|C           1      0.000\n#> gnl|Prokka|UHGG000004_1|11094|T          0      0.000\n#> gnl|Prokka|UHGG000004_1|11148|T          0      0.429\n#> gnl|Prokka|UHGG000004_1|11940|G          1      0.444\n#> gnl|Prokka|UHGG000004_1|11970|C          1      0.556\n#>                                 ERR9492528\n#> gnl|Prokka|UHGG000004_1|2901|A           0\n#> gnl|Prokka|UHGG000004_1|4071|C           0\n#> gnl|Prokka|UHGG000004_1|11094|T          1\n#> gnl|Prokka|UHGG000004_1|11148|T          1\n#> gnl|Prokka|UHGG000004_1|11940|G          0\n#> gnl|Prokka|UHGG000004_1|11970|C          0\ngetSlot(stana, \"freqTableSnps\") |> head()\n#> data frame with 0 columns and 0 rows\nplotCoverage(stana, \"100002\", pointSize=5)"},{"path":"importing-and-filtering.html","id":"instrain","chapter":"2 Importing and filtering","heading":"2.3 inStrain","text":"inStrain, need compare command output, profile command. First like know species profiled. just_species option list species table. , load example dataset profiled inStrain, using default database described original tutorial. inStrain, loading SNV tables often impossible, must specify candidate_species investigation.recalculates minor allele frequency based pooled SNV information (individual SNV information), thus takes long time case number profiled positions large. can set cl argument needed.","code":"\nsp <- loadInStrain(\"../inStrain_out\", just_species=TRUE)\nsp\n#>  [1] \"GUT_GENOME000022\" \"GUT_GENOME000024\"\n#>  [3] \"GUT_GENOME000147\" \"GUT_GENOME000220\"\n#>  [5] \"GUT_GENOME000221\" \"GUT_GENOME000224\"\n#>  [7] \"GUT_GENOME000225\" \"GUT_GENOME000231\"\n#>  [9] \"GUT_GENOME000509\" \"GUT_GENOME007566\"\n#> [11] \"GUT_GENOME009103\" \"GUT_GENOME031782\"\n#> [13] \"GUT_GENOME034989\" \"GUT_GENOME044231\"\n#> [15] \"GUT_GENOME067546\" \"GUT_GENOME068725\"\n#> [17] \"GUT_GENOME080972\" \"GUT_GENOME090701\"\n#> [19] \"GUT_GENOME094995\" \"GUT_GENOME096045\"\n#> [21] \"GUT_GENOME096080\" \"GUT_GENOME096083\"\n#> [23] \"GUT_GENOME096473\" \"GUT_GENOME096573\"\n#> [25] \"GUT_GENOME102034\" \"GUT_GENOME103721\"\n#> [27] \"GUT_GENOME104570\" \"GUT_GENOME109880\"\n#> [29] \"GUT_GENOME112794\" \"GUT_GENOME113322\"\n#> [31] \"GUT_GENOME114679\" \"GUT_GENOME115272\"\n#> [33] \"GUT_GENOME115357\" \"GUT_GENOME116258\"\n#> [35] \"GUT_GENOME116897\" \"GUT_GENOME117271\"\n#> [37] \"GUT_GENOME132077\" \"GUT_GENOME135463\"\n#> [39] \"GUT_GENOME140076\" \"GUT_GENOME142015\"\n#> [41] \"GUT_GENOME142390\" \"GUT_GENOME143131\"\n#> [43] \"GUT_GENOME143211\" \"GUT_GENOME143348\"\n#> [45] \"GUT_GENOME143497\" \"GUT_GENOME143505\"\n#> [47] \"GUT_GENOME149497\" \"GUT_GENOME156849\"\n#> [49] \"GUT_GENOME174809\" \"GUT_GENOME175554\"\n#> [51] \"GUT_GENOME189814\" \"GUT_GENOME195293\"\n#> [53] \"GUT_GENOME208589\" \"GUT_GENOME210309\"\n#> [55] \"GUT_GENOME210710\" \"GUT_GENOME217823\"\n#> [57] \"GUT_GENOME217842\" \"GUT_GENOME217850\"\n#> [59] \"GUT_GENOME234840\" \"GUT_GENOME252930\"\n#> [61] \"GUT_GENOME258721\" \"GUT_GENOME261411\"\n#> [63] \"GUT_GENOME272874\" \"GUT_GENOME274362\"\n#> [65] \"GUT_GENOME275708\" \"GUT_GENOME277090\"\n#> [67] \"GUT_GENOME284693\" \"GUT_GENOME286118\"\ninstr_chk <- \"GUT_GENOME142015\"\ninstr <- loadInStrain(\"../inStrain_out\", instr_chk, skip_pool=FALSE) ## Load MAF table\n#> Loading allele count table\n#> Loading the large table...\n#> Loading key table\n#> Loading info table\n#> Candidate species: GUT_GENOME142015\n#>   Candidate key numbers: 1\n#>   Dimension of pooled SNV table for species: 2359827\n#> Calculating MAF\ninstr\n#> # A stana: InStrain\n#> # Loaded directory: ../inStrain_out\n#> # Species number: 1\n#> # Loaded SNV table: 1 ID: GUT_GENOME142015\n#> # Size: 81503384 B"},{"path":"importing-and-filtering.html","id":"metasnv","chapter":"2 Importing and filtering","heading":"2.4 metaSNV","text":"loading output metaSNV, metaSNV.py metaSNV_Filtering.py typically performed beforehand. can use just_species return species ID. Note loadmetaSNV currently supported load SNV profiles.","code":"\nmeta <- loadmetaSNV(\"../metasnv_sample_out\")\n#>   Loading refGenome1clus\n#>   Loading refGenome2clus\n#>   Loading refGenome3clus"},{"path":"importing-and-filtering.html","id":"manual","chapter":"2 Importing and filtering","heading":"2.5 Manual","text":"loading manually created data.frame possible snv gene function. metagenotyping results produced software can loaded function, although statistics inserted manually. accepts named list data.frame.","code":"\nman <- snv(list(\"manual\"=head(getSlot(meta, \"snps\")[[1]])))\nman\n#> # A stana: manual\n#> # Loaded directory: \n#> # Species number: 1\n#> # Loaded SNV table: 1 ID: manual\n#> # Size: 49912 B"},{"path":"importing-and-filtering.html","id":"conversion-to-maf-matrix","chapter":"2 Importing and filtering","heading":"2.5.1 Conversion to MAF matrix","text":"metagenotype data comes TSV number allele count long wide format.\npackage offers functions convert MAF matrix.can merged make stana object combineMaf() function.object can used subsequent downstream analysis. function can useful importing metagenotyping software GT-Pro.","code":"\ndf1 <- data.frame(rbind(\n  c(\"SPID1\",\"SP1_NZ_GG770218.1_131457\", \"G\", \"A\", \"7\", \"2\"),\n  c(\"SPID1\",\"SP1_NZ_GG770218.1_131458\", \"C\", \"T\", \"2\", \"5\"),\n  c(\"SPID2\",\"SP2_NZ.1_131459\", \"A\", \"T\", \"7\", \"13\"),\n  c(\"SPID2\",\"SP2_NZ.1_131470\", \"A\", \"T\", \"12\", \"2\")\n))\n\nhead(df1)\n#>      X1                       X2 X3 X4 X5 X6\n#> 1 SPID1 SP1_NZ_GG770218.1_131457  G  A  7  2\n#> 2 SPID1 SP1_NZ_GG770218.1_131458  C  T  2  5\n#> 3 SPID2          SP2_NZ.1_131459  A  T  7 13\n#> 4 SPID2          SP2_NZ.1_131470  A  T 12  2\n\nconvertWideToMaf(df1)[[1]]\n#> $SPID1\n#>                                maf\n#> SP1_NZ_GG770218.1_131457 0.2222222\n#> SP1_NZ_GG770218.1_131458 0.2857143\n#> \n#> $SPID2\n#>                       maf\n#> SP2_NZ.1_131459 0.3500000\n#> SP2_NZ.1_131470 0.1428571\n\n\n\ndf2 <- data.frame(rbind(\n  c(\"SPID3\",\"SP3_AZ.1_131457\", \"G\", \"A\", \"7\", \"2\"),\n  c(\"SPID3\",\"SP3_AZ.1_131458\", \"C\", \"T\", \"2\", \"5\"),\n  c(\"SPID1\",\"SP1_NZ_GG770218.1_131457\", \"A\", \"T\", \"7\", \"13\"),\n  c(\"SPID1\",\"SP1_NZ_GG770218.1_131458\", \"A\", \"T\", \"12\", \"2\")\n))\nmafs <- list(\"sample1\"=convertWideToMaf(df1), \"sample2\"=convertWideToMaf(df2))\nstana <- combineMaf(mafs)\nstana\n#> # A stana: manual\n#> # Loaded directory: \n#> # Species number: 0\n#> # Loaded SNV table: 3 ID: SPID1\n#> # Size: 23848 B\ngetSlot(stana, \"snpsInfo\")\n#> [[1]]\n#>                           major_allele minor_allele\n#> SP1_NZ_GG770218.1_131457             G            A\n#> SP1_NZ_GG770218.1_131458             T            C\n#> SP1_NZ_GG770218.1_1314571            T            A\n#> SP1_NZ_GG770218.1_1314581            A            T\n#>                           species_id sample_name\n#> SP1_NZ_GG770218.1_131457       SPID1     sample1\n#> SP1_NZ_GG770218.1_131458       SPID1     sample1\n#> SP1_NZ_GG770218.1_1314571      SPID1     sample2\n#> SP1_NZ_GG770218.1_1314581      SPID1     sample2\n#> \n#> [[2]]\n#>                 major_allele minor_allele species_id\n#> SP2_NZ.1_131459            T            A      SPID2\n#> SP2_NZ.1_131470            A            T      SPID2\n#>                 sample_name\n#> SP2_NZ.1_131459     sample1\n#> SP2_NZ.1_131470     sample1\n#> \n#> [[3]]\n#>                 major_allele minor_allele species_id\n#> SP3_AZ.1_131457            G            A      SPID3\n#> SP3_AZ.1_131458            T            C      SPID3\n#>                 sample_name\n#> SP3_AZ.1_131457     sample2\n#> SP3_AZ.1_131458     sample2\n\n## If needed, SNV-level statistics should be set to stana\n# stana <- setSlot(stana, \"snpsSummary\", summary_df)"},{"path":"importing-and-filtering.html","id":"filtering-by-species-id","chapter":"2 Importing and filtering","heading":"2.6 Filtering by species ID","text":"check method applied stana object can check samples species met specific criteria.Subsequently, filter method can used subset stana object interesting species.functions stana designed perform analysis species within stana object unless specified, filtering beforehand grouping variables important (number samples profiled per group).","code":"\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=\"100002\", db=\"uhgg\")\n#>   100002\n#>   g__Blautia_A;s__Blautia_A sp900066165\n#>     Number of snps: 2058\n#>     Number of samples: 5\n#>   100002\n#>   g__Blautia_A;s__Blautia_A sp900066165\n#>     Number of genes: 23427\n#>     Number of samples: 7\nfilt <- stana %>% check(mean_coverage > 4)\nhead(filt %>% dplyr::arrange(dplyr::desc(n)))\n#> # A tibble: 6 × 3\n#>   species_id     n species_description                      \n#>        <int> <int> <chr>                                    \n#> 1     102478    31 g__Bacteroides_B;s__Bacteroides_B dorei  \n#> 2     101346    28 g__Bacteroides;s__Bacteroides uniformis  \n#> 3     102438    28 g__Parabacteroides;s__Parabacteroides di…\n#> 4     100074    21 g__Alistipes;s__Alistipes onderdonkii    \n#> 5     100044    20 g__Parabacteroides;s__Parabacteroides me…\n#> 6     101338    19 g__Blautia_A;s__Blautia_A wexlerae\nstana <- stana %>% filter(unique(filt$species_id))"},{"path":"importing-and-filtering.html","id":"filtering-the-site-ids-for-the-snv","chapter":"2 Importing and filtering","heading":"2.7 Filtering the site IDs for the SNV","text":"users can preset SNV ID used downstream calculation includeSNVID slot stana object. information used, function raises message using IDs.","code":"\nstana <- siteFilter(stana, getID(stana)[1], site_type==\"4D\")\n#> # total of 650 obtained from 2058\n## Downstream functions use the filtered site IDs"},{"path":"importing-and-filtering.html","id":"printing-the-profile-information","chapter":"2 Importing and filtering","heading":"2.8 Printing the profile information","text":"show print method, summary stana object outputted.\nAlso, summary method can used inspect grouping information per species.","code":"\nstana\n#> # A stana: MIDAS2\n#> # Database: uhgg\n#> # Loaded directory: ../merge_uhgg\n#> # Species number: 1\n#> # Group info (list): HC/R\n#> # Loaded SNV table: 182 ID: NA\n#> # Loaded gene table: 1 ID: 100002\n#> # Size: 4304800 B\nsummary(stana)\n#> # \n#> # SNV description\n#> # A tibble: 0 × 3\n#> # Groups:   group [0]\n#> # ℹ 3 variables: group <chr>, species_id <chr>, n <int>\n#> # Gene description\n#> # A tibble: 2 × 3\n#> # Groups:   group [2]\n#>   group species_id                                n\n#>   <chr> <chr>                                 <int>\n#> 1 HC    g__Blautia_A;s__Blautia_A sp900066165     1\n#> 2 R     g__Blautia_A;s__Blautia_A sp900066165     6"},{"path":"statistial-analysis.html","id":"statistial-analysis","chapter":"3 Statistial analysis","heading":"3 Statistial analysis","text":"stana provides functions perform statistical analysis metagenotyping results based loaded data.","code":"\nlibrary(stana)\nlibrary(phangorn)\nlibrary(ggtree)\n## Examine sample object\nload(system.file(\"extdata\", \"sysdata.rda\", package = \"stana\"))"},{"path":"statistial-analysis.html","id":"cons","chapter":"3 Statistial analysis","heading":"3.1 Consensus sequence calling","text":"consensus sequence calling can performed using SNV matrix. MIDAS MIDAS2 output, can filter confident positions software provides various statistics SNVs. implementation based call_consensus.py script available MIDAS. use pair-wise distances sequences calculated dist.ml default amino acid model (JC69), performs neighbor-joining tree estimation NJ.sequences stored phyDat class object fastaList slot, list species ID name.Matrix characters can returned return_mat=TRUE. return stana object.can use MSA stored fastaList slot infer phylogenetic tree choices.\nplotTree function can used internally infer plot tree based grouping.\ndist_method set dist.ml default, can pass arguments function tree_args.Owning powerful functions ggtree ggtreeExtra, can visualize tree based metadata.\nset data.frame containing covariates stana object setMetadata function. specify covariates meta argument plotTree.site_list supported usecase calling limited certain gene regions. example calls MSA specific gene ID output plot ggmsa.","code":"\n\n## The consensusSeq* is prepared, but consensusSeq function can automatically \n## choose which functions to use\nstana <- consensusSeqMIDAS2(stana, species=\"100003\", verbose=FALSE)\n#> # Beginning calling for 100003\n#> # Original Site number: 5019\n#> #  Profiled samples: 11\n#> #  Included samples: 11\n\n## Tree estimation and visualization by `phangorn` and `ggtree`\ndm <- dist.ml(getSlot(stana, \"fastaList\")[[\"100003\"]])\ntre <- NJ(dm)\ntre <- groupOTU(tre, getSlot(stana, \"cl\"))\ntp <- ggtree(tre, aes(color=.data$group),\n             layout='circular') +\n        geom_tippoint(size=3) +\n        ggtree::scale_color_manual(values=getSlot(stana, \"colors\"))\ntp\nstana <- stana |>\n    consensusSeq(argList=list(site_prev=0.8))\n#> # Beginning calling for 100003\n#> # Original Site number: 5019\n#> #  Profiled samples: 11\n#> #  Included samples: 11\ngetFasta(stana)[[1]]\n#> 11 sequences with 4214 character and 2782 different site patterns.\n#> The states are a c g t\nmat <- stana |>\n    consensusSeq(argList=list(site_prev=0.8, return_mat=TRUE))\n#> # Beginning calling for 100003\n#> # Original Site number: 5019\n#> #  Profiled samples: 11\n#> #  Included samples: 11\nmat |> dim()\n#> [1]   11 4214\nlibrary(phangorn)\nstana <- inferAndPlotTree(stana, dist_method=\"dist.hamming\", tree_args=list(exclude=\"all\"))\ngetTree(stana)[[1]]\n#> \n#> Phylogenetic tree with 11 tips and 10 internal nodes.\n#> \n#> Tip labels:\n#>   ERR1711593, ERR1711594, ERR1711596, ERR1711598, ERR1711603, ERR1711605, ...\n#> \n#> Rooted; includes branch lengths.\n## Make example metadata\nsamples <- getSlot(stana, \"snps\")[[\"100003\"]] |> colnames()\nmetadata <- data.frame(\n    row.names=samples,\n    treatment=factor(sample(1:3, length(samples), replace=TRUE)),\n    marker=runif(length(samples))\n)\n\n## Set metadata\nstana <- setMetadata(stana, metadata)\n\n## Call consensus sequence\n## Infer and plot tree based on metadata\nstana <- stana |>\n  consensusSeq(argList=list(site_prev=0.95)) |>\n  inferAndPlotTree(meta=c(\"treatment\",\"marker\"))\n#> # Beginning calling for 100003\n#> # Original Site number: 5019\n#> #  Profiled samples: 11\n#> #  Included samples: 11\ngetFasta(stana)[[1]]\n#> 11 sequences with 896 character and 625 different site patterns.\n#> The states are a c g t\ngetTree(stana)[[1]]\n#> \n#> Phylogenetic tree with 11 tips and 10 internal nodes.\n#> \n#> Tip labels:\n#>   ERR1711593, ERR1711594, ERR1711596, ERR1711598, ERR1711603, ERR1711605, ...\n#> \n#> Rooted; includes branch lengths.\ngetSlot(stana, \"treePlotList\")[[1]]\n## get snpsInfo slot and filter to variants in specific gene IDs\ncand_ids <- stana::getSlot(stana, \"snpsInfo\")[[\"100003\"]] %>%\n    dplyr::filter(gene_id==\"UHGG000008_01913\") %>%\n    row.names()\n\n## Call sequence\nstana <- consensusSeqMIDAS2(stana, \"100003\", site_list=cand_ids)\n#> # Beginning calling for 100003\n#> # Original Site number: 5019\n#> #  Profiled samples: 11\n#> #  Included samples: 11\n#> # site_list specified: 22\n\n## Plot\nif (requireNamespace(\"ggmsa\")) {\n    library(ggmsa)\n    phangorn::write.phyDat(getFasta(stana)[[\"100003\"]],\n                           \"test.fasta\", format=\"fasta\")\n    ggmsa::ggmsa(\"test.fasta\",seq_name = TRUE)+ ggmsa::geom_seqlogo()\n}\n#> Loading required namespace: ggmsa\n#> Registered S3 methods overwritten by 'ggalt':\n#>   method                  from   \n#>   grid.draw.absoluteGrob  ggplot2\n#>   grobHeight.absoluteGrob ggplot2\n#>   grobWidth.absoluteGrob  ggplot2\n#>   grobX.absoluteGrob      ggplot2\n#>   grobY.absoluteGrob      ggplot2\n#> ggmsa v1.8.0  Document: http://yulab-smu.top/ggmsa/\n#> \n#> If you use ggmsa in published research, please cite:\n#> L Zhou, T Feng, S Xu, F Gao, TT Lam, Q Wang, T Wu, H Huang, L Zhan, L Li, Y Guan, Z Dai*, G Yu* ggmsa: a visual exploration tool for multiple sequence alignment and associated data. Briefings in Bioinformatics. DOI:10.1093/bib/bbac222"},{"path":"statistial-analysis.html","id":"nonnegative-matrix-factorization","chapter":"3 Statistial analysis","heading":"3.2 Nonnegative matrix factorization","text":"loaded calculated matrix can used nonnegative matrix factorization (NMF) unsupervised identifications factors within species. calculates factor x sample sample feature matrix, possibly finds pattern within-species diversity. results can summarized functions plotAbundanceWithinSpecies. function uses R package NMF, implements variety algorithms rank selection method.input can SNV, gene, gene family (KO) abundance table. matrix can contain NA -1 (zero depth position), filtering performed. NMF::nmf function NNLM::nnmf function can used purpose. default, estimate set FALSE set TRUE, performs estimation rank within estimate_range. assumes multiple subspecies samples applicable one subspecies present. chooses rank based cophenetic correlation coefficient.function outputs related statistics like proportion NA zero value, relative abundances factors estimation, features presented factor.method set snmf/r default NMF. larger matrix, NNML function can used faster computation setting nnlm_flag TRUE.users can specify rank. NMF slot stores list NMF results (NNLM results) per species.resulting stana object can used function. plotAbundanceWithinSpecies plots (relative) abundances per sample using grouping criteria stana object.data can obtained using return_data.basis corresponds factor feature matrix. represents functional implications KO gene copy number tables used NMF. information can parsed matrix KEGG PATHWAY information using pathwayWithFactor.information can combined functions stana, like plotting factor abundances along tree inferred consensus sequence alignment, linking allele frequency information gene copy number data.","code":"\nlibrary(NMF)\n#> Warning: package 'NMF' was built under R version 4.3.3\n#> Loading required package: registry\n#> Loading required package: rngtools\n#> Warning: package 'rngtools' was built under R version 4.3.3\n#> Loading required package: cluster\n#> NMF - BioConductor layer [OK] | Shared memory capabilities [NO: windows] | Cores 2/2\n#> \n#> Attaching package: 'NMF'\n#> The following object is masked from 'package:ape':\n#> \n#>     consensus\n#> The following objects are masked from 'package:igraph':\n#> \n#>     algorithm, compare\nstana <- NMF(stana, \"100003\", estimate=TRUE)[[1]]\n#> # NMF started 100003, target: kos, method: snmf/r\n#> # Original features: 20\n#> # Original samples: 16\n#> # Original matrix NA: NA\n#> # Original matrix zero: 0.659\n#> # Selecting KL loss\n#> # Filtered features: 20\n#> # Filtered samples: 16\n#> Warning in cor(d.consensus, d.coph, method = \"pearson\"):\n#> the standard deviation is zero\n#> Chosen rank: 4 \n#> # Rank 4\n#> Warning in nmf_snmf(beta = 0.01, A = y, x = x, version =\n#> \"R\", verbose = FALSE): NMF::snmf - Too many restarts due to\n#> too big 'beta' value [Computation stopped after the 9th\n#> restart]\n#> Mean relative abundances: 0.3307952 0.4457982 0.2234066 0 \n#> Present feature per factor: 12 20 20 12\ngetSlot(stana, \"nmf\")\n#> NULL\nstana <- NMF(stana, \"100003\", rank=3, beta=0.001)\n#> # NMF started 100003, target: kos, method: snmf/r\n#> # Original features: 20\n#> # Original samples: 16\n#> # Original matrix NA: NA\n#> # Original matrix zero: 0.659\n#> # Selecting KL loss\n#> # Filtered features: 20\n#> # Filtered samples: 16\n#> # Rank 3\n#> Mean relative abundances: 0.4464854 0.2489392 0.3045754 \n#> Present feature per factor: 16 13 11\ngetSlot(stana, \"NMF\")\n#> $`100003`\n#> <Object of class: NMFfit>\n#>  # Model:\n#>   <Object of class:NMFstd>\n#>   features: 20 \n#>   basis/rank: 3 \n#>   samples: 16 \n#>  # Details:\n#>   algorithm:  snmf/r \n#>   seed:  random \n#>   RNG: 10403L, 624L, ..., -1119848976L [a0b56536ecb759f07f21b4b252fb5db8]\n#>   distance metric:  <function> \n#>   residuals:  15.967 \n#>   parameters: beta=0.001 \n#>   Iterations: 100 \n#>   Timing:\n#>      user  system elapsed \n#>      0.05    0.00    0.07\nplotAbundanceWithinSpecies(stana, \"100003\", tss=TRUE)\nplotAbundanceWithinSpecies(stana, \"100003\", tss=TRUE, return_data=TRUE) %>% head()\n#>                    1         2         3  group\n#> ERR1711593 0.2018576 0.0000000 0.7981424 Group1\n#> ERR1711594 0.2568975 0.2644210 0.4786815 Group1\n#> ERR1711596 0.7708334 0.2291666 0.0000000 Group1\n#> ERR1711598 0.9735364 0.0264636 0.0000000 Group1\n#> ERR1711599 0.0000000 0.5539269 0.4460731 Group1\n#> ERR1711602 0.0000000 0.6022663 0.3977337 Group1\nlibrary(pheatmap)\n#> Warning: package 'pheatmap' was built under R version 4.3.3\npheatmap(pathwayWithFactor(stana, \"100003\", tss=TRUE))\nab <- plotAbundanceWithinSpecies(stana, \"100003\", tss=TRUE, return_data=TRUE)\nstana <- setMetadata(stana, ab)\nstana <- inferAndPlotTree(stana, \"100003\", meta=colnames(ab))\ngetTreePlot(stana)\n#> $`100003`"},{"path":"statistial-analysis.html","id":"permanova","chapter":"3 Statistial analysis","heading":"3.3 PERMANOVA","text":"Using adonis2 function vegan, one can compare distance matrix based SNV frequency gene copy numbers, tree-based distance specified group. target=\"tree\" specified, tree shuold treeList, species name key. ape::cophenetic.phylo() used calculate distance tips based branch length. Distance method can chosen dist function stats, default set manhattan. can specify distArg pass arguments dist. Also, distance calculated directly sequences can used. case, target='fasta' chosen, function calculate distance provided AAfunc argument.corresponding principal coordinate analysis plot using distance matrix can drawn specifying pcoa. relative eigenvalues plotted.","code":"\nstana <- setTree(stana, \"100003\", tre)\nstana <- doAdonis(stana, specs = \"100003\", target=\"tree\")\n#> # Performing adonis in 100003 target is tree\n#> #  F: 0.719649945825046, R2: 0.0740407267582885, Pr: 0.689\ngetAdonis(stana)[[\"100003\"]]\n#> Permutation test for adonis under reduced model\n#> Terms added sequentially (first to last)\n#> Permutation: free\n#> Number of permutations: 999\n#> \n#> adonis2(formula = d ~ ., data = structure(list(group = c(\"Group1\", \"Group1\", \"Group1\", \"Group1\", \"Group2\", \"Group2\", \"Group2\", \"Group2\", \"Group2\", \"Group2\", \"Group2\")), row.names = c(\"ERR1711593\", \"ERR1711594\", \"ERR1711596\", \"ERR1711598\", \"ERR1711603\", \"ERR1711605\", \"ERR1711606\", \"ERR1711609\", \"ERR1711611\", \"ERR1711612\", \"ERR1711618\"), class = \"data.frame\"))\n#>          Df SumOfSqs      R2      F Pr(>F)\n#> group     1  0.15557 0.07404 0.7196  0.689\n#> Residual  9  1.94558 0.92596              \n#> Total    10  2.10115 1.00000\nstana <- doAdonis(stana, specs = \"100003\",\n    target=\"genes\", pcoa=TRUE)\n#> # Performing adonis in 100003 target is genes\n#> #  F: 0.950009752773493, R2: 0.0635457614064265, Pr: 0.58"},{"path":"statistial-analysis.html","id":"comparing-gene-copy-numbers","chapter":"3 Statistial analysis","heading":"3.4 Comparing gene copy numbers","text":"genes slot filled stana object, gene copy numbers can compared one one using exact Wilcoxon rank-sum test using wilcox.exact exactRankTests computing exact conditional p-values. Note p-values adjusted multiple comparisons made.","code":"\nres <- compareGenes(stana, \"100003\")\n#> Testing total of 21806\nres[[\"UHGG000008_01733\"]]\n#> \n#>  Exact Wilcoxon rank sum test\n#> \n#> data:  c(1.154444, 2.404241, 0, 1.421386, 1.50773, 0) and c(0.535732, 1.709442, 1.31675, 3.44086, 2.712423, 1.923076, 1.062853, c(1.154444, 2.404241, 0, 1.421386, 1.50773, 0) and 1.21147, 0, 1.509217)\n#> W = 22, p-value = 0.4256\n#> alternative hypothesis: true mu is not equal to 0"},{"path":"statistial-analysis.html","id":"aggregating-gene-copy-numbers","chapter":"3 Statistial analysis","heading":"3.5 Aggregating gene copy numbers","text":"gene abundances across multiple stana object can aggregated. returns new stana object gene abundances combined.","code":"\n## This returns new stana object\nstanacomb <- combineGenes(list(stana, stana), species=\"100003\")\n#> Common genes: 21806\n#> Duplicate label found in group\ndim(getSlot(stanacomb, \"genes\")[[\"100003\"]])\n#> [1] 21806    32"},{"path":"statistial-analysis.html","id":"performing-boruta-or-feature-selection","chapter":"3 Statistial analysis","heading":"3.6 Performing Boruta or feature selection","text":"Boruta algorithm can run matrices obtain important marker (SNV position gene) distinguishing group doBoruta function. function performs Boruta algorithm specified data returns Boruta class result. default, function performs fixes tentative input. disable , specify doFix=FALSE., visualize copy numbers important genes confirmed group.","code":"\nlibrary(Boruta)\n#> Warning: package 'Boruta' was built under R version 4.3.3\nbrres <- doBoruta(stana, \"100003\")\n#> # Using grouping from the slot: Group1/Group2\n#> # If needed, please provide preprocessed matrix to `mat`\n#> # Feature number: 21806\n#> # Performing Boruta\n#> Warning in Boruta::TentativeRoughFix(rf): There are no\n#> Tentative attributes! Returning original object.\nbrres\n#> $boruta\n#> Boruta performed 99 iterations in 30.38444 secs.\n#>  6 attributes confirmed important: UHGG060667_01243,\n#> UHGG061776_01338, UHGG158704_01078, UHGG190699_01344,\n#> UHGG215309_01728 and 1 more;\n#>  21800 attributes confirmed unimportant:\n#> UHGG000008_00008, UHGG000008_00009, UHGG000008_00010,\n#> UHGG000008_00012, UHGG000008_00015 and 21795 more;\nconfirmed_genes <- brres$boruta$finalDecision[brres$boruta$finalDecision==\"Confirmed\"] %>% names()\nplotGenes(stana, \"100003\", confirmed_genes)+\n  ggplot2::facet_wrap(.~geneID,scales=\"free_y\")+\n  cowplot::theme_cowplot() +\n  cowplot::panel_border()"},{"path":"function.html","id":"function","chapter":"4 Functional annotation","heading":"4 Functional annotation","text":"metabolic functional profiling, several functions prepared stana. Note functions primarily designed KEGG ORTHOLOGY can subsequently linked KEGG PATHWAY databases KEGG. However, options enzyme commision numbers can accepted.","code":"\nlibrary(stana)\nlibrary(ComplexHeatmap)"},{"path":"function.html","id":"parsing-patric-results","chapter":"4 Functional annotation","heading":"4.1 Parsing PATRIC results","text":"Use checkPATRIC function obtain information related PATRIC functional annotation. function accepts input named list genes, returns functional annotation results. function uses BiocFileCache() cache obtained results API.","code":"\ngenes <- list(\"test\"=read.table(\"../test_genes.txt\")$V1)\ngenes |> head()\n#> $test\n#>  [1] \"1280701.3.peg.1153\" \"1280701.3.peg.1169\"\n#>  [3] \"1280701.3.peg.1174\" \"1280701.3.peg.1179\"\n#>  [5] \"1280701.3.peg.1186\" \"1280701.3.peg.203\" \n#>  [7] \"1280701.3.peg.361\"  \"1280701.3.peg.363\" \n#>  [9] \"1280701.3.peg.368\"  \"1280701.3.peg.369\" \n#> [11] \"1280701.3.peg.570\"  \"1280701.3.peg.758\" \n#> [13] \"1280701.3.peg.762\"  \"1410605.3.peg.1201\"\n#> [15] \"1410605.3.peg.1204\" \"1410605.3.peg.1463\"\n#> [17] \"1410605.3.peg.1510\" \"1410605.3.peg.1568\"\n#> [19] \"1410605.3.peg.450\"  \"1410605.3.peg.593\" \n#> [21] \"1410605.3.peg.655\"  \"1410605.3.peg.833\" \n#> [23] \"1410605.3.peg.844\"  \"1410605.3.peg.903\" \n#> [25] \"1410605.3.peg.953\"  \"1447715.5.peg.1455\"\n#> [27] \"1447715.5.peg.1549\" \"1447715.5.peg.1582\"\n#> [29] \"1447715.5.peg.256\"  \"1447715.5.peg.33\"  \n#> [31] \"1447715.5.peg.566\"  \"1447715.5.peg.964\"\nres <- checkPATRIC(genes, \"pathway_name\")\n#> Obtaining annotations of 3 genomes\n#>   Obtaining information on 1280701.3\n#>   Obtaining information on 1410605.3\n#>   Obtaining information on 1447715.5\n#> Checking results on cluster test\n#>   total of 2 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 2 annotation obtained after removal of duplication\nDT::datatable(res$test$DF, options = list(scrollX=TRUE))"},{"path":"function.html","id":"draw-the-network","chapter":"4 Functional annotation","heading":"4.1.1 Draw the network","text":"can draw graph obtained results depicting enzyme KEGG PATHWAY relationship.","code":"\ndrawPATRIC(genes)\n#> Obtaining annotations of 3 genomes\n#>   Obtaining information on 1280701.3\n#>   Obtaining information on 1410605.3\n#>   Obtaining information on 1447715.5\n#> Checking results on cluster test\n#>   total of 2 annotation obtained\n#>   remove duplicate based on ec_description\n#>   total of 2 annotation obtained after removal of duplication\n#> Making graph on pathway_name and ec_description\n#>   subsetting to 5 label on each category\n#> $test\n#> $test$DF\n#>                  patric_id ec_number\n#> 254  fig|1280701.3.peg.570  4.2.1.51\n#> 608 fig|1280701.3.peg.1186  2.1.1.37\n#>                          ec_description pathway_id\n#> 254              Prephenate dehydratase        400\n#> 608 DNA (cytosine-5-)-methyltransferase        270\n#>                                            pathway_name\n#> 254 Phenylalanine, tyrosine and tryptophan biosynthesis\n#> 608                  Cysteine and methionine metabolism\n#> \n#> $test$REMOVEDUP\n#>                  patric_id ec_number\n#> 254  fig|1280701.3.peg.570  4.2.1.51\n#> 608 fig|1280701.3.peg.1186  2.1.1.37\n#>                          ec_description pathway_id\n#> 254              Prephenate dehydratase        400\n#> 608 DNA (cytosine-5-)-methyltransferase        270\n#>                                            pathway_name\n#> 254 Phenylalanine, tyrosine and tryptophan biosynthesis\n#> 608                  Cysteine and methionine metabolism\n#> \n#> $test$SORTED\n#> \n#> DNA (cytosine-5-)-methyltransferase \n#>                                   1 \n#>              Prephenate dehydratase \n#>                                   1 \n#> \n#> $test$GRAPH\n#> IGRAPH 1b96c70 UN-- 4 2 -- \n#> + attr: name (v/c)\n#> + edges from 1b96c70 (vertex names):\n#> [1] Prephenate dehydratase             --Phenylalanine, tyrosine and tryptophan biosynthesis\n#> [2] DNA (cytosine-5-)-methyltransferase--Cysteine and methionine metabolism                 \n#> \n#> $test$PLOT"},{"path":"function.html","id":"parsing-eggnog-mapper-v2-results","chapter":"4 Functional annotation","heading":"4.2 Parsing eggNOG-mapper v2 results","text":"Use checkEGGNOG function read output eggNOG-mapper v2.\nperform annotation genes using server software.\nSpecify IDs want obtain ret, “KEGG_ko” “KEGG_Pathway”.\nannotation can used functions.","code":"\ntib <- checkEGGNOG(\"../annotations_gtdb/100224_eggnog_out.emapper.annotations\",\n    ret=\"KEGG_ko\")\ntib |> head() |> DT::datatable()"},{"path":"function.html","id":"draw-the-network-1","chapter":"4 Functional annotation","heading":"4.2.1 Draw the network","text":"can draw relationships IDs drawEGGNOG.","code":"\ndrawEGGNOG(\"../annotations_gtdb/100224_eggnog_out.emapper.annotations\",\n            candPlot = c(\"KEGG_ko\",\"KEGG_Pathway\"),\n            geneIDs = tib$ID |> head(100))\n#> # A tibble: 4,287 × 3\n#>    ID                    name          value                \n#>    <chr>                 <chr>         <chr>                \n#>  1 GCF_002846775.1_00408 seed_ortholog 1690.BPSG_1412       \n#>  2 GCF_002846775.1_00408 eggNOG_OGs    COG0304@1|root       \n#>  3 GCF_002846775.1_00408 eggNOG_OGs    COG0331@1|root       \n#>  4 GCF_002846775.1_00408 eggNOG_OGs    COG2030@1|root       \n#>  5 GCF_002846775.1_00408 eggNOG_OGs    COG4981@1|root       \n#>  6 GCF_002846775.1_00408 eggNOG_OGs    COG0304@2|Bacteria   \n#>  7 GCF_002846775.1_00408 eggNOG_OGs    COG0331@2|Bacteria   \n#>  8 GCF_002846775.1_00408 eggNOG_OGs    COG2030@2|Bacteria   \n#>  9 GCF_002846775.1_00408 eggNOG_OGs    COG4981@2|Bacteria   \n#> 10 GCF_002846775.1_00408 eggNOG_OGs    2GIY4@201174|Actinob…\n#> # ℹ 4,277 more rows\n#> $graph\n#> IGRAPH 1c8f1ae UN-- 21 922 -- \n#> + attr: name (v/c), category (v/c), size (v/n)\n#> + edges from 1c8f1ae (vertex names):\n#>  [1] ko:K11533--ko00061 ko:K11533--ko01100\n#>  [3] ko:K11533--ko01212 ko:K11533--ko04931\n#>  [5] ko:K11533--ko00061 ko:K11533--ko01100\n#>  [7] ko:K11533--ko01212 ko:K11533--ko04931\n#>  [9] ko:K11533--ko00061 ko:K11533--ko01100\n#> [11] ko:K11533--ko01212 ko:K11533--ko04931\n#> [13] ko:K11533--ko00061 ko:K11533--ko01100\n#> [15] ko:K11533--ko01212 ko:K11533--ko04931\n#> + ... omitted several edges\n#> \n#> $plot"},{"path":"function.html","id":"heatmap-of-the-gene-copy-numbers-with-functional-annotations","chapter":"4 Functional annotation","heading":"4.3 Heatmap of the gene copy numbers with functional annotations","text":"can inspect overview functional differences using gene copy numbers along simplifyEnrichment. plotHeatmap function can used stana object preprocessed gene copy number matrix input. function, anno_PATRIC_keywords anno_eggNOG_keywords used plot word clouds alongside Heatmap ComplexHeatmap. easy MIDAS, function obtains functional annotation PATRIC API server annotation step needed.","code":""},{"path":"function.html","id":"midas-1","chapter":"4 Functional annotation","heading":"4.3.1 MIDAS","text":"MIDAS, function automatically query API PATRIC server using gene names. gene number large typically, one can filter genes options filter_zero_frac, filter_max_frac filter_max_value. However, one perform filtering beforehand provide matrix mat. mat specified, filtering options ignored.","code":"\nlibrary(ComplexHeatmap)\nlibrary(simplifyEnrichment)\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS(\"../merge_midas1/\", cl=hd_meta, candSp=\"Bacteroides_uniformis_57318\")\n#> Bacteroides_uniformis_57318\n#>   Snps\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in SNV\n#>   Genes\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in genes\n#> Overall, 1 species met criteria in SNPs\n#> Overall, 1 species met criteria in genes\nplotHeatmap(stana, \"Bacteroides_uniformis_57318\",filter_max_value = 2,filter_max_frac = 0)\n#> # In resulting matrix, max: 1.99955229433902 min: 0\n#> # Dimension: 4911 29\n#> Obtaining gene information from PATRIC server\n#> Obtaining annotations of 7 genomes\n#>   Obtaining information on 1235787.3\n#>   Obtaining information on 1339348.3\n#>   Obtaining information on 411479.10\n#>   Obtaining information on 457393.3\n#>   Obtaining information on 585543.3\n#>   Obtaining information on 997889.3\n#>   Obtaining information on 997890.3\n#> Checking results on cluster 1\n#>   total of 273 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 261 annotation obtained after removal of duplication\n#> Checking results on cluster 2\n#>   total of 334 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 329 annotation obtained after removal of duplication\n#> Checking results on cluster 3\n#>   total of 693 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 662 annotation obtained after removal of duplication\n#> Checking results on cluster 4\n#>   total of 175 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 174 annotation obtained after removal of duplication\n#> Checking results on cluster 5\n#>   total of 310 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 303 annotation obtained after removal of duplication\n#> Checking results on cluster 6\n#>   total of 898 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 868 annotation obtained after removal of duplication\n#> Checking results on cluster 7\n#>   total of 521 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 503 annotation obtained after removal of duplication\n#> Checking results on cluster 8\n#>   total of 701 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 675 annotation obtained after removal of duplication\n#> Checking results on cluster 9\n#>   total of 1140 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 1105 annotation obtained after removal of duplication\n#> Checking results on cluster 10\n#>   total of 1090 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 1053 annotation obtained after removal of duplication"},{"path":"function.html","id":"the-other-types","chapter":"4 Functional annotation","heading":"4.3.2 The other types","text":"users provide eggNOG annotation eggNOG slot stana object. fnc argument accepts KEGG_Pathway KEGG_Module available eggNOG annotation. function queries KEGG REST API obtain pathway module description.set eggNOG-mapper v2 annotation file eggNOG slot stana object.\ncan done setAnnotation function.can set removeAdditional argument filter words displayed.gene IDs can subset providing IDs geneID option.","code":"\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=c(\"101346\"), db=\"uhgg\")\n#>   101346\n#>   g__Bacteroides;s__Bacteroides uniformis\n#>     Number of snps: 70178\n#>     Number of samples: 28\n#>   101346\n#>   g__Bacteroides;s__Bacteroides uniformis\n#>     Number of genes: 120158\n#>     Number of samples: 31\n## Set the annotation file\nstana <- setAnnotation(stana, list(\"101346\"=\"../annotations_uhgg/101346_eggnog_out.emapper.annotations\"))\nlibrary(ComplexHeatmap)\nlibrary(simplifyEnrichment)\n\nplotHeatmap(stana, \"101346\",\n    fnc=\"KEGG_Module\",\n    removeAdditional=c(\"cycle\",\"pathway\"),\n    filter_zero_frac = 0.5,\n    filter_max_frac = 0,\n    filter_max_value = 5)\n#> # In resulting matrix, max: 4.999739 min: 0\n#> # Dimension: 3501 31\n#> # Looking for the annotation file by eggNOG-mapper v2\n#> # Loading annotation\ngid <- sample(getGeneID(stana, \"101346\"), 100)\nplotHeatmap(stana, \"101346\",\n    fnc=\"KEGG_Module\",\n    removeAdditional=c(\"cycle\",\"pathway\"), geneID=gid)\n#> # In resulting matrix, max: 24.030286 min: 0\n#> # Dimension: 100 31\n#> # Looking for the annotation file by eggNOG-mapper v2\n#> # Loading annotation"},{"path":"function.html","id":"aggregate-the-gene-copy-numbers-based-on-the-annotations","chapter":"4 Functional annotation","heading":"4.4 Aggregate the gene copy numbers based on the annotations","text":"calcGF function can aggregate gene copy numbers based annotation (eggNOG) manually set annotation.","code":"\n## Default to use eggNOG annotation, and the user can specify which gene family to summarize\nstana <- calcGF(stana, \"101346\", column=\"EC\")\ngetSlot(stana, \"kos\")[[\"101346\"]] %>% head()\n#>           ERR9492489 ERR9492490 ERR9492491 ERR9492492\n#> 3.6.4.12   39.173924  95.450865  52.767661  46.882936\n#> 3.4.24.40   0.000000   0.841116   0.278746   0.000000\n#> 3.2.1.14    1.198363   5.697443   2.435163   0.298239\n#> 4.2.2.23    1.586967   8.950180   3.871217   0.326971\n#> 2.7.11.1    7.415218  17.180451  17.557883  12.640404\n#> 3.1.3.90    0.000000   0.000000   0.000000   0.000000\n#>           ERR9492493 ERR9492494 ERR9492495 ERR9492496\n#> 3.6.4.12  109.030709  38.157274  61.418044  32.840106\n#> 3.4.24.40   2.289508   0.000000   0.000000   0.000000\n#> 3.2.1.14    4.716068   0.565635   3.950550   0.842613\n#> 4.2.2.23    2.222589   2.685389   1.223989   0.547461\n#> 2.7.11.1   13.093117  16.668716   9.321875   3.957696\n#> 3.1.3.90    0.309415   0.000000   0.000000   0.000000\n#>           ERR9492497 ERR9492498 ERR9492499 ERR9492500\n#> 3.6.4.12   75.977012  28.210277  61.693399  36.666227\n#> 3.4.24.40   1.190823   0.117354   0.276488   0.000000\n#> 3.2.1.14    3.989812   0.833608   2.955427   1.241877\n#> 4.2.2.23    2.361721   0.534308   2.707128   0.000000\n#> 2.7.11.1   24.343595   8.375070  15.225822   9.506420\n#> 3.1.3.90    0.399345   0.000000   0.334459   0.000000\n#>           ERR9492501 ERR9492503 ERR9492504 ERR9492505\n#> 3.6.4.12   48.993525  58.889647  41.316522  44.670327\n#> 3.4.24.40   0.605779   0.000000   1.281429   0.431620\n#> 3.2.1.14    6.470900   2.073627   1.787648   1.916355\n#> 4.2.2.23    6.066784   3.795593   0.000000   1.875545\n#> 2.7.11.1   21.694552  19.085136  15.225251  12.040248\n#> 3.1.3.90    0.328735   0.210771   0.000000   0.133266\n#>           ERR9492507 ERR9492509 ERR9492510 ERR9492511\n#> 3.6.4.12   30.414200  94.222205  67.033382  45.280463\n#> 3.4.24.40   0.000000   0.000000   0.582293   0.050622\n#> 3.2.1.14    0.113379   9.611853   3.004519   0.816464\n#> 4.2.2.23    5.876491   9.608170   6.104285   0.227825\n#> 2.7.11.1   15.459505  48.563617  16.882499   6.723153\n#> 3.1.3.90    0.000000   0.330640   0.000000   0.209655\n#>           ERR9492512 ERR9492513 ERR9492514 ERR9492515\n#> 3.6.4.12   37.248780  92.564239  44.501316  33.343923\n#> 3.4.24.40   0.000000   0.699384   0.809852   0.000000\n#> 3.2.1.14    2.928634   3.767824   1.008637   0.391071\n#> 4.2.2.23    0.200991   2.143717   0.000000   2.435797\n#> 2.7.11.1   13.147839  19.027770  17.290957   8.964407\n#> 3.1.3.90    0.000000   0.000000   0.000000   0.000000\n#>           ERR9492519 ERR9492521 ERR9492522 ERR9492523\n#> 3.6.4.12  123.352975  19.992745 113.496963  73.578048\n#> 3.4.24.40   0.612824   0.044187   0.000000   0.289869\n#> 3.2.1.14    2.685511   0.555955   4.377865   4.203646\n#> 4.2.2.23    7.924792   2.183619   8.216322   2.000771\n#> 2.7.11.1   21.618306  16.281798  27.935448   8.713224\n#> 3.1.3.90    0.745864   0.064679   0.000000   0.270559\n#>           ERR9492525 ERR9492526 ERR9492528\n#> 3.6.4.12   22.958707  64.120946  37.810981\n#> 3.4.24.40   0.048448   0.548795   0.000000\n#> 3.2.1.14    0.671990   4.579498   2.684535\n#> 4.2.2.23    2.174417   9.497381   3.574399\n#> 2.7.11.1    3.474492  16.346382  10.342824\n#> 3.1.3.90    0.147197   0.000000   0.000000"},{"path":"function.html","id":"kgeg-pathway-and-kegg-orthology","chapter":"4 Functional annotation","heading":"4.5 KGEG PATHWAY and KEGG ORTHOLOGY","text":"","code":""},{"path":"function.html","id":"visualization-of-kegg-pathway","chapter":"4 Functional annotation","heading":"4.5.1 Visualization of KEGG PATHWAY","text":"KEGG PATHWAY frequently used characterize metabolic function microbiome. Utilizing ggkegg, information intra-species diversity, particulary gene copy number differences, can reflected onto KEGG PATHWAY. needs genes slot filled, annotations files, typically eggNOG-mapper v2, needed.","code":""},{"path":"function.html","id":"visualizing-differences-per-species","chapter":"4 Functional annotation","heading":"4.5.1.1 Visualizing differences per species","text":"Load profile multiple species.Next, set eggNOG-mapper v2 annotation file eggNOG slot stana object.\nway, plotKEGGPathway function automatically calculates abundance user-defined method.plotKEGGPathway can run providing stana object, species (multiple species, rectangular nodes split),\npathway ID visualize. , visualize ko00620, Pyruvate metabolism example. large annotation table, calculation takes time can provide pre-calculated KO table kos slot stana object, specify only_ko = TRUE first return KO table.default, scale . install ggh4x, multiple scales can added, specifying multi_scale argument.can provide multiple pathway IDs pathway_id, returns list plot.way, differences orthologies pathway across multiple species can readily captured.","code":"\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=c(\"101346\",\"102438\"), db=\"uhgg\")\n#>   101346\n#>   g__Bacteroides;s__Bacteroides uniformis\n#>     Number of snps: 70178\n#>     Number of samples: 28\n#>   102438\n#>   g__Parabacteroides;s__Parabacteroides distasonis\n#>     Number of snps: 18102\n#>     Number of samples: 28\n#>   101346\n#>   g__Bacteroides;s__Bacteroides uniformis\n#>     Number of genes: 120158\n#>     Number of samples: 31\n#>   102438\n#>   g__Parabacteroides;s__Parabacteroides distasonis\n#>     Number of genes: 47046\n#>     Number of samples: 29\n## Set the annotation file\nstana <- setAnnotation(stana, list(\"101346\"=\"../annotations_uhgg/101346_eggnog_out.emapper.annotations\",\n    \"102438\"=\"../annotations_uhgg/102438_eggnog_out.emapper.annotations\"))\nstana <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", only_ko=TRUE, multi_scale=FALSE)\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", multi_scale=FALSE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", multi_scale=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"),\n                      pathway_id=c(\"ko00270\",\"ko00620\"),\n                      multi_scale=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg2 <- patchwork::wrap_plots(gg)\ngg2"},{"path":"function.html","id":"visualizing-calculated-values-across-species","chapter":"4 Functional annotation","heading":"4.5.2 Visualizing calculated values across species","text":"want see sum values across species, can set option summarize=TRUE. way, KO values across specified species summed, compared groups, plotted.","code":"\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"),\n                      pathway_id=c(\"ko00270\",\"ko00620\"),\n                      summarize=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 102438: HC / R\ngg2 <- patchwork::wrap_plots(gg)\ngg2"},{"path":"function.html","id":"show-which-species-have-the-kos","chapter":"4 Functional annotation","heading":"4.5.3 Show which species have the KOs","text":"specify point_mode=TRUE, function plot points KOs pathways\nbased whether specified species corresponding KOs annotated.","code":"\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"),\n                      pathway_id=c(\"ko00270\"),\n                      sp_colors=c(\"blue\",\"red\") |> setNames(c(\"101346\",\"102438\")),\n                      point_mode=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\n#> Point mode enabled\ngg\n#> $ko00270"},{"path":"function.html","id":"setting-the-manual-annotation","chapter":"4 Functional annotation","heading":"4.6 Setting the manual annotation","text":"Using setMap function, one can set stana object named data frame mapping file gene gene families.\ncase, data.frame two column layouts, first column corresponds gene ID second column corresponds gene family IDs.","code":"\nstana <- setMap(stana, \"101346\", data.frame(c(\"geneID1\",\"geneID2\"), c(\"K00001\",\"K00002\")))"},{"path":"function.html","id":"pathwaywithfactor","chapter":"4 Functional annotation","heading":"4.7 pathwayWithFactor","text":"KO abundances can aggregated KEGG PATHWAY abundance pathwayWithFactor.\ndefault, function uses KO matrix NMF slot. mat can specified matrices.","code":"\n## Row.names: KO, colnames: Samples\nch <- getSlot(stana, \"kos\")[[\"101346\"]]\nhead(pathwayWithFactor(stana, \"101346\", summarize=mean, mat=ch))\n#>              ERR9492489 ERR9492490 ERR9492491 ERR9492492\n#> path:ko00010 0.03877215 0.13322643 0.04001532 0.06391891\n#> path:ko00020 0.03425545 0.12828687 0.03985006 0.07768581\n#> path:ko00030 0.04703528 0.13909857 0.06912219 0.04676925\n#> path:ko00040 0.04000612 0.17272473 0.06849944 0.05096996\n#> path:ko00051 0.05214005 0.07052621 0.06382708 0.03420876\n#> path:ko00052 0.06397950 0.07191146 0.04914795 0.03673800\n#>              ERR9492493 ERR9492494 ERR9492495 ERR9492496\n#> path:ko00010 0.09384163 0.05637166 0.06068150 0.02861835\n#> path:ko00020 0.08709860 0.06347143 0.08655160 0.02838112\n#> path:ko00030 0.09236281 0.06725684 0.09888781 0.06070932\n#> path:ko00040 0.09423838 0.09310127 0.09308659 0.04017714\n#> path:ko00051 0.05898339 0.06181811 0.05094572 0.04122640\n#> path:ko00052 0.06410715 0.05452204 0.14107086 0.03358680\n#>              ERR9492497 ERR9492498 ERR9492499 ERR9492500\n#> path:ko00010 0.08451250 0.03267193 0.09284024 0.06000493\n#> path:ko00020 0.06743175 0.02951531 0.09662457 0.05163185\n#> path:ko00030 0.11954092 0.04752626 0.09501196 0.12192500\n#> path:ko00040 0.09575037 0.04763954 0.09862459 0.05061098\n#> path:ko00051 0.08917651 0.04097972 0.09009920 0.09712665\n#> path:ko00052 0.10890301 0.03198491 0.04649193 0.08376906\n#>              ERR9492501 ERR9492503 ERR9492504 ERR9492505\n#> path:ko00010 0.06353951 0.07530207 0.07413198 0.03851865\n#> path:ko00020 0.06736760 0.05907952 0.08066299 0.03291251\n#> path:ko00030 0.08062611 0.10059762 0.09074628 0.06140277\n#> path:ko00040 0.05230380 0.10797610 0.05192520 0.04096908\n#> path:ko00051 0.07521150 0.06162177 0.06966618 0.03856838\n#> path:ko00052 0.07510973 0.05448280 0.08440857 0.05159773\n#>              ERR9492507 ERR9492509 ERR9492510 ERR9492511\n#> path:ko00010 0.04408184  0.1101960 0.06831861 0.04457377\n#> path:ko00020 0.03055716  0.1122648 0.05686148 0.03786649\n#> path:ko00030 0.05901192  0.2060442 0.07937786 0.06227169\n#> path:ko00040 0.04993012  0.1811532 0.12112892 0.06357970\n#> path:ko00051 0.03501170  0.1072305 0.09978821 0.04688276\n#> path:ko00052 0.03050457  0.1082022 0.09676729 0.05031496\n#>              ERR9492512 ERR9492513 ERR9492514 ERR9492515\n#> path:ko00010 0.05663017 0.11421784 0.08596117 0.03688230\n#> path:ko00020 0.04904705 0.09192427 0.07901509 0.04271306\n#> path:ko00030 0.07407402 0.10263472 0.11231495 0.04835473\n#> path:ko00040 0.04686250 0.10666516 0.07078609 0.05789550\n#> path:ko00051 0.04646515 0.10730369 0.07973031 0.03461777\n#> path:ko00052 0.05438493 0.07782405 0.09124815 0.04582225\n#>              ERR9492519 ERR9492521 ERR9492522 ERR9492523\n#> path:ko00010  0.2020544 0.03199985 0.11593241 0.06408050\n#> path:ko00020  0.1902600 0.02793804 0.16804823 0.07081124\n#> path:ko00030  0.1585779 0.05154594 0.11458300 0.06178188\n#> path:ko00040  0.1028053 0.04093270 0.13291912 0.07091612\n#> path:ko00051  0.1608883 0.03638188 0.25908852 0.04935026\n#> path:ko00052  0.1023709 0.02991019 0.07093243 0.05402583\n#>              ERR9492525 ERR9492526 ERR9492528\n#> path:ko00010 0.02762329 0.07007589 0.05262720\n#> path:ko00020 0.02638546 0.05562837 0.04079618\n#> path:ko00030 0.04034426 0.08332154 0.09070246\n#> path:ko00040 0.02860687 0.09845644 0.06750199\n#> path:ko00051 0.03293917 0.08427063 0.06058627\n#> path:ko00052 0.04860460 0.08358931 0.05641848"},{"path":"function.html","id":"gsea","chapter":"4 Functional annotation","heading":"4.8 GSEA","text":"gene set enrichment analysis based background KEGG PATHWAY information possible KO abundances used. doGSEA function performs GSEA gene copy number table based grouping variable set stana object. background set obtained KEGG REST API. gsea slot filled function.Note background gene set contains human disease category results taken care caution.plotGSEA function can used draw network representation species ID differential pathway specified threshold. List multiple stana objects can passed function, helps interpret inter-dataset (like diseases) differences intra-species diversity. function returns plot default, return_graph can set TRUE return tbl_graph object. Also, layout can specified layout argument.","code":"\nlibrary(clusterProfiler)\nstana <- doGSEA(stana, \"101346\")\n#> HC / R\nlibrary(dplyr);library(tidygraph);library(ggraph)\nplotGSEA(list(stana, stana), padjThreshold=0.2, layout=\"fr\")"},{"path":"visualization.html","id":"visualization","chapter":"5 Visualization","heading":"5 Visualization","text":"stana offers visualization functions can interpret profiled data.","code":"\nlibrary(stana)\nlibrary(ComplexHeatmap)"},{"path":"visualization.html","id":"plotsnvsummary-and-plotsnvinfo","chapter":"5 Visualization","heading":"5.1 plotSNVSummary and plotSNVInfo","text":"functions can used plot information related SNV, can used inspect overview profiled SNVs.","code":"\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=\"102478\")\n#>   102478\n#>   s__Clostridium_A leptum\n#>     Number of snps: 77431\n#>     Number of samples: 31\n#>   102478\n#>   s__Clostridium_A leptum\n#>     Number of genes: 150996\n#>     Number of samples: 32\nplotSNVSummary(stana, \"102478\")\nplotSNVInfo(stana, \"102478\")"},{"path":"visualization.html","id":"plotmaf","chapter":"5 Visualization","heading":"5.2 plotMAF","text":"functions plots boxplot MAF single position groups.","code":"\nplotMAF(stana, \"102478\", row.names(getSlot(stana, \"snpsInfo\")[[1]])[1])"},{"path":"visualization.html","id":"plotmafhist","chapter":"5 Visualization","heading":"5.3 plotMAFHist","text":"functions plots histogram MAF candidate species.","code":"\nplotMAFHist(stana, \"102478\")\n#> `stat_bin()` using `bins = 30`. Pick better value with\n#> `binwidth`.\n#> Warning: Removed 96409 rows containing non-finite values\n#> (`stat_bin()`)."},{"path":"visualization.html","id":"plotcoverage","chapter":"5 Visualization","heading":"5.4 plotCoverage","text":"function plots coverage canddiate species across group.","code":"\nplotCoverage(stana, \"102478\")"},{"path":"visualization.html","id":"plotpca","chapter":"5 Visualization","heading":"5.5 plotPCA","text":"can plot principal component analysis results using prcomp plotPCA function across grouping specified. group specified, No_Group label assigned samples.","code":"\nmt <- loadmetaSNV(\"../metasnv_sample_out/\",just_species = TRUE)\nmt <- loadmetaSNV(\"../metasnv_sample_out/\", candSp=mt[1])\n#>   Loading refGenome1clus\nplotPCA(mt, species=getID(mt)[1])\n#> After filtering: 1022 SNVs\n#> $refGenome1clus"},{"path":"visualization.html","id":"plotdist","chapter":"5 Visualization","heading":"5.6 plotDist","text":"Plot heatmap distance matrix grouping variables using pheatmap.Plot using subset SNV.","code":"\nlibrary(pheatmap)\n#> Warning: package 'pheatmap' was built under R version 4.3.3\n#> \n#> Attaching package: 'pheatmap'\n#> The following object is masked from 'package:ComplexHeatmap':\n#> \n#>     pheatmap\nplotDist(stana, \"102478\", target=\"snps\")\n#> # Performing dist in 102478 target is snps\nstana <- siteFilter(stana, \"102478\", site_type==\"4D\")\n#> # total of 27533 obtained from 77431\nplotDist(stana, \"102478\", target=\"snps\")\n#> # Performing dist in 102478 target is snps\n#> # The set SNV ID information (27533) is used."},{"path":"visualization.html","id":"plotcirclize","chapter":"5 Visualization","heading":"5.7 plotCirclize","text":"function can used circlize plot, can link information related MAF SNV gene copy number analysis. function needs snpsInfo slot filled data genome_id, gene_id position column. MIDAS2 inStrain, packge automatically infers genome_id.","code":"\nlibrary(circlize)\n#> Warning: package 'circlize' was built under R version 4.3.3\n#> ========================================\n#> circlize version 0.4.16\n#> CRAN page: https://cran.r-project.org/package=circlize\n#> Github page: https://github.com/jokergoo/circlize\n#> Documentation: https://jokergoo.github.io/circlize_book/book/\n#> \n#> If you use it in published research, please cite:\n#> Gu, Z. circlize implements and enhances circular visualization\n#>   in R. Bioinformatics 2014.\n#> \n#> This message can be suppressed by:\n#>   suppressPackageStartupMessages(library(circlize))\n#> ========================================\n#> \n#> Attaching package: 'circlize'\n#> The following object is masked from 'package:igraph':\n#> \n#>     degree\nplotCirclize(stana, \"102478\", genomeId=\"UHGG143505\", thresh_snp_gene = 150)\n#> Type is MIDAS2\n#> Features not provided, default to sample_counts\n#> Genome ID in SNV information:\n#>   UHGG143505_1: 179 - 5439351, number of position: 77431\n#> Genome ID: UHGG143505\n#> Included position: 987\n#> Note: 1 point is out of plotting region in sector\n#> 'UHGG143505_00169', track '1'.\n#> Note: 16 points are out of plotting region in sector\n#> 'UHGG143505_00169', track '1'.\n#> Note: 1 point is out of plotting region in sector\n#> 'UHGG143505_01855', track '1'.\n#> Note: 16 points are out of plotting region in sector\n#> 'UHGG143505_01855', track '1'.\n#> Note: 1 point is out of plotting region in sector\n#> 'UHGG143505_01894', track '1'.\n#> Note: 16 points are out of plotting region in sector\n#> 'UHGG143505_01894', track '1'.\n#> Note: 1 point is out of plotting region in sector\n#> 'UHGG143505_02021', track '1'.\n#> Note: 16 points are out of plotting region in sector\n#> 'UHGG143505_02021', track '1'.\n#> Note: 1 point is out of plotting region in sector\n#> 'UHGG143505_03685', track '1'.\n#> Note: 16 points are out of plotting region in sector\n#> 'UHGG143505_03685', track '1'."},{"path":"visualization.html","id":"visualization-of-gene-copy-numbers","chapter":"5 Visualization","heading":"5.8 Visualization of gene copy numbers","text":"violin plot gene copy numbers can plotted plotGenes.Default color mapping can changed changeColors.","code":"\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=\"102478\")\n#>   102478\n#>   s__Clostridium_A leptum\n#>     Number of snps: 77431\n#>     Number of samples: 31\n#>   102478\n#>   s__Clostridium_A leptum\n#>     Number of genes: 150996\n#>     Number of samples: 32\nplotGenes(stana, \"102478\", c(\"UHGG000186_00531\",\"UHGG000186_00521\"))\nstana <- changeColors(stana, c(\"blue\",\"red\"))\nplotGenes(stana, \"102478\", c(\"UHGG000186_00531\",\"UHGG000186_00521\"))"},{"path":"visualization.html","id":"visualization-of-phylogenetic-tree","chapter":"5 Visualization","heading":"5.9 Visualization of phylogenetic tree","text":"See 3.1 functions like inferAndPlotTree visualizing phylogenetic tree inferred various methods.","code":""},{"path":"visualization.html","id":"visualization-of-functional-analysis-results","chapter":"5 Visualization","heading":"5.10 Visualization of functional analysis results","text":"See 4 functions like plotHeatmap plotKEGGPathway.","code":""},{"path":"visualization.html","id":"visualization-of-instrain-results","chapter":"5 Visualization","heading":"5.11 Visualization of inStrain results","text":"specific software, imported inStrain compare profiles can visualized. loaded genome-wide comparison table strain cluster table can visualized using genomeHeatmap strainClusterHeatmap ComplexHeatmap. genomeHeatmap, typically population ANI consensus ANI plotted, columns listed genomeWide_compare.tsv can plotted. parameters passed Heatmap can specified heatmapArgs. cluster information (getCl(stana)) available cl specified, columns split present grouping. Please refer documentation inStrain popANI conANI.","code":"\ninstr_chk <- \"GUT_GENOME142015\"\ninstr <- loadInStrain(\"../inStrain_out\", instr_chk)\ngenomeHeatmap(instr, instr_chk, column = \"popANI\", heatmapArgs = list(show_column_name=FALSE))\nstrainClusterHeatmap(instr, instr_chk, heatmapArgs = list(show_column_name=FALSE))"},{"path":"interactive-inspection.html","id":"interactive-inspection","chapter":"6 Interactive inspection","heading":"6 Interactive inspection","text":"stana offers interactive inspection metagenotyping results examining intra-species diversity.purpose, exportInteractive() function prepared. expects gene family (KO) abundance tables set kos slot, tree set treeList slot using functions like consensusSeq. However, available, gene copy number table alone can used export interactive application. function outputs necessary data shiny codes specified directory run app.example resulting interactive application can found .","code":"\nlibrary(stana)\nload(system.file(\"extdata\", \"sysdata.rda\", package = \"stana\"))\n## Default to export to the current directory\nexportInteractive(stana)\n#> Warning in dir.create(paste0(out, \"/data\")): '.\\data'\n#> already exists\n#> No tree for 100003\n#> Tree number: 0, KO (or gene) number: 1\n#> Exporting ...\n#> # A stana: MIDAS2\n#> # Database: uhgg\n#> # Loaded directory: midas2_sample_merge_uhgg\n#> # Species number: 1\n#> # Group info (list): Group1/Group2\n#> # Loaded SNV table: 1 ID: 100003\n#> # Loaded gene table: 1 ID: 100003\n#> # Loaded KO table: 1 ID: 100003\n#> # Size: 7623792 B"},{"path":"analysis-example-of-gut-microbiome-of-esrd-patients.html","id":"analysis-example-of-gut-microbiome-of-esrd-patients","chapter":"7 Analysis example of gut microbiome of ESRD patients","heading":"7 Analysis example of gut microbiome of ESRD patients","text":"examine dataset investigating gut microbiome ESRD patients (Zhang et al. 2023) using stana. SNV profiled MIDAS2 pipeline, loaded stana object. time, investigate one profiled species, Faecalicatena gnavus genotyping results.Load MIDAS2 merge results stana object setting clinical grouping.Get brief overview SNVs.Based SNV related statistics SNV, consensus multiple sequence alignment made consensusSeq function. can accessed getFasta function.Based MSA, phylogenetic tree can inferred inferAndPlotTree. Inferring function can specified treeFun default upgma function phangorn, can stated functions. tree plot shows cladogram default, can overridden branch.length argument passed ggtree.Using cophenetic distance matrix tree, PERMANOVA performed principal coordinate analysis plot based distance matrix plotted.Based results, assuming multiple factors within species, can directly examine estimated abundances functional implications using NMF approach KO table. First calculate KO abundances based eggNOG-mapper annotation.Subsequently, using cross-validation approach replacing random variables NA, estimate rank based KO tables. function NNLM used compute loss (mse) replacing 30% data NA.Based information, factor number two selected.Using two factors, summarize KO abundance information KEGG PATHWAY information, plot relationship pathway abundance within two factors scatter plot heatmap.\n, cysteine methionine metabolism pathway interesting pathway reported related species. KEGG PATHWAY scheme pathway plotted ggkegg (group comparison, use plotKEGGPathway. returned object ggplot object users can modify visualization stacking layers).colors nodes left-side abundance factor 1 right side factor 2.map, can find interesting findings like one enzymes AdoMet synthetase (2.5.1.6, indicated red rectangle), enriched factor 2, factor 2 elevated HD. corresponding enzyme reported relation hemodialysis (Loehrer et al. 1998.). results suggest library function can link intra-species diversity clinical factors R environment.species information also interesting load five species. HD binary grouping information.Subsequently, perform GSEA species doGSEA function.plot result inter-species differences statistically significant pathways.Finally, results can exported interactive inspection exportInteractive function sharing researchers.","code":"\nlibrary(dplyr)\nlibrary(stana)\n\nmeta <- read.table(\"../clinical/HDSubset/metadata.tsv\", sep=\"\\t\", header=1)\nhd <- meta$Run %>% setNames(meta$Group)\ncl <- split(hd, names(hd))\ncl <- lapply(cl, unname)\ncand_species <- \"101380\"\nstana <- loadMIDAS2(\"../clinical/HDSubset\", candSp=cand_species, cl=cl, db=\"uhgg\")\n#>   101380\n#>   g__Faecalicatena;s__Faecalicatena gnavus\n#>     Number of snps: 26540\n#>     Number of samples: 102\n#>   101380\n#>   g__Faecalicatena;s__Faecalicatena gnavus\n#>     Number of genes: 59925\n#>     Number of samples: 124\nstana <- changeColors(stana, c(\"steelblue\",\"gold\",\"tomato\"))\nstana\n#> # A stana: MIDAS2\n#> # Database: uhgg\n#> # Loaded directory: ../clinical/HDSubset\n#> # Species number: 1\n#> # Group info (list): CKD/HC/HD\n#> # Loaded SNV table: 1 ID: 101380\n#> # Loaded gene table: 1 ID: 101380\n#> # Size: 108701536 B\nplotSNVInfo(stana, cand_species)\nplotSNVSummary(stana, cand_species) +\n    scale_y_log10()\nstana <- consensusSeq(stana, cand_species)\n#> # Beginning calling for 101380\n#> # Original Site number: 26540\n#> #  Profiled samples: 102\n#> #  Included samples: 102\ngetFasta(stana)[[cand_species]]\n#> 102 sequences with 24641 character and 24559 different site patterns.\n#> The states are a c g t\nstana <- inferAndPlotTree(stana, cand_species, target=\"fasta\", treeFun=\"FastTree\")\n#> File already exists!\n#> Tree file already exists!\ngetTree(stana)[[cand_species]]\n#> \n#> Phylogenetic tree with 102 tips and 100 internal nodes.\n#> \n#> Tip labels:\n#>   ERR11865846, ERR11865866, ERR11865898, ERR11865921, ERR11865925, ERR11865952, ...\n#> \n#> Unrooted; includes branch lengths.\ngetTreePlot(stana)[[cand_species]]\nstana <- doAdonis(stana, cand_species, target=\"tree\", pcoa=TRUE)\n#> # Performing adonis in 101380 target is tree\n#> Warning in att$heading[2] <- deparse(match.call(),\n#> width.cutoff = 500L): number of items to replace is not a\n#> multiple of replacement length\n#> #  F: 2.70213130791564, R2: 0.0517628541251898, Pr: 0.024\ngetAdonis(stana)[[cand_species]]\n#> Permutation test for adonis under reduced model\n#> Terms added sequentially (first to last)\n#> Permutation: free\n#> Number of permutations: 999\n#> \n#> adonis2(formula = d ~ ., data = structure(list(group = c(\"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"CKD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \"HD\", \n#>           Df SumOfSqs      R2      F Pr(>F)  \n#> group      2   0.2860 0.05176 2.7021  0.024 *\n#> Residual  99   5.2391 0.94824                \n#> Total    101   5.5251 1.00000                \n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nstana <- setAnnotation(stana,\n                       annotList=list(\"101380\"=\"../annotations_uhgg/101380_eggnog_out.emapper.annotations\"))\nstana <- calcGF(stana, candSp=cand_species)\nlibrary(NNLM)\ncvl <- list()\nfor (i in seq_len(5)) {\n  cvl[[i]] <- NMF(stana, cand_species, nnlm_flag=TRUE,\n                  nnlm_args=list(\"loss\"=\"mse\"),\n                  estimate=TRUE, tss=TRUE)[1,]\n}\n#> # NMF started 101380, target: kos, method: NNLM::nnmf\n#> # Original features: 2568\n#> # Original samples: 124\n#> # Original matrix NA: NA\n#> # Original matrix zero: 0.487\n#> # Performing TSS\n#> # Filtered features: 2568\n#> # Filtered samples: 124\n#> # NNLM flag enabled, the error matrix only will be returned.\n#> # NMF started 101380, target: kos, method: NNLM::nnmf\n#> # Original features: 2568\n#> # Original samples: 124\n#> # Original matrix NA: NA\n#> # Original matrix zero: 0.487\n#> # Performing TSS\n#> # Filtered features: 2568\n#> # Filtered samples: 124\n#> # NNLM flag enabled, the error matrix only will be returned.\n#> # NMF started 101380, target: kos, method: NNLM::nnmf\n#> # Original features: 2568\n#> # Original samples: 124\n#> # Original matrix NA: NA\n#> # Original matrix zero: 0.487\n#> # Performing TSS\n#> # Filtered features: 2568\n#> # Filtered samples: 124\n#> # NNLM flag enabled, the error matrix only will be returned.\n#> # NMF started 101380, target: kos, method: NNLM::nnmf\n#> # Original features: 2568\n#> # Original samples: 124\n#> # Original matrix NA: NA\n#> # Original matrix zero: 0.487\n#> # Performing TSS\n#> # Filtered features: 2568\n#> # Filtered samples: 124\n#> # NNLM flag enabled, the error matrix only will be returned.\n#> # NMF started 101380, target: kos, method: NNLM::nnmf\n#> # Original features: 2568\n#> # Original samples: 124\n#> # Original matrix NA: NA\n#> # Original matrix zero: 0.487\n#> # Performing TSS\n#> # Filtered features: 2568\n#> # Filtered samples: 124\n#> # NNLM flag enabled, the error matrix only will be returned.\n\ndo.call(rbind, cvl) %>% data.frame(check.names=FALSE) %>% mutate(group=1:5) %>%\n  tidyr::pivot_longer(1:6) %>% ggplot(aes(x=name, y=value))+\n  geom_boxplot() + cowplot::theme_cowplot() + xlab(\"rank\")\nset.seed(1)\nstana <- NMF(stana, cand_species, rank=2,\n    nnlm_flag=TRUE, nnlm_args=list(\"loss\"=\"mse\"))\n#> # NMF started 101380, target: kos, method: NNLM::nnmf\n#> # Original features: 2568\n#> # Original samples: 124\n#> # Original matrix NA: NA\n#> # Original matrix zero: 0.487\n#> # Filtered features: 2568\n#> # Filtered samples: 124\n#> # Rank 2\n#> Mean relative abundances: 0.5826988 0.4173012 \n#> Present feature per factor: 2231 2394\n\n## Plot the results\nplotAbundanceWithinSpecies(stana, cand_species, by=\"coef\")\nplotStackedBarPlot(stana, cand_species, by=\"coef\") + scale_fill_manual(values=c(\"tomato\",\"gold\"))\n#> Using sample, group as id variables\nlibrary(ggrepel)\npw <- data.frame(pathwayWithFactor(stana, cand_species, tss=TRUE, change_name=TRUE,\n    mat = getSlot(stana, \"NMF\")[[cand_species]]$W))\ncolnames(pw) <- c(\"1\",\"2\")\npw[[\"name\"]] <- row.names(pw)\npw[[\"size\"]] <- (pw[,1] + pw[,2])/2\nggplot(pw, aes(x=pw[,1], y=pw[,2]))+\n    geom_point(aes(size=size))+\n    geom_text_repel(aes(label=name, size=size), bg.colour=\"white\")+\n    geom_smooth(method=lm, se=TRUE)+xlab(\"1\")+ylab(\"2\")+\n    cowplot::theme_cowplot()\n#> `geom_smooth()` using formula = 'y ~ x'\n#> Warning: ggrepel: 225 unlabeled data points (too many\n#> overlaps). Consider increasing max.overlaps\n\n## Sort by absolute difference\nfc <- pw[,1] - pw[,2]\nnames(fc) <- pw[[\"name\"]]\nnms <- names(sort(abs(fc[!is.infinite(fc)]), decreasing=TRUE) %>% head(40))\n\nlibrary(pheatmap)\n#> Warning: package 'pheatmap' was built under R version 4.3.3\npheatmap(pw[nms, 1:2])\n## Built-in `plotKEGGPathway` function. The statistics to be shown is moderated t-value\n# kegg <- plotKEGGPathway(stana, cand_species,\n#                         pathway_id=\"ko00270\",\n#                         statMethod=\"mod.t\")\n\nlibrary(ggkegg)\nlibrary(tidygraph)\n\npp <- ggkegg::pathway(\"ko00270\") %N>% \n    mutate(\n        f1=ggkegg::node_numeric(getSlot(stana, \"NMF\")[[cand_species]]$W[,1]),\n        f2=ggkegg::node_numeric(getSlot(stana, \"NMF\")[[cand_species]]$W[,2])\n    )\n\ngg <- ggraph(pp, layout=\"manual\", x=x, y=y)+\n    geom_node_rect(aes(fill=f1, xmin=xmin, xmax=x, filter=type==\"ortholog\"))+\n    geom_node_rect(aes(fill=f2, xmin=x, xmax=xmax, filter=type==\"ortholog\"))+\n    scale_fill_gradient(low=\"blue\",high=\"pink\", name=\"abundance\")+\n    overlay_raw_map() +\n    stamp(\"ko:K00789\")+\n    theme_void()\ngg\nmeta <- read.table(\"../clinical/HDSubset/metadata.tsv\", sep=\"\\t\", header=1)\nhd <- meta$Run %>% setNames(meta$HDorNot)\ncl <- split(hd, names(hd))\ncl <- lapply(cl, unname)\ncands <- c(\"102545\",\"101380\",\"101338\",\"102478\",\"101337\")\nstana <- loadMIDAS2(\"../clinical/HDSubset\", candSp=cands, cl=cl, db=\"uhgg\")\n#>   101337\n#>   g__Bacteroides;s__Bacteroides fragilis\n#>     Number of snps: 24483\n#>     Number of samples: 83\n#>   101338\n#>   g__Blautia_A;s__Blautia_A wexlerae\n#>     Number of snps: 24297\n#>     Number of samples: 162\n#>   101380\n#>   g__Faecalicatena;s__Faecalicatena gnavus\n#>     Number of snps: 26540\n#>     Number of samples: 102\n#>   102478\n#>   g__Bacteroides_B;s__Bacteroides_B dorei\n#>     Number of snps: 77057\n#>     Number of samples: 216\n#>   102545\n#>   g__Faecalibacterium;s__Faecalibacterium prausnitzii_G\n#>     Number of snps: 9443\n#>     Number of samples: 111\n#>   101337\n#>   g__Bacteroides;s__Bacteroides fragilis\n#>     Number of genes: 56742\n#>     Number of samples: 94\n#>   101338\n#>   g__Blautia_A;s__Blautia_A wexlerae\n#>     Number of genes: 138535\n#>     Number of samples: 197\n#>   101380\n#>   g__Faecalicatena;s__Faecalicatena gnavus\n#>     Number of genes: 59925\n#>     Number of samples: 124\n#>   102478\n#>   g__Bacteroides_B;s__Bacteroides_B dorei\n#>     Number of genes: 244846\n#>     Number of samples: 230\n#>   102545\n#>   g__Faecalibacterium;s__Faecalibacterium prausnitzii_G\n#>     Number of genes: 75257\n#>     Number of samples: 137\nstana\n#> # A stana: MIDAS2\n#> # Database: uhgg\n#> # Loaded directory: ../clinical/HDSubset\n#> # Species number: 5\n#> # Group info (list): False/True\n#> # Loaded SNV table: 5 ID: 101337\n#> # Loaded gene table: 5 ID: 101337\n#> # Size: 1287108048 B\n## Set annotation for genes to KOs\nstana <- setAnnotation(stana,\n                       annotList=list(\"102545\"=\"../annotations_uhgg/102545_eggnog_out.emapper.annotations\",\n                                      \"101380\"=\"../annotations_uhgg/101380_eggnog_out.emapper.annotations\",\n                                      \"101338\"=\"../annotations_uhgg/101338_eggnog_out.emapper.annotations\",\n                                      \"102478\"=\"../annotations_uhgg/102478_eggnog_out.emapper.annotations\",\n                                      \"101337\"=\"../annotations_uhgg/101337_eggnog_out.emapper.annotations\"))\nlibrary(clusterProfiler)\nfor (cs in cands) {\n  cat(cs, \"\\n\")\n  stana <- doGSEA(stana, candSp=cs)\n}\n#> 102545 \n#> False / True \n#> KO abundance not found, calculating based on annotation ...\n#> 101380 \n#> False / True \n#> KO abundance not found, calculating based on annotation ...\n#> 101338 \n#> False / True \n#> KO abundance not found, calculating based on annotation ...\n#> 102478 \n#> False / True \n#> KO abundance not found, calculating based on annotation ...\n#> 101337 \n#> False / True \n#> KO abundance not found, calculating based on annotation ...\nplotGSEA(stana, padjThreshold=0.1)\nexportInteractive(stana)\n#> Warning in dir.create(paste0(out, \"/data\")): '.\\data'\n#> already exists\n#> No tree for 101337\n#> No tree for 101338\n#> No tree for 101380\n#> No tree for 102478\n#> No tree for 102545\n#> Tree number: 0, KO (or gene) number: 5\n#> Exporting ...\n#> # A stana: MIDAS2\n#> # Database: uhgg\n#> # Loaded directory: ../clinical/HDSubset\n#> # Species number: 5\n#> # Group info (list): False/True\n#> # Loaded SNV table: 5 ID: 101337\n#> # Loaded gene table: 5 ID: 101337\n#> # Loaded KO table: 5 ID: 102545\n#> # Size: 1310031856 B"}]
