[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"documentation R package stana. stana developed analysis intra-species diversity R environment.","code":""},{"path":"index.html","id":"motivation","chapter":"1 About","heading":"1.1 Motivation","text":"Computational pipelines developed illuminate intra-species diversity, derived single nucleotide variants (SNVs) gene contents species. However, limited software performing integrated analyses, resulting unprepared environment. developed R package named stana, integrate analyse data generated metagenomic sequences. package allows necessary preprocessing, functional analysis, statistical analysis, visualization results.","code":""},{"path":"importing.html","id":"importing","chapter":"2 Importing","heading":"2 Importing","text":"stana aimed import metagenotyping results various pipelines.\npackage designed primarily MIDAS MIDAS2, outputs \ngene abundances default. Note slot name snps refers just variable, reflect actual meaning.","code":"\nlibrary(stana)\n#> "},{"path":"importing.html","id":"midas","chapter":"2 Importing","heading":"2.1 MIDAS","text":"MIDAS, loadMIDAS function can used import output merge command.","code":""},{"path":"importing.html","id":"midas2","chapter":"2 Importing","heading":"2.2 MIDAS2","text":"MIDAS2, loadMIDAS2 function can used import output merge command.\n, load example dataset deposited study investigating gut microbiome hemodialysis patients (Shi et al. 2022). hd_meta includes named list grouping.can check stats many samples profiled species, only_stat. returns list tibbles names snps genes.long output expected, one species loaded .data profiled UHGG. loadSummary loadInfo can specified load SNV summary SNV info per species, default TRUE.ID conversion, metadata accompanied default database can used.taxonomy table can loaded providing taxtbl argument.coverage species per sample plotted plotCoverage","code":"\nload(\"../hd_meta.rda\")\nhd_meta\n#> $HC\n#>  [1] \"ERR9492498\" \"ERR9492502\" \"ERR9492507\" \"ERR9492508\"\n#>  [5] \"ERR9492512\" \"ERR9492497\" \"ERR9492499\" \"ERR9492501\"\n#>  [9] \"ERR9492504\" \"ERR9492505\" \"ERR9492509\" \"ERR9492511\"\n#> [13] \"ERR9492500\" \"ERR9492503\" \"ERR9492506\" \"ERR9492510\"\n#> \n#> $R\n#>  [1] \"ERR9492489\" \"ERR9492490\" \"ERR9492492\" \"ERR9492494\"\n#>  [5] \"ERR9492519\" \"ERR9492524\" \"ERR9492526\" \"ERR9492527\"\n#>  [9] \"ERR9492528\" \"ERR9492513\" \"ERR9492514\" \"ERR9492518\"\n#> [13] \"ERR9492520\" \"ERR9492522\" \"ERR9492523\" \"ERR9492525\"\n#> [17] \"ERR9492491\" \"ERR9492493\" \"ERR9492495\" \"ERR9492496\"\n#> [21] \"ERR9492515\" \"ERR9492516\" \"ERR9492517\" \"ERR9492521\"\nstana <- loadMIDAS2(\"../merge_uhgg\", only_stat=TRUE, cl=hd_meta)\nstana$snps |> dplyr::filter(group==\"HC\") |> dplyr::arrange(desc(n)) |> head()\n#> # A tibble: 6 × 3\n#> # Groups:   species_id [6]\n#>   species_id group     n\n#>        <int> <chr> <int>\n#> 1     101346 HC       12\n#> 2     102438 HC       10\n#> 3     101378 HC        9\n#> 4     102478 HC        9\n#> 5     102492 HC        8\n#> 6     100044 HC        7\nstana <- loadMIDAS2(\"../merge_uhgg\", candSp=\"100002\", cl=hd_meta)\n#> SNPS\n#>   100002\n#>     Number of snps: 2058\n#>     Number of samples: 5\n#>       Number of samples in HC: 1\n#>       Number of samples in R: 4\n#>       Not passed the filter\n#> Genes\n#>   100002\n#>     Number of genes: 23427\n#>     Number of samples: 7\n#>       Number of samples in HC: 1\n#>       Number of samples in R: 6\n#>       Not passed the filter\nstana@snps$`100002` |> head()\n#>                                 ERR9492497 ERR9492515\n#> gnl|Prokka|UHGG000004_1|2901|A           1          1\n#> gnl|Prokka|UHGG000004_1|4071|C           1          0\n#> gnl|Prokka|UHGG000004_1|11094|T          1          0\n#> gnl|Prokka|UHGG000004_1|11148|T          1          0\n#> gnl|Prokka|UHGG000004_1|11940|G          0          0\n#> gnl|Prokka|UHGG000004_1|11970|C          0          0\n#>                                 ERR9492526 ERR9492527\n#> gnl|Prokka|UHGG000004_1|2901|A           0      0.429\n#> gnl|Prokka|UHGG000004_1|4071|C           1      0.000\n#> gnl|Prokka|UHGG000004_1|11094|T          0      0.000\n#> gnl|Prokka|UHGG000004_1|11148|T          0      0.429\n#> gnl|Prokka|UHGG000004_1|11940|G          1      0.444\n#> gnl|Prokka|UHGG000004_1|11970|C          1      0.556\n#>                                 ERR9492528\n#> gnl|Prokka|UHGG000004_1|2901|A           0\n#> gnl|Prokka|UHGG000004_1|4071|C           0\n#> gnl|Prokka|UHGG000004_1|11094|T          1\n#> gnl|Prokka|UHGG000004_1|11148|T          1\n#> gnl|Prokka|UHGG000004_1|11940|G          0\n#> gnl|Prokka|UHGG000004_1|11970|C          0\nstana@freqTableSnps |> head()\n#>        species HC R\n#> 100002  100002  1 4\ntaxtbl <- read.table(\"../metadata_uhgg.tsv\", sep=\"\\t\",\n                     header=1, row.names=1, check.names = FALSE)\ntaxtbl |> head()\n#>          representative MGnify_accession species_closest\n#> 100001 GUT_GENOME000001  MGYG-HGUT-00001          100049\n#> 100002 GUT_GENOME000004  MGYG-HGUT-00002          100201\n#> 100003 GUT_GENOME000008  MGYG-HGUT-00003          103279\n#> 100004 GUT_GENOME000010  MGYG-HGUT-00004          103876\n#> 100005 GUT_GENOME000017  MGYG-HGUT-00005          101623\n#> 100006 GUT_GENOME000020  MGYG-HGUT-00006          100011\n#>        ani_closest gtpro_kmer_counts phyeco_marker_counts\n#> 100001    83.35600                NA                   15\n#> 100002    84.86955             29822                   15\n#> 100003    93.41555              1115                   15\n#> 100004    78.17620                NA                   15\n#> 100005    85.84275                NA                   15\n#> 100006    93.07075                NA                   15\n#>        phyeco_pass_ratio pangene_counts genome_counts\n#> 100001                 1           4893             4\n#> 100002                 1         147601           358\n#> 100003                 1         113409          1178\n#> 100004                 1          12599            24\n#> 100005                 1           5488             2\n#> 100006                 1           2656             1\n#>        Genome_type  Length N_contigs    N50 GC_content\n#> 100001     Isolate 3219614       137  47258      28.26\n#> 100002     Isolate 4433090       100 109266      42.60\n#> 100003     Isolate 3229507        35 158570      58.52\n#> 100004     Isolate 3698872       105  90296      54.19\n#> 100005     Isolate 3930422        32 350032      28.59\n#> 100006     Isolate 2822523        36 121380      32.65\n#>        Completeness Contamination\n#> 100001        98.59          0.70\n#> 100002        99.37          0.00\n#> 100003       100.00          0.00\n#> 100004        98.66          0.22\n#> 100005        99.30          0.00\n#> 100006        99.26          1.39\n#>                                                                                                                                                Lineage\n#> 100001                                 d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Peptostreptococcales;f__Peptostreptococcaceae;g__GCA-900066495;s__\n#> 100002                            d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Lachnospirales;f__Lachnospiraceae;g__Blautia_A;s__Blautia_A sp900066165\n#> 100003                                   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Rikenellaceae;g__Alistipes;s__Alistipes shahii\n#> 100004                   d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Oscillospirales;f__Ruminococcaceae;g__Anaerotruncus;s__Anaerotruncus colihominis\n#> 100005 d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Peptostreptococcales;f__Peptostreptococcaceae;g__Terrisporobacter;s__Terrisporobacter glycolicus_A\n#> 100006                       d__Bacteria;p__Firmicutes;c__Bacilli;o__Staphylococcales;f__Staphylococcaceae;g__Staphylococcus;s__Staphylococcus xylosus\n#>        Continent\n#> 100001    Europe\n#> 100002    Europe\n#> 100003    Europe\n#> 100004    Europe\n#> 100005    Europe\n#> 100006    Europe\nloadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=\"100002\", taxtbl=taxtbl, db=\"uhgg\")\n#> SNPS\n#>   100002\n#>   d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Lachnospirales;f__Lachnospiraceae;g__Blautia_A;s__Blautia_A sp900066165\n#>     Number of snps: 2058\n#>     Number of samples: 5\n#>       Number of samples in HC: 1\n#>       Number of samples in R: 4\n#>       Not passed the filter\n#> Genes\n#>   100002\n#>   d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Lachnospirales;f__Lachnospiraceae;g__Blautia_A;s__Blautia_A sp900066165\n#>     Number of genes: 23427\n#>     Number of samples: 7\n#>       Number of samples in HC: 1\n#>       Number of samples in R: 6\n#>       Not passed the filter\n#> Type: MIDAS2\n#> Directory: ../merge_uhgg\n#> Species number: 1\n#> Filter type: group, number: 2, proportion: 0.8\n#> Loaded SNV table: 1\n#>   Species cleared SNV filter: 0\n#> Loaded gene table (copynum): 1\n#>   Species cleared gene filter: 0\n#> 4.2 Mb\nplotCoverage(stana, \"100002\", pointSize=5)"},{"path":"importing.html","id":"instrain","chapter":"2 Importing","heading":"2.3 inStrain","text":"inStrain, need compare command output, profile command. First like know species profiled. just_species option list species table. , load example dataset profiled inStrain, using default database described original tutorial. inStrain, loading SNV tables often impossible, must specify candidate_species investigation.recalculates minor allele frequency based pooled SNV information (individual SNV information), thus takes long time case number profiled positions large. can set cl argument needed.","code":"\nsp <- loadInStrain(\"../inStrain_out\", just_species=TRUE)\nsp\n#>  [1] \"GUT_GENOME000022\" \"GUT_GENOME000024\"\n#>  [3] \"GUT_GENOME000147\" \"GUT_GENOME000220\"\n#>  [5] \"GUT_GENOME000221\" \"GUT_GENOME000224\"\n#>  [7] \"GUT_GENOME000225\" \"GUT_GENOME000231\"\n#>  [9] \"GUT_GENOME000509\" \"GUT_GENOME007566\"\n#> [11] \"GUT_GENOME009103\" \"GUT_GENOME031782\"\n#> [13] \"GUT_GENOME034989\" \"GUT_GENOME044231\"\n#> [15] \"GUT_GENOME067546\" \"GUT_GENOME068725\"\n#> [17] \"GUT_GENOME080972\" \"GUT_GENOME090701\"\n#> [19] \"GUT_GENOME094995\" \"GUT_GENOME096045\"\n#> [21] \"GUT_GENOME096080\" \"GUT_GENOME096083\"\n#> [23] \"GUT_GENOME096473\" \"GUT_GENOME096573\"\n#> [25] \"GUT_GENOME102034\" \"GUT_GENOME103721\"\n#> [27] \"GUT_GENOME104570\" \"GUT_GENOME109880\"\n#> [29] \"GUT_GENOME112794\" \"GUT_GENOME113322\"\n#> [31] \"GUT_GENOME114679\" \"GUT_GENOME115272\"\n#> [33] \"GUT_GENOME115357\" \"GUT_GENOME116258\"\n#> [35] \"GUT_GENOME116897\" \"GUT_GENOME117271\"\n#> [37] \"GUT_GENOME132077\" \"GUT_GENOME135463\"\n#> [39] \"GUT_GENOME140076\" \"GUT_GENOME142015\"\n#> [41] \"GUT_GENOME142390\" \"GUT_GENOME143131\"\n#> [43] \"GUT_GENOME143211\" \"GUT_GENOME143348\"\n#> [45] \"GUT_GENOME143497\" \"GUT_GENOME143505\"\n#> [47] \"GUT_GENOME149497\" \"GUT_GENOME156849\"\n#> [49] \"GUT_GENOME174809\" \"GUT_GENOME175554\"\n#> [51] \"GUT_GENOME189814\" \"GUT_GENOME195293\"\n#> [53] \"GUT_GENOME208589\" \"GUT_GENOME210309\"\n#> [55] \"GUT_GENOME210710\" \"GUT_GENOME217823\"\n#> [57] \"GUT_GENOME217842\" \"GUT_GENOME217850\"\n#> [59] \"GUT_GENOME234840\" \"GUT_GENOME252930\"\n#> [61] \"GUT_GENOME258721\" \"GUT_GENOME261411\"\n#> [63] \"GUT_GENOME272874\" \"GUT_GENOME274362\"\n#> [65] \"GUT_GENOME275708\" \"GUT_GENOME277090\"\n#> [67] \"GUT_GENOME284693\" \"GUT_GENOME286118\"\ninstr_chk <- \"GUT_GENOME142015\"\ninstr <- loadInStrain(\"../inStrain_out\", instr_chk, skip_pool=FALSE) ## Load MAF table\n#> Loading allele count table\n#> Loading key table\n#> Loading info table\n#> Candidate species: GUT_GENOME142015\n#>   Candidate key numbers: 1\n#>   Dimension of pooled SNV table for species: 2359827\n#> Calculating MAF\ninstr\n#> Type: InStrain\n#> Directory: ../inStrain_out\n#> Species number: 68\n#> Loaded SNV table: 1\n#> Loaded gene table (): 0\n#> 70.4 Mb"},{"path":"importing.html","id":"metasnv","chapter":"2 Importing","heading":"2.4 metaSNV","text":"","code":""},{"path":"statistial-analysis.html","id":"statistial-analysis","chapter":"3 Statistial analysis","heading":"3 Statistial analysis","text":"stana provides functions perform statistical analysis based loaded data.","code":"\nlibrary(stana)\nlibrary(phangorn)\nlibrary(ggtree)\n## Examine sample object\nload(system.file(\"extdata\", \"sysdata.rda\", package = \"stana\"))"},{"path":"statistial-analysis.html","id":"consensus-sequence-calling","chapter":"3 Statistial analysis","heading":"3.1 Consensus sequence calling","text":"consensus sequence calling can performed MIDAS MIDAS2 output. implementation based call_consensus.py script available MIDAS. use pair-wise distances sequences calculated dist.ml default amino acid model (JC69), performs neighbor-joining tree estimation NJ.","code":"\nstana <- consensusSeqMIDAS2(stana, species=\"100003\", verbose=FALSE)\n#> Beginning calling for 100003\n#>   Site number: 5019\n#>   Outputting consensus sequence to 100003_consensus.fasta\n\n## Tree estimation and visualization by `phangorn` and `ggtree`\ndm <- dist.ml(stana@fastaList$`100003`)\ntre <- NJ(dm)\ntre <- groupOTU(tre, stana@cl)\ntp <- ggtree(tre, aes(color=.data$group),\n             layout='circular') +\n        geom_tippoint(size=3) +\n        ggtree::scale_color_manual(values=stana@colors)\ntp"},{"path":"statistial-analysis.html","id":"permanova","chapter":"3 Statistial analysis","heading":"3.2 PERMANOVA","text":"Using adonis2 function vegan, one can compare distance matrix based SNV frequency gene abundances, tree-based distance specified group. target=tree specified, tree shuold stana@treeList, species name key. ape::cophenetic.phylo() used calculate distance tips based branch length. Distance method can chosen dist function stats. can specify distArg pass arguments dist. Also, distance calculated directly sequences can used. case, target='fasta' chosen, function calculate distance provided AAfunc argument.","code":"\nstana@treeList[[\"100003\"]] <- tre\nstana <- doAdonis(stana, specs = \"100003\", target=\"tree\")\n#> Performing adonis in 100003\n#>   R2: 0.0740407267582884, Pr: 0.693\nstana@adonisList[[\"100003\"]]\n#> Permutation test for adonis under reduced model\n#> Terms added sequentially (first to last)\n#> Permutation: free\n#> Number of permutations: 999\n#> \n#> adonis2(formula = d ~ gr)\n#>          Df SumOfSqs      R2      F Pr(>F)\n#> gr        1  0.15557 0.07404 0.7196  0.693\n#> Residual  9  1.94558 0.92596              \n#> Total    10  2.10115 1.00000"},{"path":"statistial-analysis.html","id":"performing-boruta","chapter":"3 Statistial analysis","heading":"3.3 Performing Boruta","text":"Boruta algorithm can run matrices obtain important marker (SNV gene) distinguishing group doBoruta function. function performs Boruta algorithm specified data returns Boruta class result., visualize important genes confirmed.","code":"\nlibrary(Boruta)\n#> Warning: package 'Boruta' was built under R version 4.2.2\nbrres <- doBoruta(stana, \"100003\")\n#> Using grouping from the slot\n#> If needed, please provide preprocessed matrix of genes to `mat`\n#> Feature number: 21806\n#> Performing Boruta\nbrres\n#> $boruta\n#> Boruta performed 99 iterations in 25.10388 secs.\n#> Tentatives roughfixed over the last 99 iterations.\n#>  9 attributes confirmed important: UHGG060667_01243,\n#> UHGG158704_01078, UHGG165139_01108, UHGG178445_00058,\n#> UHGG209319_01719 and 4 more;\n#>  21797 attributes confirmed unimportant:\n#> UHGG000008_00008, UHGG000008_00009, UHGG000008_00010,\n#> UHGG000008_00012, UHGG000008_00015 and 21792 more;\nplotGenes(stana, \"100003\",\n          brres$boruta$finalDecision[brres$boruta$finalDecision==\"Confirmed\"] |> names())+\n  ggplot2::facet_wrap(.~geneID,scales=\"free_y\")"},{"path":"function.html","id":"function","chapter":"4 Functional annotation","heading":"4 Functional annotation","text":"functional profiling, several functions prepared stana. Note functions primarily designed MIDAS MIDAS2, profile gene abundances within species default.","code":"\nlibrary(stana)\nlibrary(ComplexHeatmap)"},{"path":"function.html","id":"parsing-patric-results","chapter":"4 Functional annotation","heading":"4.1 Parsing PATRIC results","text":"","code":""},{"path":"function.html","id":"parsing-eggnog-mapper-v2-results","chapter":"4 Functional annotation","heading":"4.2 Parsing eggNOG-mapper v2 results","text":"","code":""},{"path":"function.html","id":"visualizing-function-network","chapter":"4 Functional annotation","heading":"4.2.1 Visualizing function network","text":"","code":""},{"path":"function.html","id":"kgeg-pathway-and-kegg-orthology","chapter":"4 Functional annotation","heading":"4.3 KGEG PATHWAY and KEGG ORTHOLOGY","text":"","code":""},{"path":"function.html","id":"visualization-of-kegg-pathway","chapter":"4 Functional annotation","heading":"4.3.1 Visualization of KEGG PATHWAY","text":"KEGG PATHWAY frequently used characterize metabolic function microbiome. Utilizing ggkegg, information intra-species diversity, particulary gene abundance differences, can reflected onto KEGG PATHWAY.","code":""},{"path":"function.html","id":"visualizing-differences-per-species","chapter":"4 Functional annotation","heading":"4.3.1.1 Visualizing differences per species","text":"Load profile multiple species.Next, set eggNOG-mapper v2 annotation file eggNOG slot stana object.\nway, plotKEGGPathway function automatically calculates abundance user-defined method.plotKEGGPathway can run providing stana object, species (multiple species, rectangular nodes split),\npathway ID visualize. , visualize ko00620, Pyruvate metabolism example. large annotation table, calculation takes time can provide pre-calculated KO table kos slot stana object, specify only_ko = TRUE first return KO table.default, scale . install ggh4x, multiple scales can added, specifying multi_scale argument.can provide multiple pathway IDs pathway_id, returns list plot.way, differences orthologies pathway across multiple species can readily captured.","code":"\nload(\"../hd_meta.rda\")\ntaxtbl <- read.table(\"../metadata_uhgg.tsv\", sep=\"\\t\",\n                     header=1, row.names=1, check.names = FALSE)\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=c(\"101346\",\"102438\"), taxtbl=taxtbl, db=\"uhgg\")\n#> SNPS\n#>   101346\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__Bacteroides;s__Bacteroides uniformis\n#>     Number of snps: 70178\n#>     Number of samples: 28\n#>       Number of samples in HC: 12\n#>       Number of samples in R: 16\n#>       Passed the filter\n#>   102438\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Tannerellaceae;g__Parabacteroides;s__Parabacteroides distasonis\n#>     Number of snps: 18102\n#>     Number of samples: 28\n#>       Number of samples in HC: 10\n#>       Number of samples in R: 18\n#>       Passed the filter\n#> Genes\n#>   101346\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__Bacteroides;s__Bacteroides uniformis\n#>     Number of genes: 120158\n#>     Number of samples: 31\n#>       Number of samples in HC: 13\n#>       Number of samples in R: 18\n#>       Passed the filter\n#>   102438\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Tannerellaceae;g__Parabacteroides;s__Parabacteroides distasonis\n#>     Number of genes: 47046\n#>     Number of samples: 29\n#>       Number of samples in HC: 11\n#>       Number of samples in R: 18\n#>       Passed the filter\n## Set the annotation file\nstana@eggNOG <- list(\"101346\"=\"../annotations_uhgg/101346_eggnog_out.emapper.annotations\",\n                     \"102438\"=\"../annotations_uhgg/102438_eggnog_out.emapper.annotations\")\nstana <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", only_ko=TRUE, multi_scale=FALSE)\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", multi_scale=FALSE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", multi_scale=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"),\n                      pathway_id=c(\"ko00270\",\"ko00620\"),\n                      multi_scale=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg2 <- patchwork::wrap_plots(gg)\ngg2"},{"path":"visualization.html","id":"visualization","chapter":"5 Visualization","heading":"5 Visualization","text":"stana offers visualization functions can interpret profiled data.","code":"\nlibrary(stana)\nlibrary(ComplexHeatmap)"},{"path":"visualization.html","id":"visualization-of-gene-abundances","chapter":"5 Visualization","heading":"5.1 Visualization of gene abundances","text":"","code":"\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=\"102478\")\n#> SNPS\n#>   102478\n#>     Number of snps: 77431\n#>     Number of samples: 31\n#>       Number of samples in HC: 9\n#>       Number of samples in R: 22\n#>       Passed the filter\n#> Genes\n#>   102478\n#>     Number of genes: 150996\n#>     Number of samples: 32\n#>       Number of samples in HC: 10\n#>       Number of samples in R: 22\n#>       Passed the filter\nplotGenes(stana, \"102478\", c(\"UHGG000186_00531\",\"UHGG000186_00521\"))"},{"path":"visualization.html","id":"visualization-of-functional-analysis-results","chapter":"5 Visualization","heading":"5.2 Visualization of functional analysis results","text":"See 4.","code":""},{"path":"visualization.html","id":"visualization-of-instrain-results","chapter":"5 Visualization","heading":"5.3 Visualization of inStrain results","text":"imported inStrain compare profiles can visualized. loaded genome-wide comparison table strain cluster table can visualized using genomeHeatmap strainClusterHeatmap ComplexHeatmap. genomeHeatmap, typically population ANI consensus ANI plotted, columns listed genomeWide_compare.tsv can plotted. parameters passed Heatmap can specified heatmapArgs. cluster information (stana@cl) available cl specified, columns split present grouping.","code":"\ninstr_chk <- \"GUT_GENOME142015\"\ninstr <- loadInStrain(\"../inStrain_out\", instr_chk)\ngenomeHeatmap(instr, instr_chk, column = \"popANI\", heatmapArgs = list(show_column_name=FALSE))\nstrainClusterHeatmap(instr, instr_chk, heatmapArgs = list(show_column_name=FALSE))"}]
