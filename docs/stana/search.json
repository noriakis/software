[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"documentation R package stana. stana developed analysis intra-species diversity R environment.","code":""},{"path":"index.html","id":"motivation","chapter":"1 About","heading":"1.1 Motivation","text":"Computational pipelines developed illuminate intra-species diversity, derived single nucleotide variants (SNVs) gene contents species. However, limited software performing integrated analyses, resulting unprepared environment. developed R package named stana, integrate analyse data generated metagenomic sequences. package allows necessary preprocessing, functional analysis, statistical analysis, visualization results.","code":""},{"path":"index.html","id":"bugs-and-errors","chapter":"1 About","heading":"1.2 Bugs and errors","text":"find bugs errors, please report Issues make pull request.\naddition, feature suggestions always welcome appreciated.","code":""},{"path":"importing-and-filtering.html","id":"importing-and-filtering","chapter":"2 Importing and filtering","heading":"2 Importing and filtering","text":"stana aimed import metagenotyping results various pipelines.\npackage designed handle types metagenotyping software MIDAS MIDAS2, outputs \ngene copy numbers default. Note slot name snps refers just variable, reflect actual meaning. species ID stana object interpreted character.Along specifying directory load, grouping variables set stana object. default, named list groups used (categorical). cl argument functions cl slot corresponds information. Additionally, metadata ordinaly data.frame can set setMetadata. row names id column represent sample names.","code":"\nlibrary(stana)"},{"path":"importing-and-filtering.html","id":"midas","chapter":"2 Importing and filtering","heading":"2.1 MIDAS","text":"MIDAS, loadMIDAS function can used import output merge command. MIDAS MIDAS2 examples, load example dataset deposited study investigating gut microbiome hemodialysis patients (Shi et al. 2022). hd_meta includes named list grouping. First like see many samples profiled species.load interesting species.","code":"\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS(\"../merge_midas1\", cl=hd_meta, only_stat=TRUE)\nstana$snps |> head() |> DT::datatable()\nstana <- loadMIDAS(\"../merge_midas1/\", cl=hd_meta, candSp=\"Bacteroides_uniformis_57318\")\n#> Bacteroides_uniformis_57318\n#>   Snps\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in SNV\n#>   Genes\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in genes\n#> Overall, 1 species met criteria in SNPs\n#> Overall, 1 species met criteria in genes\nstana\n#> # A stana: MIDAS1\n#> # Loaded directory: ../merge_midas1/\n#> # Species number: 1\n#> # Group info (list): HC/R\n#> # Loaded SNV table: 1 ID: Bacteroides_uniformis_57318\n#> # Loaded gene table: 1 ID: Bacteroides_uniformis_57318\n#> # Size: 14586224 B"},{"path":"importing-and-filtering.html","id":"midas2","chapter":"2 Importing and filtering","heading":"2.2 MIDAS2","text":"MIDAS2, loadMIDAS2 function can used import output merge command.MIDAS2, function assumes default database UHGG GTDB used.can check stats many samples profiled species, only_stat. returns list tibbles names snps genes.long output expected, one species loaded .data profiled UHGG. loadSummary loadInfo can specified load SNV summary SNV info per species, default TRUE.ID conversion, metadata accompanied default database can used.taxonomy table can loaded providing taxtbl argument.coverage species per sample plotted plotCoverage.","code":"\nload(\"../hd_meta.rda\")\nhd_meta\n#> $HC\n#>  [1] \"ERR9492498\" \"ERR9492502\" \"ERR9492507\" \"ERR9492508\"\n#>  [5] \"ERR9492512\" \"ERR9492497\" \"ERR9492499\" \"ERR9492501\"\n#>  [9] \"ERR9492504\" \"ERR9492505\" \"ERR9492509\" \"ERR9492511\"\n#> [13] \"ERR9492500\" \"ERR9492503\" \"ERR9492506\" \"ERR9492510\"\n#> \n#> $R\n#>  [1] \"ERR9492489\" \"ERR9492490\" \"ERR9492492\" \"ERR9492494\"\n#>  [5] \"ERR9492519\" \"ERR9492524\" \"ERR9492526\" \"ERR9492527\"\n#>  [9] \"ERR9492528\" \"ERR9492513\" \"ERR9492514\" \"ERR9492518\"\n#> [13] \"ERR9492520\" \"ERR9492522\" \"ERR9492523\" \"ERR9492525\"\n#> [17] \"ERR9492491\" \"ERR9492493\" \"ERR9492495\" \"ERR9492496\"\n#> [21] \"ERR9492515\" \"ERR9492516\" \"ERR9492517\" \"ERR9492521\"\nstana <- loadMIDAS2(\"../merge_uhgg\", only_stat=TRUE, cl=hd_meta)\nstana$snps |> dplyr::filter(group==\"HC\") |> dplyr::arrange(desc(n)) |> head()\n#> # A tibble: 6 × 4\n#> # Groups:   species_id [6]\n#>   species_id group     n species_description           \n#>   <chr>      <chr> <int> <chr>                         \n#> 1 101346     HC       12 s__KS41 sp003584895           \n#> 2 102438     HC       10 s__Synechococcus_C sp001632165\n#> 3 101378     HC        9 s__CAG-873 sp002490635        \n#> 4 102478     HC        9 s__Clostridium_A leptum       \n#> 5 102492     HC        8 s__Thalassospira lucentensis_A\n#> 6 100044     HC        7 s__Helicobacter pylori_BU\nstana <- loadMIDAS2(\"../merge_uhgg\", candSp=\"100002\", cl=hd_meta)\n#>   100002\n#>     Number of snps: 2058\n#>     Number of samples: 5\n#>   100002\n#>     Number of genes: 23427\n#>     Number of samples: 7\ngetSlot(stana, \"snps\")[[\"100002\"]] |> head()\n#>                                 ERR9492497 ERR9492515\n#> gnl|Prokka|UHGG000004_1|2901|A           1          1\n#> gnl|Prokka|UHGG000004_1|4071|C           1          0\n#> gnl|Prokka|UHGG000004_1|11094|T          1          0\n#> gnl|Prokka|UHGG000004_1|11148|T          1          0\n#> gnl|Prokka|UHGG000004_1|11940|G          0          0\n#> gnl|Prokka|UHGG000004_1|11970|C          0          0\n#>                                 ERR9492526 ERR9492527\n#> gnl|Prokka|UHGG000004_1|2901|A           0      0.429\n#> gnl|Prokka|UHGG000004_1|4071|C           1      0.000\n#> gnl|Prokka|UHGG000004_1|11094|T          0      0.000\n#> gnl|Prokka|UHGG000004_1|11148|T          0      0.429\n#> gnl|Prokka|UHGG000004_1|11940|G          1      0.444\n#> gnl|Prokka|UHGG000004_1|11970|C          1      0.556\n#>                                 ERR9492528\n#> gnl|Prokka|UHGG000004_1|2901|A           0\n#> gnl|Prokka|UHGG000004_1|4071|C           0\n#> gnl|Prokka|UHGG000004_1|11094|T          1\n#> gnl|Prokka|UHGG000004_1|11148|T          1\n#> gnl|Prokka|UHGG000004_1|11940|G          0\n#> gnl|Prokka|UHGG000004_1|11970|C          0\ngetSlot(stana, \"freqTableSnps\") |> head()\n#> data frame with 0 columns and 0 rows\ntaxtbl <- read.table(\"../metadata_uhgg.tsv\", sep=\"\\t\",\n                     header=1, row.names=1, check.names = FALSE)\ntaxtbl |> head()\n#>          representative MGnify_accession species_closest\n#> 100001 GUT_GENOME000001  MGYG-HGUT-00001          100049\n#> 100002 GUT_GENOME000004  MGYG-HGUT-00002          100201\n#> 100003 GUT_GENOME000008  MGYG-HGUT-00003          103279\n#> 100004 GUT_GENOME000010  MGYG-HGUT-00004          103876\n#> 100005 GUT_GENOME000017  MGYG-HGUT-00005          101623\n#> 100006 GUT_GENOME000020  MGYG-HGUT-00006          100011\n#>        ani_closest gtpro_kmer_counts phyeco_marker_counts\n#> 100001    83.35600                NA                   15\n#> 100002    84.86955             29822                   15\n#> 100003    93.41555              1115                   15\n#> 100004    78.17620                NA                   15\n#> 100005    85.84275                NA                   15\n#> 100006    93.07075                NA                   15\n#>        phyeco_pass_ratio pangene_counts genome_counts\n#> 100001                 1           4893             4\n#> 100002                 1         147601           358\n#> 100003                 1         113409          1178\n#> 100004                 1          12599            24\n#> 100005                 1           5488             2\n#> 100006                 1           2656             1\n#>        Genome_type  Length N_contigs    N50 GC_content\n#> 100001     Isolate 3219614       137  47258      28.26\n#> 100002     Isolate 4433090       100 109266      42.60\n#> 100003     Isolate 3229507        35 158570      58.52\n#> 100004     Isolate 3698872       105  90296      54.19\n#> 100005     Isolate 3930422        32 350032      28.59\n#> 100006     Isolate 2822523        36 121380      32.65\n#>        Completeness Contamination\n#> 100001        98.59          0.70\n#> 100002        99.37          0.00\n#> 100003       100.00          0.00\n#> 100004        98.66          0.22\n#> 100005        99.30          0.00\n#> 100006        99.26          1.39\n#>                                                                                                                                                Lineage\n#> 100001                                 d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Peptostreptococcales;f__Peptostreptococcaceae;g__GCA-900066495;s__\n#> 100002                            d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Lachnospirales;f__Lachnospiraceae;g__Blautia_A;s__Blautia_A sp900066165\n#> 100003                                   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Rikenellaceae;g__Alistipes;s__Alistipes shahii\n#> 100004                   d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Oscillospirales;f__Ruminococcaceae;g__Anaerotruncus;s__Anaerotruncus colihominis\n#> 100005 d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Peptostreptococcales;f__Peptostreptococcaceae;g__Terrisporobacter;s__Terrisporobacter glycolicus_A\n#> 100006                       d__Bacteria;p__Firmicutes;c__Bacilli;o__Staphylococcales;f__Staphylococcaceae;g__Staphylococcus;s__Staphylococcus xylosus\n#>        Continent\n#> 100001    Europe\n#> 100002    Europe\n#> 100003    Europe\n#> 100004    Europe\n#> 100005    Europe\n#> 100006    Europe\nloadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=\"100002\", taxtbl=taxtbl, db=\"uhgg\")\n#>   100002\n#>   d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Lachnospirales;f__Lachnospiraceae;g__Blautia_A;s__Blautia_A sp900066165\n#>     Number of snps: 2058\n#>     Number of samples: 5\n#>   100002\n#>   d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Lachnospirales;f__Lachnospiraceae;g__Blautia_A;s__Blautia_A sp900066165\n#>     Number of genes: 23427\n#>     Number of samples: 7\n#> # A stana: MIDAS2\n#> # Database: uhgg\n#> # Loaded directory: ../merge_uhgg\n#> # Species number: 1\n#> # Group info (list): HC/R\n#> # Loaded SNV table: 1 ID: 100002\n#> # Loaded gene table: 1 ID: 100002\n#> # Size: 4525192 B\n#> # \n#> # SNV description\n#> # A tibble: 2 × 3\n#> # Groups:   group [2]\n#>   group species_id                                         n\n#>   <chr> <chr>                                          <int>\n#> 1 HC    d__Bacteria;p__Firmicutes_A;c__Clostridia;o__…     1\n#> 2 R     d__Bacteria;p__Firmicutes_A;c__Clostridia;o__…     4\nplotCoverage(stana, \"100002\", pointSize=5)"},{"path":"importing-and-filtering.html","id":"instrain","chapter":"2 Importing and filtering","heading":"2.3 inStrain","text":"inStrain, need compare command output, profile command. First like know species profiled. just_species option list species table. , load example dataset profiled inStrain, using default database described original tutorial. inStrain, loading SNV tables often impossible, must specify candidate_species investigation.recalculates minor allele frequency based pooled SNV information (individual SNV information), thus takes long time case number profiled positions large. can set cl argument needed.","code":"\nsp <- loadInStrain(\"../inStrain_out\", just_species=TRUE)\nsp\n#>  [1] \"GUT_GENOME000022\" \"GUT_GENOME000024\"\n#>  [3] \"GUT_GENOME000147\" \"GUT_GENOME000220\"\n#>  [5] \"GUT_GENOME000221\" \"GUT_GENOME000224\"\n#>  [7] \"GUT_GENOME000225\" \"GUT_GENOME000231\"\n#>  [9] \"GUT_GENOME000509\" \"GUT_GENOME007566\"\n#> [11] \"GUT_GENOME009103\" \"GUT_GENOME031782\"\n#> [13] \"GUT_GENOME034989\" \"GUT_GENOME044231\"\n#> [15] \"GUT_GENOME067546\" \"GUT_GENOME068725\"\n#> [17] \"GUT_GENOME080972\" \"GUT_GENOME090701\"\n#> [19] \"GUT_GENOME094995\" \"GUT_GENOME096045\"\n#> [21] \"GUT_GENOME096080\" \"GUT_GENOME096083\"\n#> [23] \"GUT_GENOME096473\" \"GUT_GENOME096573\"\n#> [25] \"GUT_GENOME102034\" \"GUT_GENOME103721\"\n#> [27] \"GUT_GENOME104570\" \"GUT_GENOME109880\"\n#> [29] \"GUT_GENOME112794\" \"GUT_GENOME113322\"\n#> [31] \"GUT_GENOME114679\" \"GUT_GENOME115272\"\n#> [33] \"GUT_GENOME115357\" \"GUT_GENOME116258\"\n#> [35] \"GUT_GENOME116897\" \"GUT_GENOME117271\"\n#> [37] \"GUT_GENOME132077\" \"GUT_GENOME135463\"\n#> [39] \"GUT_GENOME140076\" \"GUT_GENOME142015\"\n#> [41] \"GUT_GENOME142390\" \"GUT_GENOME143131\"\n#> [43] \"GUT_GENOME143211\" \"GUT_GENOME143348\"\n#> [45] \"GUT_GENOME143497\" \"GUT_GENOME143505\"\n#> [47] \"GUT_GENOME149497\" \"GUT_GENOME156849\"\n#> [49] \"GUT_GENOME174809\" \"GUT_GENOME175554\"\n#> [51] \"GUT_GENOME189814\" \"GUT_GENOME195293\"\n#> [53] \"GUT_GENOME208589\" \"GUT_GENOME210309\"\n#> [55] \"GUT_GENOME210710\" \"GUT_GENOME217823\"\n#> [57] \"GUT_GENOME217842\" \"GUT_GENOME217850\"\n#> [59] \"GUT_GENOME234840\" \"GUT_GENOME252930\"\n#> [61] \"GUT_GENOME258721\" \"GUT_GENOME261411\"\n#> [63] \"GUT_GENOME272874\" \"GUT_GENOME274362\"\n#> [65] \"GUT_GENOME275708\" \"GUT_GENOME277090\"\n#> [67] \"GUT_GENOME284693\" \"GUT_GENOME286118\"\ninstr_chk <- \"GUT_GENOME142015\"\ninstr <- loadInStrain(\"../inStrain_out\", instr_chk, skip_pool=FALSE) ## Load MAF table\n#> Loading allele count table\n#> Loading the large table...\n#> Loading key table\n#> Loading info table\n#> Candidate species: GUT_GENOME142015\n#>   Candidate key numbers: 1\n#>   Dimension of pooled SNV table for species: 2359827\n#> Calculating MAF\ninstr\n#> # A stana: InStrain\n#> # Loaded directory: ../inStrain_out\n#> # Species number: 1\n#> # Loaded SNV table: 1 ID: GUT_GENOME142015\n#> # Size: 81502904 B"},{"path":"importing-and-filtering.html","id":"metasnv","chapter":"2 Importing and filtering","heading":"2.4 metaSNV","text":"loading output metaSNV, metaSNV.py metaSNV_Filtering.py typically performed beforehand. can use just_species return species ID. Note loadmetaSNV currently supported load SNV profiles.","code":"\nmeta <- loadmetaSNV(\"../metasnv_sample_out\")\n#>   Loading refGenome1clus\n#>   Loading refGenome2clus\n#>   Loading refGenome3clus"},{"path":"importing-and-filtering.html","id":"manual","chapter":"2 Importing and filtering","heading":"2.5 Manual","text":"loading manually created data.frame possible snv gene function. metagenotyping results produced software can loaded function, although statistics inserted manually. accepts named list data.frame.","code":"\nman <- snv(list(\"manual\"=head(getSlot(meta, \"snps\")[[1]])))\nman\n#> # A stana: manual\n#> # Loaded directory: \n#> # Species number: 1\n#> # Loaded SNV table: 1 ID: manual\n#> # Size: 49432 B"},{"path":"importing-and-filtering.html","id":"conversion-to-maf-matrix","chapter":"2 Importing and filtering","heading":"2.5.1 Conversion to MAF matrix","text":"metagenotype data comes TSV number allele count long wide format.\npackage offers functions convert MAF matrix.can merged make stana object combineMaf() function.object can used subsequent downstream analysis. function can useful importing metagenotyping software GT-Pro.","code":"\ndf1 <- data.frame(rbind(\n  c(\"SPID1\",\"SP1_NZ_GG770218.1_131457\", \"G\", \"A\", \"7\", \"2\"),\n  c(\"SPID1\",\"SP1_NZ_GG770218.1_131458\", \"C\", \"T\", \"2\", \"5\"),\n  c(\"SPID2\",\"SP2_NZ.1_131459\", \"A\", \"T\", \"7\", \"13\"),\n  c(\"SPID2\",\"SP2_NZ.1_131470\", \"A\", \"T\", \"12\", \"2\")\n))\n\nhead(df1)\n#>      X1                       X2 X3 X4 X5 X6\n#> 1 SPID1 SP1_NZ_GG770218.1_131457  G  A  7  2\n#> 2 SPID1 SP1_NZ_GG770218.1_131458  C  T  2  5\n#> 3 SPID2          SP2_NZ.1_131459  A  T  7 13\n#> 4 SPID2          SP2_NZ.1_131470  A  T 12  2\n\nconvertWideToMaf(df1)[[1]]\n#> $SPID1\n#>                                maf\n#> SP1_NZ_GG770218.1_131457 0.2222222\n#> SP1_NZ_GG770218.1_131458 0.2857143\n#> \n#> $SPID2\n#>                       maf\n#> SP2_NZ.1_131459 0.3500000\n#> SP2_NZ.1_131470 0.1428571\n\n\n\ndf2 <- data.frame(rbind(\n  c(\"SPID3\",\"SP3_AZ.1_131457\", \"G\", \"A\", \"7\", \"2\"),\n  c(\"SPID3\",\"SP3_AZ.1_131458\", \"C\", \"T\", \"2\", \"5\"),\n  c(\"SPID1\",\"SP1_NZ_GG770218.1_131457\", \"A\", \"T\", \"7\", \"13\"),\n  c(\"SPID1\",\"SP1_NZ_GG770218.1_131458\", \"A\", \"T\", \"12\", \"2\")\n))\nmafs <- list(\"sample1\"=convertWideToMaf(df1), \"sample2\"=convertWideToMaf(df2))\nstana <- combineMaf(mafs)\nstana\n#> # A stana: manual\n#> # Loaded directory: \n#> # Species number: 0\n#> # Loaded SNV table: 3 ID: SPID1\n#> # Size: 23368 B\ngetSlot(stana, \"snpsSummary\")\n#> data frame with 0 columns and 0 rows\n\n## If needed, SNV-level statistics should be set to stana\n# stana <- setSlot(stana, \"snpsInfo\", list(\"SPID1\"=spid1_statistics))"},{"path":"importing-and-filtering.html","id":"filtering-by-species-id","chapter":"2 Importing and filtering","heading":"2.6 Filtering by species ID","text":"check method applied stana object can check samples species met specific criteria.Subsequently, filter method can used subset stana object interesting species.functions stana designed perform analysis species within stana object unless specified, filtering beforehand grouping variables important (number samples profiled per group).","code":"\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=\"100002\", taxtbl=taxtbl, db=\"uhgg\")\n#>   100002\n#>   d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Lachnospirales;f__Lachnospiraceae;g__Blautia_A;s__Blautia_A sp900066165\n#>     Number of snps: 2058\n#>     Number of samples: 5\n#>   100002\n#>   d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Lachnospirales;f__Lachnospiraceae;g__Blautia_A;s__Blautia_A sp900066165\n#>     Number of genes: 23427\n#>     Number of samples: 7\nfilt <- stana %>% check(mean_coverage > 4)\nhead(filt)\n#> # A tibble: 6 × 3\n#>   species_id     n species_description                      \n#>        <int> <int> <chr>                                    \n#> 1     100002     5 d__Bacteria;p__Firmicutes_A;c__Clostridi…\n#> 2     100003    15 d__Bacteria;p__Bacteroidota;c__Bacteroid…\n#> 3     100022     7 d__Bacteria;p__Firmicutes_A;c__Clostridi…\n#> 4     100036     3 d__Bacteria;p__Firmicutes_A;c__Clostridi…\n#> 5     100039     2 d__Bacteria;p__Firmicutes_A;c__Clostridi…\n#> 6     100041     3 d__Bacteria;p__Firmicutes_A;c__Clostridi…\nstana <- stana %>% filter(unique(filt$species_id))"},{"path":"statistial-analysis.html","id":"statistial-analysis","chapter":"3 Statistial analysis","heading":"3 Statistial analysis","text":"stana provides functions perform statistical analysis metagenotyping results based loaded data.","code":"\nlibrary(stana)\nlibrary(phangorn)\nlibrary(ggtree)\n## Examine sample object\nload(system.file(\"extdata\", \"sysdata.rda\", package = \"stana\"))"},{"path":"statistial-analysis.html","id":"cons","chapter":"3 Statistial analysis","heading":"3.1 Consensus sequence calling","text":"consensus sequence calling can performed using SNV matrix. MIDAS MIDAS2 output, can filter confident positions software provides various statistics SNVs. implementation based call_consensus.py script available MIDAS. use pair-wise distances sequences calculated dist.ml default amino acid model (JC69), performs neighbor-joining tree estimation NJ.sequences stored phyDat class object fastaList slot, list species ID name.Matrix characters can returned return_mat=TRUE. return stana object.can use MSA stored fastaList slot infer phylogenetic tree choices.\nplotTree function can used internally infer plot tree based grouping.\ndist_method set dist.ml default, can pass arguments function tree_args.Owning powerful functions ggtree ggtreeExtra, can visualize tree based metadata.\nset data.frame containing covariates stana object setMetadata function. specify covariates meta argument plotTree.","code":"\n\n## The consensusSeq* is prepared, but consensusSeq function can automatically \n## choose which functions to use\nstana <- consensusSeqMIDAS2(stana, species=\"100003\", verbose=FALSE)\n#> Beginning calling for 100003\n#>   Site number: 5019\n#>   Profiled samples: 11\n#>   Included samples: 11\n\n## Tree estimation and visualization by `phangorn` and `ggtree`\ndm <- dist.ml(getSlot(stana, \"fastaList\")[[\"100003\"]])\ntre <- NJ(dm)\ntre <- groupOTU(tre, getSlot(stana, \"cl\"))\ntp <- ggtree(tre, aes(color=.data$group),\n             layout='circular') +\n        geom_tippoint(size=3) +\n        ggtree::scale_color_manual(values=getSlot(stana, \"colors\"))\ntp\nstana <- stana |>\n    consensusSeq(argList=list(site_prev=0.8))\n#> Beginning calling for 100003\n#>   Site number: 5019\n#>   Profiled samples: 11\n#>   Included samples: 11\ngetFasta(stana)[[1]]\n#> 11 sequences with 4214 character and 2782 different site patterns.\n#> The states are a c g t\nmat <- stana |>\n    consensusSeq(argList=list(site_prev=0.8, return_mat=TRUE))\n#> Beginning calling for 100003\n#>   Site number: 5019\n#>   Profiled samples: 11\n#>   Included samples: 11\nmat |> dim()\n#> [1]   11 4214\nlibrary(phangorn)\nstana <- inferAndPlotTree(stana, dist_method=\"dist.hamming\", tree_args=list(exclude=\"all\"))\ngetTree(stana)[[1]]\n#> \n#> Phylogenetic tree with 11 tips and 10 internal nodes.\n#> \n#> Tip labels:\n#>   ERR1711593, ERR1711594, ERR1711596, ERR1711598, ERR1711603, ERR1711605, ...\n#> \n#> Rooted; includes branch lengths.\n## Make example metadata\nsamples <- getSlot(stana, \"snps\")[[\"100003\"]] |> colnames()\nmetadata <- data.frame(\n    row.names=samples,\n    treatment=factor(sample(1:3, length(samples), replace=TRUE)),\n    marker=runif(length(samples))\n)\n\n## Set metadata\nstana <- setMetadata(stana, metadata)\n\n## Call consensus sequence\n## Infer and plot tree based on metadata\nstana <- stana |>\n  consensusSeq(argList=list(site_prev=0.95)) |>\n  inferAndPlotTree(meta=c(\"treatment\",\"marker\"))\n#> Beginning calling for 100003\n#>   Site number: 5019\n#>   Profiled samples: 11\n#>   Included samples: 11\ngetFasta(stana)[[1]]\n#> 11 sequences with 896 character and 625 different site patterns.\n#> The states are a c g t\ngetTree(stana)[[1]]\n#> \n#> Phylogenetic tree with 11 tips and 10 internal nodes.\n#> \n#> Tip labels:\n#>   ERR1711593, ERR1711594, ERR1711596, ERR1711598, ERR1711603, ERR1711605, ...\n#> \n#> Rooted; includes branch lengths.\ngetSlot(stana, \"treePlotList\")[[1]]"},{"path":"statistial-analysis.html","id":"nonnegative-matrix-factorization","chapter":"3 Statistial analysis","heading":"3.2 Nonnegative matrix factorization","text":"loaded calculated matrix can used nonnegative matrix factorization (NMF). calculates factor x sample sample feature matrix, possibly finds pattern within-species diversity. results can summarized functions plotAbundanceWithinSpecies. function uses R package NMF, implements variety algorithms rank selection method.input can SNV, gene, gene family (KO) abundance table. SNV matrix can contain NA -1 (zero depth position), filtering performed. NMF function can used purpose. default, estimate set FALSE set TRUE, performs estimation rank within estimate_range. assumes multiple subspecies samples applicable one subspecies present. chooses rank based cophenetic correlation coefficient.method set snmf/r default.users can specify rank.resulting stana object can used function. plotAbundanceWithinSpecies plots (relative) abundances per sample using grouping criteria stana object.data can obtained using return_data.basis corresponds factor feature matrix. represents functional implications KO abundance tables used NMF. information can parsed matrix KEGG PATHWAY information using pathwayWithFactor.information can combined functions stana, like plotting factor abundances along tree inferred consensus sequence alignment.","code":"\nlibrary(NMF)\n#> Warning: package 'NMF' was built under R version 4.3.3\n#> Loading required package: registry\n#> Loading required package: rngtools\n#> Loading required package: cluster\n#> NMF - BioConductor layer [OK] | Shared memory capabilities [NO: windows] | Cores 2/2\n#> \n#> Attaching package: 'NMF'\n#> The following object is masked from 'package:ape':\n#> \n#>     consensus\n#> The following objects are masked from 'package:igraph':\n#> \n#>     algorithm, compare\nstana <- NMF(stana, \"100003\", target=\"genes\", estimate=TRUE)\n#> Original features: 21806 \n#> Original samples: 16 \n#> Filtered features: 21806 \n#> Filtered samples: 16 \n#> Chosen rank: 3 \n#> Rank 3 \n#> Mean relative abundances: 0.7205298 0.1216617 0.1578085 \n#> Present feature per strain: 20546 11671 14235\ngetSlot(stana, \"nmf\")\n#> NULL\nstana <- NMF(stana, \"100003\", rank=3)\n#> Original features: 20 \n#> Original samples: 16 \n#> Filtered features: 20 \n#> Filtered samples: 16 \n#> Rank 3 \n#> Mean relative abundances: 0.0625 0.7745108 0.1629892 \n#> Present feature per strain: 7 18 9\ngetSlot(stana, \"nmf\")\n#> NULL\nplotAbundanceWithinSpecies(stana, \"100003\", tss=TRUE)\nplotAbundanceWithinSpecies(stana, \"100003\", tss=TRUE, return_data=TRUE) %>% head()\n#>            1         2         3  group\n#> ERR1711593 0 0.7235181 0.2764819 Group1\n#> ERR1711594 0 1.0000000 0.0000000 Group1\n#> ERR1711596 0 1.0000000 0.0000000 Group1\n#> ERR1711598 0 1.0000000 0.0000000 Group1\n#> ERR1711599 0 0.0000000 1.0000000 Group1\n#> ERR1711602 0 0.5397880 0.4602120 Group1\nlibrary(pheatmap)\npheatmap(pathwayWithFactor(stana, \"100003\", tss=TRUE))\nab <- plotAbundanceWithinSpecies(stana, \"100003\", tss=TRUE, return_data=TRUE)\nstana <- setMetadata(stana, ab)\nstana <- inferAndPlotTree(stana, \"100003\", meta=colnames(ab))\ngetTreePlot(stana)\n#> $`100003`"},{"path":"statistial-analysis.html","id":"permanova","chapter":"3 Statistial analysis","heading":"3.3 PERMANOVA","text":"Using adonis2 function vegan, one can compare distance matrix based SNV frequency gene copy numbers, tree-based distance specified group. target=\"tree\" specified, tree shuold treeList, species name key. ape::cophenetic.phylo() used calculate distance tips based branch length. Distance method can chosen dist function stats. can specify distArg pass arguments dist. Also, distance calculated directly sequences can used. case, target='fasta' chosen, function calculate distance provided AAfunc argument.","code":"\nstana <- setTree(stana, \"100003\", tre)\nstana <- doAdonis(stana, specs = \"100003\", target=\"tree\")\n#> Performing adonis in 100003\n#> Warning in att$heading[2] <- deparse(match.call(),\n#> width.cutoff = 500L): number of items to replace is not a\n#> multiple of replacement length\n#>   F: 0.719649945825046, R2: 0.0740407267582885, Pr: 0.723\ngetAdonis(stana)[[\"100003\"]]\n#> Permutation test for adonis under reduced model\n#> Terms added sequentially (first to last)\n#> Permutation: free\n#> Number of permutations: 999\n#> \n#> adonis2(formula = d ~ gr, na.action = function (object, ...) \n#>          Df SumOfSqs      R2      F Pr(>F)\n#> gr        1  0.15557 0.07404 0.7196  0.723\n#> Residual  9  1.94558 0.92596              \n#> Total    10  2.10115 1.00000"},{"path":"statistial-analysis.html","id":"comparing-gene-copy-numbers","chapter":"3 Statistial analysis","heading":"3.4 Comparing gene copy numbers","text":"genes slot filled stana object, gene copy numbers can compared one one using exact Wilcoxon rank-sum test using wilcox.exact exactRankTests computing exact conditional p-values. Note p-values adjusted multiple comparisons made.","code":"\nres <- compareGenes(stana, \"100003\")\n#> Testing total of 21806\nres[[\"UHGG000008_01733\"]]\n#> \n#>  Exact Wilcoxon rank sum test\n#> \n#> data:  c(1.154444, 2.404241, 0, 1.421386, 1.50773, 0) and c(0.535732, 1.709442, 1.31675, 3.44086, 2.712423, 1.923076, 1.062853, c(1.154444, 2.404241, 0, 1.421386, 1.50773, 0) and 1.21147, 0, 1.509217)\n#> W = 22, p-value = 0.4256\n#> alternative hypothesis: true mu is not equal to 0"},{"path":"statistial-analysis.html","id":"aggregating-gene-copy-numbers","chapter":"3 Statistial analysis","heading":"3.5 Aggregating gene copy numbers","text":"gene abundances across multiple stana object can aggregated. returns new stana object gene abundances combined.","code":"\n## This returns new stana object\nstanacomb <- combineGenes(list(stana, stana), species=\"100003\")\n#> Common genes: 21806\n#> Duplicate label found in group\ndim(getSlot(stanacomb, \"genes\")[[\"100003\"]])\n#> [1] 21806    32"},{"path":"statistial-analysis.html","id":"performing-boruta-or-feature-selection","chapter":"3 Statistial analysis","heading":"3.6 Performing Boruta or feature selection","text":"Boruta algorithm can run matrices obtain important marker (SNV position gene) distinguishing group doBoruta function. function performs Boruta algorithm specified data returns Boruta class result. default, function performs fixes tentative input. disable , specify doFix=FALSE., visualize copy numbers important genes confirmed group.","code":"\nlibrary(Boruta)\nbrres <- doBoruta(stana, \"100003\")\n#> Using grouping from the slot\n#> If needed, please provide preprocessed matrix of genes to `mat`\n#> Feature number: 21806\n#> Performing Boruta\nbrres\n#> $boruta\n#> Boruta performed 99 iterations in 42.10037 secs.\n#> Tentatives roughfixed over the last 99 iterations.\n#>  15 attributes confirmed important: UHGG006336_00186,\n#> UHGG025024_01181, UHGG044133_01185, UHGG061776_01340,\n#> UHGG096197_00528 and 10 more;\n#>  21791 attributes confirmed unimportant:\n#> UHGG000008_00008, UHGG000008_00009, UHGG000008_00010,\n#> UHGG000008_00012, UHGG000008_00015 and 21786 more;\nplotGenes(stana, \"100003\",\n          brres$boruta$finalDecision[brres$boruta$finalDecision==\"Confirmed\"] |> names())+\n  ggplot2::facet_wrap(.~geneID,scales=\"free_y\")"},{"path":"function.html","id":"function","chapter":"4 Functional annotation","heading":"4 Functional annotation","text":"metabolic functional profiling, several functions prepared stana. Note functions primarily designed KEGG ORTHOLOGY can subsequently linked KEGG PATHWAY databases KEGG. However, options enzyme commision numbers can accepted.","code":"\nlibrary(stana)\nlibrary(ComplexHeatmap)"},{"path":"function.html","id":"parsing-patric-results","chapter":"4 Functional annotation","heading":"4.1 Parsing PATRIC results","text":"Use checkPATRIC function obtain information related PATRIC functional annotation. function accepts input named list genes, returns functional annotation results. function uses BiocFileCache() cache obtained results API.","code":"\ngenes <- list(\"test\"=read.table(\"../test_genes.txt\")$V1)\ngenes |> head()\n#> $test\n#>  [1] \"1280701.3.peg.1153\" \"1280701.3.peg.1169\"\n#>  [3] \"1280701.3.peg.1174\" \"1280701.3.peg.1179\"\n#>  [5] \"1280701.3.peg.1186\" \"1280701.3.peg.203\" \n#>  [7] \"1280701.3.peg.361\"  \"1280701.3.peg.363\" \n#>  [9] \"1280701.3.peg.368\"  \"1280701.3.peg.369\" \n#> [11] \"1280701.3.peg.570\"  \"1280701.3.peg.758\" \n#> [13] \"1280701.3.peg.762\"  \"1410605.3.peg.1201\"\n#> [15] \"1410605.3.peg.1204\" \"1410605.3.peg.1463\"\n#> [17] \"1410605.3.peg.1510\" \"1410605.3.peg.1568\"\n#> [19] \"1410605.3.peg.450\"  \"1410605.3.peg.593\" \n#> [21] \"1410605.3.peg.655\"  \"1410605.3.peg.833\" \n#> [23] \"1410605.3.peg.844\"  \"1410605.3.peg.903\" \n#> [25] \"1410605.3.peg.953\"  \"1447715.5.peg.1455\"\n#> [27] \"1447715.5.peg.1549\" \"1447715.5.peg.1582\"\n#> [29] \"1447715.5.peg.256\"  \"1447715.5.peg.33\"  \n#> [31] \"1447715.5.peg.566\"  \"1447715.5.peg.964\"\nres <- checkPATRIC(genes, \"pathway_name\")\n#> Obtaining annotations of 3 genomes\n#>   Obtaining information on 1280701.3\n#>   Obtaining information on 1410605.3\n#>   Obtaining information on 1447715.5\n#> Checking results on cluster test\n#>   total of 2 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 2 annotation obtained after removal of duplication\nDT::datatable(res$test$DF, options = list(scrollX=TRUE))"},{"path":"function.html","id":"draw-the-network","chapter":"4 Functional annotation","heading":"4.1.1 Draw the network","text":"can draw graph obtained results depicting enzyme KEGG PATHWAY relationship.","code":"\ndrawPATRIC(genes)\n#> Obtaining annotations of 3 genomes\n#>   Obtaining information on 1280701.3\n#>   Obtaining information on 1410605.3\n#>   Obtaining information on 1447715.5\n#> Checking results on cluster test\n#>   total of 2 annotation obtained\n#>   remove duplicate based on ec_description\n#>   total of 2 annotation obtained after removal of duplication\n#> Making graph on pathway_name and ec_description\n#>   subsetting to 5 label on each category\n#> $test\n#> $test$DF\n#>                  patric_id ec_number\n#> 254  fig|1280701.3.peg.570  4.2.1.51\n#> 608 fig|1280701.3.peg.1186  2.1.1.37\n#>                          ec_description pathway_id\n#> 254              Prephenate dehydratase        400\n#> 608 DNA (cytosine-5-)-methyltransferase        270\n#>                                            pathway_name\n#> 254 Phenylalanine, tyrosine and tryptophan biosynthesis\n#> 608                  Cysteine and methionine metabolism\n#> \n#> $test$REMOVEDUP\n#>                  patric_id ec_number\n#> 254  fig|1280701.3.peg.570  4.2.1.51\n#> 608 fig|1280701.3.peg.1186  2.1.1.37\n#>                          ec_description pathway_id\n#> 254              Prephenate dehydratase        400\n#> 608 DNA (cytosine-5-)-methyltransferase        270\n#>                                            pathway_name\n#> 254 Phenylalanine, tyrosine and tryptophan biosynthesis\n#> 608                  Cysteine and methionine metabolism\n#> \n#> $test$SORTED\n#> \n#> DNA (cytosine-5-)-methyltransferase \n#>                                   1 \n#>              Prephenate dehydratase \n#>                                   1 \n#> \n#> $test$GRAPH\n#> IGRAPH f4a6a79 UN-- 4 2 -- \n#> + attr: name (v/c)\n#> + edges from f4a6a79 (vertex names):\n#> [1] Prephenate dehydratase             --Phenylalanine, tyrosine and tryptophan biosynthesis\n#> [2] DNA (cytosine-5-)-methyltransferase--Cysteine and methionine metabolism                 \n#> \n#> $test$PLOT"},{"path":"function.html","id":"parsing-eggnog-mapper-v2-results","chapter":"4 Functional annotation","heading":"4.2 Parsing eggNOG-mapper v2 results","text":"Use checkEGGNOG function read output eggNOG-mapper v2.\nperform annotation genes using server software.\nSpecify IDs want obtain ret, “KEGG_ko” “KEGG_Pathway”.\nannotation can used functions.","code":"\ntib <- checkEGGNOG(\"../annotations_gtdb/100224_eggnog_out.emapper.annotations\",\n    ret=\"KEGG_ko\")\ntib |> head() |> DT::datatable()"},{"path":"function.html","id":"draw-the-network-1","chapter":"4 Functional annotation","heading":"4.2.1 Draw the network","text":"can draw relationships IDs drawEGGNOG.","code":"\ndrawEGGNOG(\"../annotations_gtdb/100224_eggnog_out.emapper.annotations\",\n            candPlot = c(\"KEGG_ko\",\"KEGG_Pathway\"),\n            geneIDs = tib$ID |> head(100))\n#> # A tibble: 4,287 × 3\n#>    ID                    name          value                \n#>    <chr>                 <chr>         <chr>                \n#>  1 GCF_002846775.1_00408 seed_ortholog 1690.BPSG_1412       \n#>  2 GCF_002846775.1_00408 eggNOG_OGs    COG0304@1|root       \n#>  3 GCF_002846775.1_00408 eggNOG_OGs    COG0331@1|root       \n#>  4 GCF_002846775.1_00408 eggNOG_OGs    COG2030@1|root       \n#>  5 GCF_002846775.1_00408 eggNOG_OGs    COG4981@1|root       \n#>  6 GCF_002846775.1_00408 eggNOG_OGs    COG0304@2|Bacteria   \n#>  7 GCF_002846775.1_00408 eggNOG_OGs    COG0331@2|Bacteria   \n#>  8 GCF_002846775.1_00408 eggNOG_OGs    COG2030@2|Bacteria   \n#>  9 GCF_002846775.1_00408 eggNOG_OGs    COG4981@2|Bacteria   \n#> 10 GCF_002846775.1_00408 eggNOG_OGs    2GIY4@201174|Actinob…\n#> # ℹ 4,277 more rows\n#> $graph\n#> IGRAPH f5c81c9 UN-- 21 922 -- \n#> + attr: name (v/c), category (v/c), size (v/n)\n#> + edges from f5c81c9 (vertex names):\n#>  [1] ko:K11533--ko00061 ko:K11533--ko01100\n#>  [3] ko:K11533--ko01212 ko:K11533--ko04931\n#>  [5] ko:K11533--ko00061 ko:K11533--ko01100\n#>  [7] ko:K11533--ko01212 ko:K11533--ko04931\n#>  [9] ko:K11533--ko00061 ko:K11533--ko01100\n#> [11] ko:K11533--ko01212 ko:K11533--ko04931\n#> [13] ko:K11533--ko00061 ko:K11533--ko01100\n#> [15] ko:K11533--ko01212 ko:K11533--ko04931\n#> + ... omitted several edges\n#> \n#> $plot"},{"path":"function.html","id":"heatmap-of-the-gene-copy-numbers-with-functional-annotations","chapter":"4 Functional annotation","heading":"4.3 Heatmap of the gene copy numbers with functional annotations","text":"can inspect overview functional differences using gene copy numbers along simplifyEnrichment. plotHeatmap function can used stana object preprocessed gene copy number matrix input. function, anno_PATRIC_keywords anno_eggNOG_keywords used plot word clouds alongside Heatmap ComplexHeatmap. easy MIDAS, function obtains functional annotation PATRIC API server annotation step needed.","code":""},{"path":"function.html","id":"midas-1","chapter":"4 Functional annotation","heading":"4.3.1 MIDAS","text":"MIDAS, function automatically query API PATRIC server using gene names. gene number large typically, one can filter genes options filter_zero_frac, filter_max_frac filter_max_value. However, one perform filtering beforehand provide matrix mat. mat specified, filtering options ignored.","code":"\nlibrary(ComplexHeatmap)\nlibrary(simplifyEnrichment)\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS(\"../merge_midas1/\", cl=hd_meta, candSp=\"Bacteroides_uniformis_57318\")\n#> Bacteroides_uniformis_57318\n#>   Snps\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in SNV\n#>   Genes\n#>     HC 13\n#>     R 16\n#>     Bacteroides_uniformis_57318 cleared filtering threshold in genes\n#> Overall, 1 species met criteria in SNPs\n#> Overall, 1 species met criteria in genes\nplotHeatmap(stana, \"Bacteroides_uniformis_57318\",filter_max_value = 2,filter_max_frac = 0)\n#> In resulting matrix, max: 1.99955229433902, min: 0\n#> Dimension: 4911, 29\n#> Obtaining gene information from PATRIC server\n#> Obtaining annotations of 7 genomes\n#>   Obtaining information on 1235787.3\n#>   Obtaining information on 1339348.3\n#>   Obtaining information on 411479.10\n#>   Obtaining information on 457393.3\n#>   Obtaining information on 585543.3\n#>   Obtaining information on 997889.3\n#>   Obtaining information on 997890.3\n#> Checking results on cluster 1\n#>   total of 273 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 261 annotation obtained after removal of duplication\n#> Checking results on cluster 2\n#>   total of 334 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 329 annotation obtained after removal of duplication\n#> Checking results on cluster 3\n#>   total of 693 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 662 annotation obtained after removal of duplication\n#> Checking results on cluster 4\n#>   total of 175 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 174 annotation obtained after removal of duplication\n#> Checking results on cluster 5\n#>   total of 310 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 303 annotation obtained after removal of duplication\n#> Checking results on cluster 6\n#>   total of 898 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 868 annotation obtained after removal of duplication\n#> Checking results on cluster 7\n#>   total of 521 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 503 annotation obtained after removal of duplication\n#> Checking results on cluster 8\n#>   total of 701 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 675 annotation obtained after removal of duplication\n#> Checking results on cluster 9\n#>   total of 1140 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 1105 annotation obtained after removal of duplication\n#> Checking results on cluster 10\n#>   total of 1090 annotation obtained\n#>   remove duplicate based on pathway_name\n#>   total of 1053 annotation obtained after removal of duplication"},{"path":"function.html","id":"midas2-1","chapter":"4 Functional annotation","heading":"4.3.2 MIDAS2","text":"MIDAS2, users provide eggNOG annotation eggNOG slot stana object. fnc argument accepts KEGG_Pathway KEGG_Module available eggNOG annotation. function queries KEGG REST API obtain pathway module description.set eggNOG-mapper v2 annotation file eggNOG slot stana object.\ncan done setAnnotation function.can set removeAdditional argument filter words displayed.","code":"\nload(\"../hd_meta.rda\")\ntaxtbl <- read.table(\"../metadata_uhgg.tsv\", sep=\"\\t\",\n                     header=1, row.names=1, check.names = FALSE)\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=c(\"101346\"), taxtbl=taxtbl, db=\"uhgg\")\n#>   101346\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__Bacteroides;s__Bacteroides uniformis\n#>     Number of snps: 70178\n#>     Number of samples: 28\n#>   101346\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__Bacteroides;s__Bacteroides uniformis\n#>     Number of genes: 120158\n#>     Number of samples: 31\n## Set the annotation file\nstana <- setAnnotation(stana, list(\"101346\"=\"../annotations_uhgg/101346_eggnog_out.emapper.annotations\"))\nlibrary(ComplexHeatmap)\nlibrary(simplifyEnrichment)\n\nplotHeatmap(stana, \"101346\",\n    fnc=\"KEGG_Module\",\n    removeAdditional=c(\"cycle\",\"pathway\"),\n    filter_zero_frac = 0.5,\n    filter_max_frac = 0,\n    filter_max_value = 5)\n#> In resulting matrix, max: 4.999739, min: 0\n#> Dimension: 3501, 31\n#> MIDAS2, looking for the annotation file by eggNOG-mapper v2\n#> Loading annotation"},{"path":"function.html","id":"kgeg-pathway-and-kegg-orthology","chapter":"4 Functional annotation","heading":"4.4 KGEG PATHWAY and KEGG ORTHOLOGY","text":"","code":""},{"path":"function.html","id":"visualization-of-kegg-pathway","chapter":"4 Functional annotation","heading":"4.4.1 Visualization of KEGG PATHWAY","text":"KEGG PATHWAY frequently used characterize metabolic function microbiome. Utilizing ggkegg, information intra-species diversity, particulary gene copy number differences, can reflected onto KEGG PATHWAY. needs genes slot filled, annotations files, typically eggNOG-mapper v2, needed.","code":""},{"path":"function.html","id":"visualizing-differences-per-species","chapter":"4 Functional annotation","heading":"4.4.1.1 Visualizing differences per species","text":"Load profile multiple species.Next, set eggNOG-mapper v2 annotation file eggNOG slot stana object.\nway, plotKEGGPathway function automatically calculates abundance user-defined method.plotKEGGPathway can run providing stana object, species (multiple species, rectangular nodes split),\npathway ID visualize. , visualize ko00620, Pyruvate metabolism example. large annotation table, calculation takes time can provide pre-calculated KO table kos slot stana object, specify only_ko = TRUE first return KO table.default, scale . install ggh4x, multiple scales can added, specifying multi_scale argument.can provide multiple pathway IDs pathway_id, returns list plot.way, differences orthologies pathway across multiple species can readily captured.","code":"\nload(\"../hd_meta.rda\")\ntaxtbl <- read.table(\"../metadata_uhgg.tsv\", sep=\"\\t\",\n                     header=1, row.names=1, check.names = FALSE)\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=c(\"101346\",\"102438\"), taxtbl=taxtbl, db=\"uhgg\")\n#>   101346\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__Bacteroides;s__Bacteroides uniformis\n#>     Number of snps: 70178\n#>     Number of samples: 28\n#>   102438\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Tannerellaceae;g__Parabacteroides;s__Parabacteroides distasonis\n#>     Number of snps: 18102\n#>     Number of samples: 28\n#>   101346\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__Bacteroides;s__Bacteroides uniformis\n#>     Number of genes: 120158\n#>     Number of samples: 31\n#>   102438\n#>   d__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Tannerellaceae;g__Parabacteroides;s__Parabacteroides distasonis\n#>     Number of genes: 47046\n#>     Number of samples: 29\n## Set the annotation file\nstana <- setAnnotation(stana, list(\"101346\"=\"../annotations_uhgg/101346_eggnog_out.emapper.annotations\",\n    \"102438\"=\"../annotations_uhgg/102438_eggnog_out.emapper.annotations\"))\nstana <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", only_ko=TRUE, multi_scale=FALSE)\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", multi_scale=FALSE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"), pathway_id=\"ko00620\", multi_scale=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"),\n                      pathway_id=c(\"ko00270\",\"ko00620\"),\n                      multi_scale=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\ngg2 <- patchwork::wrap_plots(gg)\ngg2"},{"path":"function.html","id":"visualizing-calculated-values-across-species","chapter":"4 Functional annotation","heading":"4.4.2 Visualizing calculated values across species","text":"want see sum values across species, can set option summarize=TRUE. way, KO values across specified species summed, compared groups, plotted.","code":"\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"),\n                      pathway_id=c(\"ko00270\",\"ko00620\"),\n                      summarize=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 102438: HC / R\ngg2 <- patchwork::wrap_plots(gg)\ngg2"},{"path":"function.html","id":"show-which-species-have-the-kos","chapter":"4 Functional annotation","heading":"4.4.3 Show which species have the KOs","text":"specify point_mode=TRUE, function plot points KOs pathways\nbased whether specified species corresponding KOs annotated.","code":"\ngg <- plotKEGGPathway(stana, c(\"101346\",\"102438\"),\n                      pathway_id=c(\"ko00270\"),\n                      sp_colors=c(\"blue\",\"red\") |> setNames(c(\"101346\",\"102438\")),\n                      point_mode=TRUE)\n#> Using pre-computed KO table\n#> Using pre-computed KO table\n#> 101346: HC / R\n#> 102438: HC / R\n#> Point mode enabled\n#> Warning in geom_node_point(aes(fill = \"transparent\"), x = nds_tmp$tmp_x, : All aesthetics have length 1, but the data has 51 rows.\n#> ℹ Did you mean to use `annotate()`?\n#> Warning in geom_node_point(aes(fill = \"transparent\"), x = nds_tmp$tmp_x, : All aesthetics have length 1, but the data has 47 rows.\n#> ℹ Did you mean to use `annotate()`?\ngg\n#> $ko00270"},{"path":"function.html","id":"setting-the-manual-annotation","chapter":"4 Functional annotation","heading":"4.5 Setting the manual annotation","text":"Using setMap function, one can set stana object named data frame mapping file gene gene families.\ncase, data.frame two column layouts, first column corresponds gene ID second column corresponds gene family IDs.","code":"\nstana <- setMap(stana, \"101346\", data.frame(c(\"geneID1\",\"geneID2\"), c(\"K00001\",\"K00002\")))"},{"path":"visualization.html","id":"visualization","chapter":"5 Visualization","heading":"5 Visualization","text":"stana offers visualization functions can interpret profiled data.","code":"\nlibrary(stana)\nlibrary(ComplexHeatmap)"},{"path":"visualization.html","id":"plotsnvsummary-and-plotsnvinfo","chapter":"5 Visualization","heading":"5.1 plotSNVSummary and plotSNVInfo","text":"functions can used plot information related SNV, can used inspect overview profiled SNVs.","code":"\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=\"102478\")\n#>   102478\n#>     Number of snps: 77431\n#>     Number of samples: 31\n#>   102478\n#>     Number of genes: 150996\n#>     Number of samples: 32\nplotSNVSummary(stana, \"102478\")\nplotSNVInfo(stana, \"102478\")"},{"path":"visualization.html","id":"plotmaf","chapter":"5 Visualization","heading":"5.2 plotMAF","text":"functions plots boxplot MAF groups.","code":"\nplotMAF(stana, \"102478\", row.names(getSlot(stana, \"snpsInfo\")[[1]])[1])"},{"path":"visualization.html","id":"plotcoverage","chapter":"5 Visualization","heading":"5.3 plotCoverage","text":"function plots coverage canddiate species across group.","code":"\nplotCoverage(stana, \"102478\")"},{"path":"visualization.html","id":"plotpca","chapter":"5 Visualization","heading":"5.4 plotPCA","text":"can plot principal component analysis results using prcomp plotPCA function across grouping specified. group specified, No_Group label assigned samples.","code":"\nmt <- loadmetaSNV(\"../metasnv_sample_out/\",just_species = TRUE)\nmt <- loadmetaSNV(\"../metasnv_sample_out/\", candSp=mt[1])\n#>   Loading refGenome1clus\nplotPCA(mt, species=getID(mt)[1])\n#> After filtering: 1022 SNVs\n#> $refGenome1clus"},{"path":"visualization.html","id":"plotcirclize","chapter":"5 Visualization","heading":"5.5 plotCirclize","text":"function can used circlize plot, can link information related MAF SNV gene copy number analysis. function needs snpsInfo slot filled data genome_id, gene_id position column. MIDAS2 inStrain, packge automatically infers genome_id.","code":"\nlibrary(circlize)\n#> ========================================\n#> circlize version 0.4.15\n#> CRAN page: https://cran.r-project.org/package=circlize\n#> Github page: https://github.com/jokergoo/circlize\n#> Documentation: https://jokergoo.github.io/circlize_book/book/\n#> \n#> If you use it in published research, please cite:\n#> Gu, Z. circlize implements and enhances circular visualization\n#>   in R. Bioinformatics 2014.\n#> \n#> This message can be suppressed by:\n#>   suppressPackageStartupMessages(library(circlize))\n#> ========================================\n#> \n#> Attaching package: 'circlize'\n#> The following object is masked from 'package:igraph':\n#> \n#>     degree\nplotCirclize(stana, \"102478\", genomeId=\"UHGG143505\", thresh_snp_gene = 150)\n#> Type is MIDAS2\n#> Features not provided, default to sample_counts\n#> Genome ID in SNV information:\n#>   UHGG143505_1: 179 - 5439351, number of position: 77431\n#> Genome ID: UHGG143505\n#> Included position: 987\n#> Note: 1 point is out of plotting region in sector\n#> 'UHGG143505_00169', track '1'.\n#> Note: 16 points are out of plotting region in sector\n#> 'UHGG143505_00169', track '1'.\n#> Note: 1 point is out of plotting region in sector\n#> 'UHGG143505_01855', track '1'.\n#> Note: 16 points are out of plotting region in sector\n#> 'UHGG143505_01855', track '1'.\n#> Note: 1 point is out of plotting region in sector\n#> 'UHGG143505_01894', track '1'.\n#> Note: 16 points are out of plotting region in sector\n#> 'UHGG143505_01894', track '1'.\n#> Note: 1 point is out of plotting region in sector\n#> 'UHGG143505_02021', track '1'.\n#> Note: 16 points are out of plotting region in sector\n#> 'UHGG143505_02021', track '1'.\n#> Note: 1 point is out of plotting region in sector\n#> 'UHGG143505_03685', track '1'.\n#> Note: 16 points are out of plotting region in sector\n#> 'UHGG143505_03685', track '1'."},{"path":"visualization.html","id":"visualization-of-gene-copy-numbers","chapter":"5 Visualization","heading":"5.6 Visualization of gene copy numbers","text":"violin plot gene copy numbers can plotted plotGenes.Default color mapping can changed changeColors.","code":"\nload(\"../hd_meta.rda\")\nstana <- loadMIDAS2(\"../merge_uhgg\", cl=hd_meta, candSp=\"102478\")\n#>   102478\n#>     Number of snps: 77431\n#>     Number of samples: 31\n#>   102478\n#>     Number of genes: 150996\n#>     Number of samples: 32\nplotGenes(stana, \"102478\", c(\"UHGG000186_00531\",\"UHGG000186_00521\"))\nstana <- changeColors(stana, c(\"blue\",\"red\"))\nplotGenes(stana, \"102478\", c(\"UHGG000186_00531\",\"UHGG000186_00521\"))"},{"path":"visualization.html","id":"visualization-of-phylogenetic-tree","chapter":"5 Visualization","heading":"5.7 Visualization of phylogenetic tree","text":"See 3.1 functions like inferAndPlotTree visualizing phylogenetic tree inferred various methods.","code":""},{"path":"visualization.html","id":"visualization-of-functional-analysis-results","chapter":"5 Visualization","heading":"5.8 Visualization of functional analysis results","text":"See 4 functions like plotHeatmap plotKEGGPathway.","code":""},{"path":"visualization.html","id":"visualization-of-instrain-results","chapter":"5 Visualization","heading":"5.9 Visualization of inStrain results","text":"specific software, imported inStrain compare profiles can visualized. loaded genome-wide comparison table strain cluster table can visualized using genomeHeatmap strainClusterHeatmap ComplexHeatmap. genomeHeatmap, typically population ANI consensus ANI plotted, columns listed genomeWide_compare.tsv can plotted. parameters passed Heatmap can specified heatmapArgs. cluster information (getCl(stana)) available cl specified, columns split present grouping. Please refer documentation inStrain popANI conANI.","code":"\ninstr_chk <- \"GUT_GENOME142015\"\ninstr <- loadInStrain(\"../inStrain_out\", instr_chk)\ngenomeHeatmap(instr, instr_chk, column = \"popANI\", heatmapArgs = list(show_column_name=FALSE))\nstrainClusterHeatmap(instr, instr_chk, heatmapArgs = list(show_column_name=FALSE))"},{"path":"interactive-inspection.html","id":"interactive-inspection","chapter":"6 Interactive inspection","heading":"6 Interactive inspection","text":"stana offers interactive inspection metagenotyping results examining intra-species diversity.purpose, exportInteractive() function prepared. expects gene family (KO) abundance tables set kos slot, tree set treeList slot using functions like consensusSeq. However, available, gene copy number table alone can used export interactive application. function outputs necessary data shiny codes specified directory run app.example resulting interactive application can found .","code":"\nlibrary(stana)\nload(system.file(\"extdata\", \"sysdata.rda\", package = \"stana\"))\n## Default to export to the current directory\nexportInteractive(stana)\n#> Warning in dir.create(paste0(out, \"/data\")): '.\\data'\n#> already exists\n#> No tree for 100003\n#> Tree number: 0, KO (or gene) number: 1\n#> Exporting ...\n#> # A stana: MIDAS2\n#> # Database: uhgg\n#> # Loaded directory: midas2_sample_merge_uhgg\n#> # Species number: 1\n#> # Group info (list): Group1/Group2\n#> # Loaded SNV table: 1 ID: 100003\n#> # Loaded gene table: 1 ID: 100003\n#> # Loaded KO table: 1 ID: 100003\n#> # Size: 7623472 B\n#> # \n#> # SNV description\n#> # A tibble: 2 × 3\n#> # Groups:   group [2]\n#>   group  species_id                                        n\n#>   <chr>  <chr>                                         <int>\n#> 1 Group1 d__Bacteria;p__Bacteroidota;c__Bacteroidia;o…     4\n#> 2 Group2 d__Bacteria;p__Bacteroidota;c__Bacteroidia;o…     7"},{"path":"analysis-example.html","id":"analysis-example","chapter":"7 Analysis example","heading":"7 Analysis example","text":"demonstrate analysis metagenotyping results using stana. use gut microbiome data Crohn’s disease patients publication et al. (et al. 2017). , investigate genotyping results MIDAS2, specifically Bacteroides dorei species reported play role disease gut microbiome.First load MIDAS2 results specifying merged MIDAS2 directory, specifying species load database used.","code":""},{"path":"analysis-example.html","id":"snv-analysis","chapter":"7 Analysis example","heading":"7.1 SNV analysis","text":"Get brief overview SNVs.Based SNV related statistics SNV, consensus multiple sequence alignment made consensusSeq function. can accessed getFasta function. time, filter samples mean_coverage.Based MSA, phylogenetic tree can inferred inferAndPlotTree. Inferring function can specified treeFun default upgma function phangorn, can stated functions. tree plot shows cladogram default, can overridden branch.length argument passed ggtree.Using cophenetic distance matrix tree, PERMANOVA performed. Note doAdonis can accept distance matrices samples calculated gene copy numbers.","code":"\nlibrary(stana)\nlibrary(dplyr)\n\n## Make grouping list using SRA run table\nmeta <- read.table(\"../clinical/CrohnSubset/metadata.tsv\", sep=\"\\t\", header=1)\npd <- meta$Run %>% setNames(meta$diganosis)\ncl <- split(pd, names(pd))\ncl <- lapply(cl, unname)\ncl\n#> $CD\n#>  [1] \"ERR1620255\" \"ERR1620256\" \"ERR1620257\" \"ERR1620258\"\n#>  [5] \"ERR1620259\" \"ERR1620260\" \"ERR1620261\" \"ERR1620262\"\n#>  [9] \"ERR1620263\" \"ERR1620264\" \"ERR1620265\" \"ERR1620266\"\n#> [13] \"ERR1620267\" \"ERR1620268\" \"ERR1620269\" \"ERR1620270\"\n#> [17] \"ERR1620271\" \"ERR1620272\" \"ERR1620273\" \"ERR1620274\"\n#> [21] \"ERR1620275\" \"ERR1620276\" \"ERR1620278\" \"ERR1620279\"\n#> [25] \"ERR1620280\" \"ERR1620281\" \"ERR1620282\" \"ERR1620283\"\n#> [29] \"ERR1620284\" \"ERR1620285\" \"ERR1620286\" \"ERR1620287\"\n#> [33] \"ERR1620288\" \"ERR1620289\" \"ERR1620290\" \"ERR1620291\"\n#> [37] \"ERR1620292\" \"ERR1620293\" \"ERR1620294\" \"ERR1620295\"\n#> [41] \"ERR1620296\" \"ERR1620297\" \"ERR1620298\" \"ERR1620299\"\n#> [45] \"ERR1620300\" \"ERR1620301\" \"ERR1620302\" \"ERR1620303\"\n#> [49] \"ERR1620304\" \"ERR1620305\" \"ERR1620306\" \"ERR1620307\"\n#> [53] \"ERR1620308\" \"ERR1620309\" \"ERR1620313\" \"ERR1620314\"\n#> [57] \"ERR1620315\" \"ERR1620316\" \"ERR1620317\" \"ERR1620318\"\n#> [61] \"ERR1620319\" \"ERR1620320\" \"ERR1620321\"\n#> \n#> $Control\n#>  [1] \"ERR1620322\" \"ERR1620323\" \"ERR1620324\" \"ERR1620325\"\n#>  [5] \"ERR1620326\" \"ERR1620327\" \"ERR1620328\" \"ERR1620329\"\n#>  [9] \"ERR1620330\" \"ERR1620331\" \"ERR1620332\" \"ERR1620333\"\n#> [13] \"ERR1620334\" \"ERR1620335\" \"ERR1620336\" \"ERR1620337\"\n#> [17] \"ERR1620338\" \"ERR1620339\" \"ERR1620340\" \"ERR1620341\"\n#> [21] \"ERR1620342\" \"ERR1620343\" \"ERR1620344\" \"ERR1620346\"\n#> [25] \"ERR1620347\" \"ERR1620348\" \"ERR1620349\" \"ERR1620350\"\n#> [29] \"ERR1620351\" \"ERR1620352\" \"ERR1620353\" \"ERR1620355\"\n#> [33] \"ERR1620356\" \"ERR1620357\" \"ERR1620358\" \"ERR1620359\"\n#> [37] \"ERR1620360\" \"ERR1620361\" \"ERR1620362\" \"ERR1620363\"\n#> [41] \"ERR1620364\" \"ERR1620365\" \"ERR1620366\" \"ERR1620367\"\n#> [45] \"ERR1620368\" \"ERR1620369\" \"ERR1620370\" \"ERR1620371\"\n#> [49] \"ERR1620372\" \"ERR1620373\" \"ERR1620374\" \"ERR1620375\"\n#> [53] \"ERR1620376\" \"ERR1620377\"\n\n## Load the B. dorei profile\ncand_species <- \"102478\"\nstana <- loadMIDAS2(\"../clinical/CrohnSubset\", candSp=cand_species, cl=cl, db=\"uhgg\")\n#>   102478\n#>     Number of snps: 80029\n#>     Number of samples: 98\n#>   102478\n#>     Number of genes: 208821\n#>     Number of samples: 99\nstana\n#> # A stana: MIDAS2\n#> # Database: uhgg\n#> # Loaded directory: ../clinical/CrohnSubset\n#> # Species number: 1\n#> # Group info (list): CD/Control\n#> # Loaded SNV table: 1 ID: 102478\n#> # Loaded gene table: 1 ID: 102478\n#> # Size: 310904480 B\n#> # \n#> # SNV description\n#> # A tibble: 3 × 3\n#> # Groups:   group [3]\n#>   group   species_id                                       n\n#>   <chr>   <chr>                                        <int>\n#> 1 CD      d__Bacteria;p__Bacteroidota;c__Bacteroidia;…    44\n#> 2 Control d__Bacteria;p__Bacteroidota;c__Bacteroidia;…    50\n#> 3 <NA>    d__Bacteria;p__Bacteroidota;c__Bacteroidia;…     4\n## The level contains NA\nstana <- stana <- stana::changeColors(stana, c(\"tomato\",\"steelblue\",\"gold\"))\n\nplotSNVInfo(stana, cand_species)\nplotSNVSummary(stana, cand_species)\nstana <- consensusSeq(stana, cand_species, argList=list(\"mean_depth\"=20))\n#> Beginning calling for 102478\n#>   Site number: 80029\n#>   Profiled samples: 98\n#>   Included samples: 82\ngetFasta(stana)[[cand_species]]\n#> 82 sequences with 72042 character and 30516 different site patterns.\n#> The states are a c g t\nstana <- inferAndPlotTree(stana, cand_species, target=\"fasta\", treeFun=\"upgma\")\ngetTree(stana)[[cand_species]]\n#> \n#> Phylogenetic tree with 82 tips and 81 internal nodes.\n#> \n#> Tip labels:\n#>   ERR1620255, ERR1620256, ERR1620257, ERR1620258, ERR1620260, ERR1620264, ...\n#> \n#> Rooted; includes branch lengths.\ngetTreePlot(stana)[[cand_species]]\nstana <- doAdonis(stana, cand_species, target=\"tree\")\n#> Performing adonis in 102478\n#> Warning in att$heading[2] <- deparse(match.call(),\n#> width.cutoff = 500L): number of items to replace is not a\n#> multiple of replacement length\n#>   F: 1.55515904503209, R2: 0.0200522965097537, Pr: 0.287\ngetAdonis(stana)[[cand_species]]\n#> Permutation test for adonis under reduced model\n#> Terms added sequentially (first to last)\n#> Permutation: free\n#> Number of permutations: 999\n#> \n#> adonis2(formula = d ~ gr, na.action = function (object, ...) \n#>          Df SumOfSqs      R2      F Pr(>F)\n#> gr        1    2.029 0.02005 1.5552  0.287\n#> Residual 76   99.147 0.97995              \n#> Total    77  101.176 1.00000"},{"path":"analysis-example.html","id":"gene-copy-number-analysis","chapter":"7 Analysis example","heading":"7.2 Gene copy number analysis","text":"gene annotation obtained eggNOG-mapper, resulting file can set setAnnotation function.Aggregate gene copy numbers KEGG ORTHOLOGY (gene family) level.Perform NMF KO abundance tables rank two assuming two factors within species.Using information inspect two factors different metabolic functions.Boruta function can used identify genes distinguishing two conditions (CD vs Control).","code":"\nstana <- setAnnotation(stana, annotList=list(\"102478\"=\"../clinical/CrohnSubset/102478_eggnog_out.emapper.annotations\"))\nstana <- calcKO(stana, cand_species)\nstana <- NMF(stana, cand_species, rank=2)\n#> Original features: 3570 \n#> Original samples: 99 \n#> Filtered features: 3570 \n#> Filtered samples: 99 \n#> Rank 2 \n#> Mean relative abundances: 0.8978259 0.1021741 \n#> Present feature per strain: 3535 2957\nplotAbundanceWithinSpecies(stana, cand_species)\nlibrary(ggrepel)\n#> Warning: package 'ggrepel' was built under R version 4.3.2\npw <- data.frame(pathwayWithFactor(stana, cand_species, tss=TRUE, change_name=TRUE))\npw[[\"name\"]] <- row.names(pw)\nggplot(pw, aes(x=pw[,1], y=pw[,2]))+\n    geom_point()+\n    geom_text_repel(aes(label=name), bg.colour=\"white\")+\n    geom_smooth()+xlab(\"1\")+ylab(\"2\")+\n    cowplot::theme_cowplot()\n#> `geom_smooth()` using method = 'loess' and formula = 'y ~\n#> x'\n#> Warning: ggrepel: 296 unlabeled data points (too many\n#> overlaps). Consider increasing max.overlaps\n\nfc <- pw[,1] - pw[,2]\nnames(fc) <- pw[[\"name\"]]\nnms <- names(sort(abs(fc[!is.infinite(fc)]), decreasing=TRUE) %>% head(20))\n\nlibrary(pheatmap)\npheatmap(pw[nms, 1:2])\nlibrary(Boruta)\nbor <- doBoruta(stana, cand_species, target=\"kos\")\n#> Using grouping from the slot\n#> Feature number: 3570\n#> Performing Boruta\nconf <- names(bor$boruta$finalDecision[bor$boruta$finalDecision==\"Confirmed\"])\n\nlibrary(BiocFileCache)\n#> Loading required package: dbplyr\n#> \n#> Attaching package: 'dbplyr'\n#> The following objects are masked from 'package:dplyr':\n#> \n#>     ident, sql\nbfc <- BiocFileCache()\nurl <- bfcrpath(bfc,\"https://rest.kegg.jp/list/ko\")\nreadr::read_delim(url, col_names = FALSE) %>%\n    mutate(X1=paste0(\"ko:\",X1)) %>%\n    filter(X1 %in% conf)\n#> Rows: 26323 Columns: 2\n#> ── Column specification ────────────────────────────────────\n#> Delimiter: \"\\t\"\n#> chr (2): X1, X2\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n#> # A tibble: 69 × 2\n#>    X1        X2                                             \n#>    <chr>     <chr>                                          \n#>  1 ko:K00005 gldA; glycerol dehydrogenase [EC:1.1.1.6]      \n#>  2 ko:K00008 SORD, gutB; L-iditol 2-dehydrogenase [EC:1.1.1…\n#>  3 ko:K00390 cysH; phosphoadenosine phosphosulfate reductas…\n#>  4 ko:K00433 cpo; non-heme chloroperoxidase [EC:1.11.1.10]  \n#>  5 ko:K00632 fadA, fadI; acetyl-CoA acyltransferase [EC:2.3…\n#>  6 ko:K00981 E2.7.7.41, CDS1, CDS2, cdsA; phosphatidate cyt…\n#>  7 ko:K01182 IMA, malL; oligo-1,6-glucosidase [EC:3.2.1.10] \n#>  8 ko:K01226 treC; trehalose-6-phosphate hydrolase [EC:3.2.…\n#>  9 ko:K01267 DNPEP; aspartyl aminopeptidase [EC:3.4.11.21]  \n#> 10 ko:K01439 dapE; succinyl-diaminopimelate desuccinylase […\n#> # ℹ 59 more rows"}]
