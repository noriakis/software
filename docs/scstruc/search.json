[{"path":"index.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"scstruc package designed estimate gene regulatory networks (GRNs) single-cell transcriptomics (SCT) data using Bayesian networks (BN). Notably, package focuses following points:Implementation algorithms tailored SCT data characteristics, dropouts (zero-inflation).Evaluating inferred networks based causal validity.Probabilistic reasoning extraction differences regulatory relationships groupsComprehensive visualization understanding resulting GRNs.BN estimate directed relationships genes useful GRN inference. package also supports DAG estimation popular GRN inference software tools, significantly expanding applicability GRNs SCT data analysis.","code":""},{"path":"index.html","id":"installation-and-prerequiresties","chapter":"1 Introduction","heading":"1.1 Installation and prerequiresties","text":"need packages needs installed using full functions scstruc.CCDr algorithm following repository:HurdleNormal package following repository:CCDr algorithm HurdleNormal package, please consult original papers (McDavid et al. 2019; Aragam Zhou 2015).","code":"\ndevtools::install_github(\"noriakis/scstruc\")\ndevtools::install_github(\"itsrainingdata/sparsebnUtils\")\ndevtools::install_github(\"noriakis/ccdrAlgorithm\")\ndevtools::install_github(\"amcdavid/HurdleNormal\")"},{"path":"basic-usage-of-scstruc.html","id":"basic-usage-of-scstruc","chapter":"2 Basic usage of scstruc","heading":"2 Basic usage of scstruc","text":"part present use package inference network evaluation. Basically, object storing (normalized) expression matrix, primary function scstruc can perform inference. use mock data generated scran::mockSCE function .obtain simulated data mockSCE function scuttle, log-normalize count default parameter.","code":"\nlibrary(scran)\nlibrary(scstruc)\nlibrary(ggraph)\nlibrary(bnlearn)\nlibrary(tibble)\nset.seed(0)\nsce <- mockSCE()\nsce <- logNormCounts(sce)\nsce\n#> class: SingleCellExperiment \n#> dim: 2000 200 \n#> metadata(0):\n#> assays(2): counts logcounts\n#> rownames(2000): Gene_0001 Gene_0002 ... Gene_1999\n#>   Gene_2000\n#> rowData names(0):\n#> colnames(200): Cell_001 Cell_002 ... Cell_199\n#>   Cell_200\n#> colData names(4): Mutation_Status Cell_Cycle\n#>   Treatment sizeFactor\n#> reducedDimNames(0):\n#> mainExpName: NULL\n#> altExpNames(1): Spikes"},{"path":"basic-usage-of-scstruc.html","id":"bayesian-network","chapter":"2 Basic usage of scstruc","heading":"2.1 Bayesian network","text":"Bayesian networks probabilistic graphical models represent set random variables \\(X = \\{X_1, \\dots, X_N\\}\\), conditional dependencies using directed acyclic graph (DAG). widely used various domains, economics, medicine, decision-making, modeling complex relationships among variables transcriptomics data. package, infer relationships among genes, representing transcriptional regulation .graphical separation nodes G implies conditional independence corresponding variables leads factorization:\\[\nP(X \\mid G; \\theta) = \\prod_{=1}^{N} P(X_i \\mid \\pi_{X_i}; \\theta_{X_i}) \\quad \\text{} \\pi_{X_i} = \\{ \\text{parents } X_i \\text{ } G \\}\n\\]package, various algorithms implemented tailored account nature SCT data, dropouts.","code":""},{"path":"basic-usage-of-scstruc.html","id":"preprocessing-of-single-cell-transcriptomics-data-and-preparation","chapter":"2 Basic usage of scstruc","heading":"2.2 Preprocessing of single-cell transcriptomics data and preparation","text":"reduce computational burden obtain interpretable results, preprocessing steps preparation suggested.","code":""},{"path":"basic-usage-of-scstruc.html","id":"coarse-graining-expression-data-metacell-expression","chapter":"2 Basic usage of scstruc","heading":"2.2.1 Coarse-graining expression data (metacell expression)","text":"package can use metacell approach reduce computational burden required perform structure learning SCT data. package features superCellMat function using SuperCell package available CRAN. employs cell aggregation approach reduce dataset complexity preserving key biological variabilityã€€(Bilous et al. 2022). step optional one can use untransformed data directly.matrix (p x n, unlike functions package) can supplied function well.","code":"\nlibrary(SuperCell)\ndim(sce)\n#> [1] 2000  200\nrowData(sce)[\"ID\"] <- row.names(sce)\nsce <- superCellMat(sce, ID=\"ID\")\n#>   SuperCell dimension: 2000 20\ndim(sce)\n#> [1] 2000   20\neco <- readRDS(\"../ecoli70.rds\")\nrawmat <- rbn(eco, 1000)\ncgmat <- superCellMat(t(rawmat), pca=FALSE)\n#>   SuperCell dimension: 46 100\ndim(cgmat)\n#> [1]  46 100"},{"path":"basic-usage-of-scstruc.html","id":"obtaining-interesting-gene-identifiers","chapter":"2 Basic usage of scstruc","heading":"2.2.2 Obtaining interesting gene identifiers","text":"inference, first subset genes interesting biological pathway (ECM receptor interaction cells annotated vascular endothelial cells). purpose, two functions prepared. One fetching gene identifiers Gene Ontology, another KEGG PATHWAY.","code":""},{"path":"basic-usage-of-scstruc.html","id":"getgogenes","chapter":"2 Basic usage of scstruc","heading":"2.2.2.1 getGOGenes","text":"can obtain genes involved gene ontology using identifier.","code":"\nlibrary(scstruc)\nlibrary(org.Mm.eg.db)\ngenes <- getGOGenes(\"GO:0030198\", orgDb=org.Mm.eg.db)\ngenes[1:5]\n#> [1] \"Abl1\"    \"Abl1\"    \"Abl2\"    \"Adamts1\" \"Adamts1\""},{"path":"basic-usage-of-scstruc.html","id":"getkeggpathwaygenes","chapter":"2 Basic usage of scstruc","heading":"2.2.2.2 getKEGGPathwayGenes","text":"can obtain genes involved KEGG PATHWAY using KEGG identifier organism identifier. obtaining genes involved mTOR signaling pathway Mus musculus. need specify organism database order correcrly convert obtained identifiers.can pass genes inference scstruc function. Also, published package estimates GRNs omics data based enrichment analysis results past, approach useful (Sato et al. 2022).","code":"\nlibrary(KEGGREST)\ngenes <- getKEGGPathwayGenes(\"mmu04150\", orgDb=org.Mm.eg.db)\ngenes[1:5]\n#> [1] \"Prkaa1\"  \"Prkaa2\"  \"Atp6v1h\" \"Prr5\"    \"Braf\""},{"path":"basic-usage-of-scstruc.html","id":"actual-structure-learning","chapter":"2 Basic usage of scstruc","heading":"2.3 Actual structure learning","text":"scstruc function needs SingleCellExperiment object storing gene expression data. Also, gene list must specified. analysis, randomly subset gene identifiers used input. changeSymbol argument refers changing gene names subset matrix specified symbolColumn argument (default Symbol). example, corresponding symbol argument set FALSE. Also, algorithm set mmhc default, performs max-min hill climbing approach.default, returns bn object bnlearn actual data used inference. returnBn set FALSE, function returns tidygraph object. can used various downstream tasks, visualization, probabilistic reasoning, evaluation based biological pathway information. details including use various algorithms learning described following sections.","code":"\nincluded_genes <- sample(row.names(sce), 100)\ngs <- scstruc(sce, included_genes, changeSymbol=FALSE)\nnames(gs)\n#> [1] \"net\"  \"data\"\ngs$net\n#> \n#>   Bayesian network learned via Hybrid methods\n#> \n#>   model:\n#>    [Gene_0018][Gene_0021][Gene_0037][Gene_0047][Gene_0074]\n#>    [Gene_0090][Gene_0092][Gene_0110][Gene_0124][Gene_0145]\n#>    [Gene_0176][Gene_0232][Gene_0244][Gene_0249][Gene_0253]\n#>    [Gene_0267][Gene_0346][Gene_0432][Gene_0453][Gene_0468]\n#>    [Gene_0471][Gene_0512][Gene_0537][Gene_0543][Gene_0544]\n#>    [Gene_0554][Gene_0574][Gene_0617][Gene_0647][Gene_0725]\n#>    [Gene_0900][Gene_0946][Gene_1002][Gene_1095][Gene_1400]\n#>    [Gene_1401][Gene_1428][Gene_1473][Gene_1614][Gene_1673]\n#>    [Gene_1738][Gene_1770][Gene_1803][Gene_1807][Gene_1815]\n#>    [Gene_1860][Gene_1923][Gene_1972][Gene_0324|Gene_0018]\n#>    [Gene_0356|Gene_0092][Gene_0458|Gene_0176]\n#>    [Gene_0621|Gene_0512][Gene_0817|Gene_0647]\n#>    [Gene_0867|Gene_0725][Gene_0908|Gene_0037]\n#>    [Gene_0940|Gene_0617][Gene_0978|Gene_0554]\n#>    [Gene_1027|Gene_0074][Gene_1031|Gene_0471]\n#>    [Gene_1070|Gene_0468:Gene_0544:Gene_1400]\n#>    [Gene_1087|Gene_0090][Gene_1101|Gene_0725]\n#>    [Gene_1170|Gene_0047][Gene_1244|Gene_0253]\n#>    [Gene_1347|Gene_0267][Gene_1365|Gene_0110]\n#>    [Gene_1379|Gene_0512][Gene_1541|Gene_0453]\n#>    [Gene_1544|Gene_1401][Gene_1594|Gene_0574]\n#>    [Gene_1604|Gene_0018][Gene_1634|Gene_0453]\n#>    [Gene_1757|Gene_1095][Gene_1784|Gene_0074]\n#>    [Gene_1788|Gene_0543][Gene_1849|Gene_0090]\n#>    [Gene_1878|Gene_0574][Gene_1887|Gene_0544]\n#>    [Gene_1890|Gene_1473][Gene_1956|Gene_0176]\n#>    [Gene_0056|Gene_1788][Gene_0396|Gene_0940:Gene_1770]\n#>    [Gene_0455|Gene_1170:Gene_1972]\n#>    [Gene_0741|Gene_0232:Gene_1604][Gene_0879|Gene_1878]\n#>    [Gene_0920|Gene_1849][Gene_0955|Gene_1031]\n#>    [Gene_1034|Gene_1544][Gene_1414|Gene_0249:Gene_1379]\n#>    [Gene_1436|Gene_1347][Gene_1443|Gene_0021:Gene_0978]\n#>    [Gene_1668|Gene_1594][Gene_1689|Gene_1101]\n#>    [Gene_1822|Gene_0458][Gene_0076|Gene_1034]\n#>    [Gene_0311|Gene_0879:Gene_1087][Gene_0363|Gene_1668]\n#>    [Gene_1496|Gene_0455][Gene_1591|Gene_0920]\n#>    [Gene_0051|Gene_0076:Gene_1860]\n#>   nodes:                                 100 \n#>   arcs:                                  61 \n#>     undirected arcs:                     0 \n#>     directed arcs:                       61 \n#>   average markov blanket size:           1.42 \n#>   average neighbourhood size:            1.22 \n#>   average branching factor:              0.61 \n#> \n#>   learning algorithm:                    \n#>                                         Max-Min Hill-Climbing \n#>   constraint-based method:               \n#>                                       Max-Min Parent Children \n#>   conditional independence test:         \n#>                                         Pearson's Correlation \n#>   score-based method:                    Hill-Climbing \n#>   score:                                 BIC (Gauss.) \n#>   alpha threshold:                       0.05 \n#>   penalization coefficient:              1.497866 \n#>   tests used in the learning procedure:  21744 \n#>   optimized:                             TRUE"},{"path":"penalized-regressions.html","id":"penalized-regressions","chapter":"3 Penalized regressions","heading":"3 Penalized regressions","text":"Penalized regression type regression analysis includes penalty term prevent overfitting improve generalizability model. particularly useful dealing high-dimensional data number predictors large compared number observations. terms inference GRN BN structure learning, penalized regression used successfully (Schmidt, Niculescu-Mizil, Murphy 2007). package implments core algorithms use penalization BN structure learning described .","code":""},{"path":"penalized-regressions.html","id":"algorithms","chapter":"3 Penalized regressions","heading":"3.1 Algorithms","text":"","code":""},{"path":"penalized-regressions.html","id":"glmnet_bic-and-glmnet_cv","chapter":"3 Penalized regressions","heading":"3.1.1 glmnet_BIC and glmnet_CV","text":"L1 regularization (LASSO), package uses popular R library glmnet. glmnet_BIC specified argument algo select lambda minimum BIC criteria, glmnet_CV choose lambda based cross validation specified fold numbers. glmnetBICpath returns BIC path given data.frame node name modeled. plot contains BIC path plot, fit contains fitted object BIC lambda BIC data.frame. maximize function can chosen maximize argument algorithm.args list. Greedy Equivalence Search can performed via setting argument ges.","code":"\nlibrary(scran)\nlibrary(scstruc)\nlibrary(bnlearn)\n\nsce <- mockSCE()\nsce <- logNormCounts(sce)\nincluded_genes <- sample(row.names(sce), 30)\n\n## Inference based on glmnet_CV and maximization by GES\ngs <- scstruc(sce, included_genes,\n    algorithm=\"glmnet_CV\",\n    algorithm.args=list(\"maximize\"=\"ges\"),\n    changeSymbol=FALSE)\ngs$net\n#> \n#>   Random/Generated Bayesian network\n#> \n#>   model:\n#>    [Gene_0005][Gene_0007][Gene_0187][Gene_0197][Gene_0426]\n#>    [Gene_0458][Gene_0500][Gene_0522][Gene_0737][Gene_0811]\n#>    [Gene_0816][Gene_0898][Gene_1053][Gene_1150][Gene_1159]\n#>    [Gene_1166][Gene_1230][Gene_1287][Gene_1364][Gene_1397]\n#>    [Gene_1470][Gene_1475][Gene_1481][Gene_1510][Gene_1539]\n#>    [Gene_1640][Gene_0145|Gene_0426:Gene_1640]\n#>    [Gene_0203|Gene_0005][Gene_1246|Gene_0187]\n#>    [Gene_2000|Gene_1364]\n#>   nodes:                                 30 \n#>   arcs:                                  5 \n#>     undirected arcs:                     0 \n#>     directed arcs:                       5 \n#>   average markov blanket size:           0.40 \n#>   average neighbourhood size:            0.33 \n#>   average branching factor:              0.17 \n#> \n#>   generation algorithm:                  Empty\n\n## Visualization of glmnet_BIC criteria\n## Just to obtain data to be used in the inference\ngs <- scstruc(sce, included_genes,\n    changeSymbol=FALSE, returnData=TRUE)\n\nset.seed(10)\nglmnetBICpath(gs$data, sample(colnames(gs$data), 1))[[\"plot\"]]"},{"path":"penalized-regressions.html","id":"mcp_cv-and-scad_cv","chapter":"3 Penalized regressions","heading":"3.1.2 MCP_CV and SCAD_CV","text":"glmnet_CV, library performs penalized regression baed MCP SCAD using ncvreg library.","code":"\nlibrary(ncvreg)\n\nmcp.net <- scstruc(sce, included_genes,\n    algorithm=\"MCP_CV\", returnData=FALSE,\n    changeSymbol=FALSE)\n\nscad.net <- scstruc(sce, included_genes,\n    algorithm=\"SCAD_CV\", returnData=FALSE,\n    changeSymbol=FALSE)\n\n## Using the bnlearn function to compare two networks\nbnlearn::compare(mcp.net, scad.net)\n#> $tp\n#> [1] 2\n#> \n#> $fp\n#> [1] 1\n#> \n#> $fn\n#> [1] 3"},{"path":"penalized-regressions.html","id":"l0-regularized-regression","chapter":"3 Penalized regressions","heading":"3.1.3 L0-regularized regression","text":"Based L0Learn, package performs structure learning based L0-regularized regression. L0 regularization, also known best subset selection, technique used build simpler interpretable models selecting small number important variables. L0L1 L0L2 regularization combination L0, L1, L2 regularization. details L0-, L0L1-, L0L2-regularized regression, please consult original paper (Hazimeh, Mazumder, Nonet 2023).","code":"\nl0l2.net <- scstruc(sce, included_genes,\n    algorithm=\"L0L2_CV\", returnData=FALSE,\n    changeSymbol=FALSE)\nplotNet(l0l2.net)"},{"path":"penalized-regressions.html","id":"ccdr-algorithm","chapter":"3 Penalized regressions","heading":"3.1.4 CCDr algorithm","text":"Generally, CCDr algorithm fastest algorithm learns network multiple lambdas. default, function chooses network best BIC value among multiple lambdas. supress effect obtain networks, set bestScore FALSE algorithm.args.Therefore, bootstrap-based inference can performed fast using CCDr algorithm. bootstrapping specified, function performs learning bootstrapped network multiple lambdas across replicates.","code":"\nlibrary(ccdrAlgorithm);library(sparsebnUtils)\nccdr.res <- scstruc(sce, included_genes,\n    algorithm=\"ccdr\", changeSymbol=FALSE,\n    algorithm.args=list(bestScore=FALSE))\n#> Setting `lambdas.length` to 10\n#> Returning the bn per lambda from result of ccdr.run\nnames(ccdr.res$net)\n#> [1] \"14.1421356237309\"  \"8.47798757230114\" \n#> [3] \"5.08242002399425\"  \"3.04683075789017\" \n#> [5] \"1.82652705274248\"  \"1.09497420090059\" \n#> [7] \"0.656419787945471\"\nccdr.res$net[[4]]\n#> \n#>   Random/Generated Bayesian network\n#> \n#>   model:\n#>    [Gene_0005][Gene_0007][Gene_0145][Gene_0187][Gene_0197]\n#>    [Gene_0203][Gene_0458][Gene_0500][Gene_0522][Gene_0737]\n#>    [Gene_0811][Gene_0816][Gene_0898][Gene_1053][Gene_1150]\n#>    [Gene_1159][Gene_1166][Gene_1230][Gene_1246][Gene_1287]\n#>    [Gene_1364][Gene_1397][Gene_1470][Gene_1475][Gene_1481]\n#>    [Gene_1510][Gene_1539][Gene_1640][Gene_0426|Gene_0145]\n#>    [Gene_2000|Gene_1364]\n#>   nodes:                                 30 \n#>   arcs:                                  2 \n#>     undirected arcs:                     0 \n#>     directed arcs:                       2 \n#>   average markov blanket size:           0.13 \n#>   average neighbourhood size:            0.13 \n#>   average branching factor:              0.067 \n#> \n#>   generation algorithm:                  Empty"},{"path":"penalized-regressions.html","id":"precision-lasso","chapter":"3 Penalized regressions","heading":"3.1.5 Precision lasso","text":"Precision Lasso combines LASSO precision matrix regularization process. approach particularly useful biological genomics studies, highly-correlated features often appear. implmented precision lasso R feature provided plasso.fit plasso.fit.single using RcppArmadillo. fixed lambda value specified.","code":"\npl.res <- scstruc(sce, included_genes, algorithm=\"plasso\", changeSymbol=FALSE)"},{"path":"hurdle-model.html","id":"hurdle-model","chapter":"4 Hurdle model","heading":"4 Hurdle model","text":"handling zero-inflated nature single-cell transcriptomics data, use hurdle model presented. hurdle model two-part model models whether observation zero , non-zero part separately.Based inferred network HurdleNormal, proposed multivariate Hurdle model grouped lasso learn undirected network (McDavid et al. 2019), directed acyclic graph inferred based score maximization using constraints. undirected network selected multiple lambdas based BIC criteria implemented HurdleNormal. function, Hurdle algorithm specified algorithm argument scstruc. default, score BIC bnlearn.score maximization function can set arbitrarily (maximizeFun), set hc default. Greedy Equivalence Search can performed via setting maximize argument ges.","code":"\nlibrary(HurdleNormal)\nlibrary(scstruc)\n\nsce <- mockSCE()\nsce <- logNormCounts(sce)\nincluded_genes <- sample(row.names(sce), 20)\ngs <- scstruc(sce, included_genes,\n    changeSymbol=FALSE, algorithm=\"Hurdle\")\ngs$net\n#> \n#>   Bayesian network learned via Score-based methods\n#> \n#>   model:\n#>    [Gene_0088][Gene_0162][Gene_0275][Gene_0277][Gene_0311]\n#>    [Gene_0431][Gene_0509][Gene_0646][Gene_0806][Gene_0824]\n#>    [Gene_0899][Gene_0953][Gene_0976][Gene_1079][Gene_1385]\n#>    [Gene_1462][Gene_1493][Gene_1675][Gene_1739][Gene_1896]\n#>   nodes:                                 20 \n#>   arcs:                                  0 \n#>     undirected arcs:                     0 \n#>     directed arcs:                       0 \n#>   average markov blanket size:           0.00 \n#>   average neighbourhood size:            0.00 \n#>   average branching factor:              0.00 \n#> \n#>   learning algorithm:                    Hill-Climbing \n#>   score:                                 BIC (Gauss.) \n#>   penalization coefficient:              2.649159 \n#>   tests used in the learning procedure:  0 \n#>   optimized:                             TRUE\ngs.tabu <- scstruc(sce, included_genes,\n    changeSymbol=FALSE, algorithm=\"Hurdle\",\n    algorithm.args=list(maximizeFun=bnlearn::tabu))\ngs.tabu$net\n#> \n#>   Bayesian network learned via Score-based methods\n#> \n#>   model:\n#>    [Gene_0088][Gene_0162][Gene_0275][Gene_0277][Gene_0311]\n#>    [Gene_0431][Gene_0509][Gene_0646][Gene_0806][Gene_0824]\n#>    [Gene_0899][Gene_0953][Gene_0976][Gene_1079][Gene_1385]\n#>    [Gene_1462][Gene_1493][Gene_1675][Gene_1739][Gene_1896]\n#>   nodes:                                 20 \n#>   arcs:                                  0 \n#>     undirected arcs:                     0 \n#>     directed arcs:                       0 \n#>   average markov blanket size:           0.00 \n#>   average neighbourhood size:            0.00 \n#>   average branching factor:              0.00 \n#> \n#>   learning algorithm:                    Tabu Search \n#>   score:                                 BIC (Gauss.) \n#>   penalization coefficient:              2.649159 \n#>   tests used in the learning procedure:  0 \n#>   optimized:                             TRUE\n## This performs GES\ngs.ges <- scstruc(sce, included_genes,\n    changeSymbol=FALSE, algorithm=\"Hurdle\",\n    algorithm.args=list(maximize=\"ges\"))\ngs.ges$net\n#> \n#>   Random/Generated Bayesian network\n#> \n#>   model:\n#>    [Gene_0088][Gene_0162][Gene_0275][Gene_0277][Gene_0311]\n#>    [Gene_0431][Gene_0509][Gene_0646][Gene_0806][Gene_0824]\n#>    [Gene_0899][Gene_0953][Gene_0976][Gene_1079][Gene_1385]\n#>    [Gene_1462][Gene_1493][Gene_1675][Gene_1739][Gene_1896]\n#>   nodes:                                 20 \n#>   arcs:                                  0 \n#>     undirected arcs:                     0 \n#>     directed arcs:                       0 \n#>   average markov blanket size:           0.00 \n#>   average neighbourhood size:            0.00 \n#>   average branching factor:              0.00 \n#> \n#>   generation algorithm:                  Empty"},{"path":"hurdle-model.html","id":"customized-score-for-hurdle-model","chapter":"4 Hurdle model","heading":"4.1 Customized score for hurdle model","text":"Additional score can specified using hurdle.bic function algorithm.args argument. score defined sum BIC values continuous logistic regression part hurdle model. Let \\(Y = [y_{ij}]\\) denote log-normalized expression value gene subset cell j \\(Z = [z_{ij}]\\) 0-1 indicator value whether gene expression zero. score defined :\\[\n\\text{logit}\\left(\\Pr(Z_{ij} = 1)\\right) \\sim \\beta_i G_j,\n\\]\\[\n\\Pr(Y_{ij} = y \\mid Z_{ij} = 1) \\sim N(\\beta_i G_j, \\sigma^2).\n\\]proposed MAST library, cellular detection rate adjustment (CDR) can performed scoring phase cdrAdjuetment TRUE. applies inclusion CDR term hurdle modeling score maximizing phase.","code":"\ngs2 <- scstruc(sce, included_genes,\n    changeSymbol=FALSE, algorithm=\"Hurdle\",\n    algorithm.args=list(\"score\"=hurdle.bic))\ngs2$net\n#> \n#>   Bayesian network learned via Score-based methods\n#> \n#>   model:\n#>    [Gene_0088][Gene_0162][Gene_0275][Gene_0277][Gene_0311]\n#>    [Gene_0431][Gene_0509][Gene_0646][Gene_0806][Gene_0824]\n#>    [Gene_0899][Gene_0953][Gene_0976][Gene_1079][Gene_1385]\n#>    [Gene_1462][Gene_1493][Gene_1675][Gene_1739][Gene_1896]\n#>   nodes:                                 20 \n#>   arcs:                                  0 \n#>     undirected arcs:                     0 \n#>     directed arcs:                       0 \n#>   average markov blanket size:           0.00 \n#>   average neighbourhood size:            0.00 \n#>   average branching factor:              0.00 \n#> \n#>   learning algorithm:                    Hill-Climbing \n#>   score:                                 \n#>                                  User-Provided Score Function \n#>   tests used in the learning procedure:  0 \n#>   optimized:                             TRUE"},{"path":"hurdle-model.html","id":"add.dropout","chapter":"4 Hurdle model","heading":"4.2 add.dropout","text":"Like SCT data simulator, excessive zero matrix can simulated add.dropout. function takes absolute expression values expression matrix negative.","code":"\nnet <- readRDS(\"../arth150.rds\")\nsim <- rbn(net, 100)\ntable(sim == 0)\n#> \n#> FALSE \n#> 10700\nsim.do <- sim * add.dropout(sim)\ntable(sim.do == 0)\n#> \n#> FALSE  TRUE \n#>  4385  6315"},{"path":"other-algorithms-and-software.html","id":"other-algorithms-and-software","chapter":"5 Other algorithms and software","heading":"5 Other algorithms and software","text":"","code":""},{"path":"other-algorithms-and-software.html","id":"bootstrapping","chapter":"5 Other algorithms and software","heading":"5.1 Bootstrapping","text":"obtaining reliable network, can use bootstrapping approach randomly subsampling data, infer network , average bootstrapped networks. algorithms can use bootstrapping specifying boot=TRUE. instance, use bootstrapping CCDr algorithm (fast), example codes shown . Replication number can specified R sampling number can specified m argument. way, bn.strength object returned net.","code":"\nlibrary(scstruc)\n\nsce <- mockSCE()\nsce <- logNormCounts(sce)\nincluded_genes <- sample(row.names(sce), 40)\ngs <- scstruc(sce, included_genes, R=30,\n              changeSymbol=FALSE, algorithm=\"ccdr\", boot=TRUE)\n#> Bootstrapping specified\n#> Returning the list of bn.strength\n\n## It consists of strength from multiple lambdas\nhead(gs$net[[5]])\n#>        from        to strength direction\n#> 1 Gene_0006 Gene_0024        0         0\n#> 2 Gene_0006 Gene_0035        0         0\n#> 3 Gene_0006 Gene_0068        0         0\n#> 4 Gene_0006 Gene_0155        0         0\n#> 5 Gene_0006 Gene_0178        0         0\n#> 6 Gene_0006 Gene_0268        0         0"},{"path":"other-algorithms-and-software.html","id":"pidc","chapter":"5 Other algorithms and software","heading":"5.2 PIDC","text":"PIDC algorithm based information theory leverages partial information decomposition (PID) analyze quantify relationships multiple variables (Chan, Stumpf, Babtie 2017). scstruc uses undirected network produced PIDC, implemented Julia. JuliaCall used call Julia R, users first set Julia environment. Also, path main library (NetworkInference.jl) specified NetworkInference_HOME argument. directed acyclic graph obtained based score maximization constraints produced PIDC. example code shown follows:bootstrapped-based inference can also performed. case, averaged network obtained per thresholds parameters algorithm.args. default, network thresholded seq(0.1, 0.4, 0.1).maximization can chosen scoring function available bnlearn Greedy Equivalence Search (ges), can specified parameter maximize algorithm.args.Note raw network output scaled thresholded stored temporary directory.","code":"\nlibrary(JuliaCall)\njulia <- julia_setup(JULIA_HOME = \"./Julia-1.10.5/bin\")\ngs <- scstruc(sce, included_genes,\n              changeSymbol=FALSE,\n              algorithm=\"pidc\",\n              algorithm.args=list(NetworkInference_HOME=\"./NetworkInference.jl\"))\ngs$net\ngs <- scstruc(sce, included_genes,\n              changeSymbol=FALSE,\n              algorithm=\"pidc\", boot=TRUE, R=30,\n              algorithm.args=list(NetworkInference_HOME=\"./NetworkInference.jl\"))\ngs$net"},{"path":"other-algorithms-and-software.html","id":"genie3","chapter":"5 Other algorithms and software","heading":"5.3 GENIE3","text":"GENIE3 widely used method inferring directed interactions genes based ensemble regression trees. specifying genie3 algorithm, function performs GENIE3 algorithm subsequently threshold arcs. , function returns list original results networks thresholded network DAG.","code":"\ngs <- scstruc(sce, included_genes,\n              changeSymbol=FALSE,\n              algorithm=\"genie3\")\nhead(gs$net$original)\n#>            Gene_0006  Gene_0024  Gene_0035  Gene_0068\n#> Gene_0006 0.00000000 0.03088093 0.03834214 0.02447807\n#> Gene_0024 0.01957930 0.00000000 0.01893201 0.01754363\n#> Gene_0035 0.02940798 0.02949616 0.00000000 0.02877513\n#> Gene_0068 0.02461398 0.02816775 0.02747613 0.00000000\n#> Gene_0155 0.02534968 0.01813408 0.02943684 0.03197248\n#> Gene_0178 0.01897838 0.01895927 0.01880557 0.02050140\n#>            Gene_0155  Gene_0178  Gene_0268  Gene_0285\n#> Gene_0006 0.02904142 0.02439686 0.03957938 0.02679946\n#> Gene_0024 0.01628740 0.01759800 0.01877264 0.02292221\n#> Gene_0035 0.02826699 0.02700899 0.02617555 0.02605871\n#> Gene_0068 0.03897850 0.03458415 0.03934045 0.03165985\n#> Gene_0155 0.00000000 0.01974402 0.01963389 0.01967546\n#> Gene_0178 0.01788149 0.00000000 0.02186202 0.03218175\n#>            Gene_0354  Gene_0407  Gene_0461  Gene_0474\n#> Gene_0006 0.02850355 0.02917745 0.03266967 0.02571844\n#> Gene_0024 0.01606783 0.02395562 0.01966547 0.01893470\n#> Gene_0035 0.02683567 0.03307719 0.02994596 0.02386858\n#> Gene_0068 0.03237185 0.02726279 0.02734305 0.02415926\n#> Gene_0155 0.01717159 0.02254696 0.02825549 0.02070662\n#> Gene_0178 0.02039013 0.01681829 0.01839037 0.01885531\n#>            Gene_0613  Gene_0621  Gene_0680  Gene_0681\n#> Gene_0006 0.03358618 0.02437391 0.02878870 0.03107345\n#> Gene_0024 0.03415715 0.01830281 0.01928706 0.01511642\n#> Gene_0035 0.02688471 0.02964478 0.03129199 0.02744632\n#> Gene_0068 0.02968370 0.02863495 0.02710226 0.02435848\n#> Gene_0155 0.01912834 0.02435755 0.02494557 0.02167478\n#> Gene_0178 0.02741718 0.02005268 0.02154768 0.01997393\n#>            Gene_0690  Gene_0693  Gene_0724  Gene_0754\n#> Gene_0006 0.02117753 0.02516211 0.02302914 0.02903713\n#> Gene_0024 0.01918560 0.01560746 0.01935694 0.01796692\n#> Gene_0035 0.07474305 0.02469208 0.02533006 0.02589232\n#> Gene_0068 0.02973997 0.03769346 0.03891703 0.03198661\n#> Gene_0155 0.02300340 0.02003054 0.01969889 0.02790590\n#> Gene_0178 0.02342628 0.03023963 0.02036297 0.01985533\n#>            Gene_0784  Gene_0836  Gene_0846  Gene_0947\n#> Gene_0006 0.02654190 0.02522234 0.03080537 0.04013842\n#> Gene_0024 0.02381901 0.04265656 0.03259398 0.02239880\n#> Gene_0035 0.02410693 0.02934640 0.02363304 0.03234239\n#> Gene_0068 0.02552641 0.02492546 0.02285037 0.03852429\n#> Gene_0155 0.02996549 0.01904311 0.02677543 0.01825622\n#> Gene_0178 0.01990014 0.02781590 0.01843462 0.02738928\n#>            Gene_0975  Gene_1023  Gene_1063  Gene_1140\n#> Gene_0006 0.03074997 0.03291853 0.02754159 0.02421725\n#> Gene_0024 0.01867381 0.01925868 0.01577452 0.01421171\n#> Gene_0035 0.02611413 0.02420067 0.02620930 0.02706129\n#> Gene_0068 0.02724259 0.02900529 0.02391209 0.03909870\n#> Gene_0155 0.02572670 0.02679155 0.02425918 0.02579700\n#> Gene_0178 0.02148480 0.02041351 0.02616502 0.01902780\n#>            Gene_1242  Gene_1299  Gene_1365  Gene_1374\n#> Gene_0006 0.02584367 0.02797067 0.02987608 0.04080190\n#> Gene_0024 0.01991268 0.01750479 0.02221940 0.01767164\n#> Gene_0035 0.03177332 0.02396212 0.02861492 0.04031653\n#> Gene_0068 0.03291799 0.02486527 0.03217252 0.02250598\n#> Gene_0155 0.02607348 0.02427945 0.03154361 0.02210219\n#> Gene_0178 0.02074743 0.02089802 0.01930644 0.02431743\n#>            Gene_1446  Gene_1464  Gene_1574  Gene_1576\n#> Gene_0006 0.03338292 0.02854316 0.03283427 0.03580522\n#> Gene_0024 0.02074742 0.01822139 0.02073954 0.03753362\n#> Gene_0035 0.03286167 0.03049468 0.02893392 0.02882686\n#> Gene_0068 0.02353721 0.02729962 0.03067578 0.03270469\n#> Gene_0155 0.02419758 0.02007164 0.02684538 0.04662410\n#> Gene_0178 0.02050590 0.02056526 0.01820344 0.01708360\n#>            Gene_1594  Gene_1631  Gene_1946  Gene_1976\n#> Gene_0006 0.03441058 0.03193840 0.03100051 0.04085575\n#> Gene_0024 0.01465738 0.01546324 0.01749811 0.01991336\n#> Gene_0035 0.05522610 0.02543445 0.04158306 0.03529794\n#> Gene_0068 0.02501158 0.02039993 0.02746443 0.02887373\n#> Gene_0155 0.01917789 0.01540677 0.02308983 0.03455652\n#> Gene_0178 0.02527642 0.01895051 0.04094081 0.02435783"},{"path":"evaluating-the-inferred-networks.html","id":"evaluating-the-inferred-networks","chapter":"6 Evaluating the inferred networks","heading":"6 Evaluating the inferred networks","text":"interpretation results, assessment inferred networks crucial. necessary determine network used downstream analysis, assess closely inferred causal relationships resemble biologically validated networks. One core features scstruc evaluating selecting optimal algorithms inferred networks. describe evaluate inferred networks using various metrics section. implemented metrics include:True positive arcsFalse positive arcsFalse negative arcsPrecisionRecallF1-scoreBayesian Information Criterion (data fitted provided)Structural Hamming DistanceStructural Intervention Distance (without symmetrization)Kullbackâ€“Leibler divergenceAUPRC (bootstrapped network )","code":""},{"path":"evaluating-the-inferred-networks.html","id":"evaluation-functions","chapter":"6 Evaluating the inferred networks","heading":"6.1 Evaluation functions","text":"","code":""},{"path":"evaluating-the-inferred-networks.html","id":"metrics-function","chapter":"6 Evaluating the inferred networks","heading":"6.1.1 metrics function","text":"function accepts learned networks reference network (bn object) outputs data.frame consisting various metrics.sid_sym argument can choose whether symmetrze SID, SID.cran can choose whether use SID implemented CRAN package SID.","code":"\nlibrary(scstruc)\nnet <- readRDS(\"ecoli70.rds\")\ndata.inference <- rbn(net, 50)\ninfer <- hc(data.inference)\nmetrics(bn.net(net), list(\"inferred\"=infer))\n#>       algo referenceNode InferenceNode s0 edges SHD TP FP\n#> 1 inferred            46            46 70    94 101 31 39\n#>   FN       TPR Precision    Recall        F1 SID KL BIC\n#> 1 63 0.4428571 0.4428571 0.3297872 0.3780488 930 NA  NA"},{"path":"evaluating-the-inferred-networks.html","id":"metricsfromfitted-function","chapter":"6 Evaluating the inferred networks","heading":"6.1.2 metricsFromFitted function","text":"function accepts parameter-fitted network sampling number, well algorithms used inference. Using rbn function bnlearn, logic sampling performed fitted network. , use ECOLI70 network GeneNet R package, sampling 50 observations network. testing algorithms can specifed argument algos. special algorithms, arguments name provided. function return_data return_net argument, returns data used inference inferred networks. default, metrics returned.results can visualized usual way using library like ggplot2. use plotthis library visualizing.","code":"\nmf <- metricsFromFitted(net, 50, algos=c(\"glmnet_CV\", \"glmnet_BIC\", \"L0_CV\"))\n#> glmnet_CV 13.2823009490967\n#> glmnet_BIC 0.914937019348145\n#> L0_CV\n#> 16.9690780639648\n#> MMHC 0.001 0.0871520042419434\n#> MMHC 0.005 0.0960419178009033\n#> MMHC 0.01 0.101830959320068\n#> MMHC 0.05 0.113605976104736\n#> Network computing finished\nhead(mf$metrics)\n#>         algo s0 edges        KL       BIC SHD TP FP FN\n#> 1  glmnet_CV 70    61  9.108264 -2383.886  77 24 46 37\n#> 2 glmnet_BIC 70    40 25.149720 -2564.327  55 21 49 19\n#> 3      L0_CV 70    29 65.626731 -2873.020  66 13 57 16\n#> 4 mmhc_0.001 70    27 52.077067 -2777.016  59 15 55 12\n#> 5 mmhc_0.005 70    29 50.380866 -2749.557  57 17 53 12\n#> 6  mmhc_0.01 70    30 50.290256 -2745.181  57 18 52 12\n#>         TPR Precision    Recall        F1 SID PPI\n#> 1 0.3428571 0.3428571 0.3934426 0.3664122  NA  NA\n#> 2 0.3000000 0.3000000 0.5250000 0.3818182  NA  NA\n#> 3 0.1857143 0.1857143 0.4482759 0.2626263  NA  NA\n#> 4 0.2142857 0.2142857 0.5555556 0.3092784  NA  NA\n#> 5 0.2428571 0.2428571 0.5862069 0.3434343  NA  NA\n#> 6 0.2571429 0.2571429 0.6000000 0.3600000  NA  NA\n#>          time   BICnorm  N  p\n#> 1 13.28230095 0.9771489 50 46\n#> 2  0.91493702 0.8619632 50 46\n#> 3 16.96907806 0.6649074 50 46\n#> 4  0.08715200 0.7261924 50 46\n#> 5  0.09604192 0.7437208 50 46\n#> 6  0.10183096 0.7465141 50 46\nlibrary(plotthis)\nlibrary(ggplot2)\nlibrary(ggrepel)\nScatterPlot(mf$metrics, x=\"SHD\", y=\"F1\", color_by=\"algo\", legend.position=\"none\") +\n    geom_text_repel(aes(label=algo), bg.colour=\"white\")"},{"path":"evaluating-the-inferred-networks.html","id":"evaluating-the-causal-validity","chapter":"6 Evaluating the inferred networks","heading":"6.2 Evaluating the causal validity","text":"primary objective package evaluating causal validity inferred networks. Two approach can used, situations reference directed network available . cases, reference networks readily available.","code":""},{"path":"evaluating-the-inferred-networks.html","id":"obtaining-the-directed-acyclic-graphs-dags-for-the-evaluation","chapter":"6 Evaluating the inferred networks","heading":"6.2.1 Obtaining the directed acyclic graphs (DAGs) for the evaluation","text":"interesting biological pathway, one can obtain DAG KEGG PATHWAY. getKEGGEdges function accepts pathway identifier returns DAG, though always succeed. function first parses pathway information using ggkegg, identify largest components evaluated. removeCycle TRUE, function identifies minimum feedback using igraph function remove edges. returns bn object.Suppose interested inferring gene regulatory networks mTOR signaling pathway dataset, first load DAG KEGG API.Using genes candidate pathway, inference performed performance metrics can obtained based reference DAG.","code":"\nlibrary(scstruc)\ndags <- getKEGGEdges(\"mmu04150\", removeCycle=TRUE)\n#> Removing Pik3ca|Mtor\ngraphviz.plot(dags)\nmymet <- metrics(dags, list(\"Algo1\"=net))"},{"path":"evaluating-the-inferred-networks.html","id":"intersection-validation-approach","chapter":"6 Evaluating the inferred networks","heading":"6.2.2 Intersection-Validation approach","text":"case reference networks, can use Insersection-Validation approach, proposed Viinikka et al. (Viinikka, Eggeling, Koivisto 2018) evaluate algorithm optimal terms SHD SID. purpose, interVal function prepared. function accepts input data, multiple algorithms tested, parameters related Intersection-Validation. implemented metrics SHD SID.user provide data algorithms tested,r argument used specify iteration number, ss argument used specify sub-sampling number. leaves message connected node pairs, defined number edges agreement graph, 15. returnA0 option can used return intersection inferred networks first stage. output option can specified output relevant data (data used inference, A0, bn object).","code":"\ntest.data <- head(gaussian.test, 50)\ntest <- interVal(test.data, algos=c(\"hc\",\"mmhc\",\"tabu\"), ss=30)\ntest\n#> $A0\n#> \n#>   Random/Generated Bayesian network\n#> \n#>   model:\n#>    [A][B][C][D][E][G][F|E:G] \n#>   nodes:                                 7 \n#>   arcs:                                  2 \n#>     undirected arcs:                     0 \n#>     directed arcs:                       2 \n#>   average markov blanket size:           0.86 \n#>   average neighbourhood size:            0.57 \n#>   average branching factor:              0.29 \n#> \n#>   generation algorithm:                  Empty \n#> \n#> \n#> $stat\n#> # A tibble: 3 Ã— 4\n#>   AlgoNum SHD.stat SID.stat    en\n#>     <dbl>    <dbl>    <dbl> <dbl>\n#> 1       1      5.2      0     7.2\n#> 2       2      2.7      1.5   2.3\n#> 3       3      5.4      0     7.4\n#> \n#> $raw.stat\n#>     R AlgoNum SHD SID EdgeNumber\n#> 1   1       1   6   0          8\n#> 2   1       2   1   0          3\n#> 3   1       3   6   0          8\n#> 4   2       1   6   0          8\n#> 5   2       2   3   3          2\n#> 6   2       3   6   0          8\n#> 7   3       1   4   0          6\n#> 8   3       2   3   1          2\n#> 9   3       3   5   0          7\n#> 10  4       1   7   0          9\n#> 11  4       2   3   1          2\n#> 12  4       3   7   0          9\n#> 13  5       1   5   0          7\n#> 14  5       2   3   1          2\n#> 15  5       3   5   0          7\n#> 16  6       1   6   0          8\n#> 17  6       2   3   3          2\n#> 18  6       3   6   0          8\n#> 19  7       1   4   0          6\n#> 20  7       2   3   1          3\n#> 21  7       3   5   0          7\n#> 22  8       1   4   0          6\n#> 23  8       2   3   3          2\n#> 24  8       3   4   0          6\n#> 25  9       1   5   0          7\n#> 26  9       2   1   0          3\n#> 27  9       3   5   0          7\n#> 28 10       1   5   0          7\n#> 29 10       2   4   2          2\n#> 30 10       3   5   0          7"},{"path":"evaluating-the-inferred-networks.html","id":"auprc","chapter":"6 Evaluating the inferred networks","heading":"6.3 AUPRC","text":"Although package focuses Bayesian network evaluation, commonly used metrics area precision-recall curve (AUPRC) can calculated. calc.auprc accepts reference bn object bn.strength object obtained bootstrapping, returns AUPRC value. function uses yardstick calculate value. target argument specifies column used weight, useful output software like GENIE3. example uses bootstrapped GES network inference calculates AUPRC.combining methods, possible determine network suitable assessment.","code":"\nnet <- readRDS(\"ecoli70.rds\")\ndata.inference <- rbn(net, 50)\ninfer <- pcalg.boot(data.inference, R=30)\ncalc.auprc(bn.net(net), infer)\n#> # A tibble: 1 Ã— 3\n#>   .metric .estimator .estimate\n#>   <chr>   <chr>          <dbl>\n#> 1 pr_auc  binary         0.407"},{"path":"fitting-and-comparing-the-parameters.html","id":"fitting-and-comparing-the-parameters","chapter":"7 Fitting and comparing the parameters","heading":"7 Fitting and comparing the parameters","text":"","code":""},{"path":"fitting-and-comparing-the-parameters.html","id":"strucvalues-function","chapter":"7 Fitting and comparing the parameters","heading":"7.1 strucValues function","text":"selecting network, can fit parameters arcs obtained networks. analysis, strucValues function prepared. function enables comparison networks groups identifying regulatory relationships arcs cell group SCT data. function accepts network (bn tbl_graph) SingleCellExperiment data. labels specified interesting grouping.returns fitted parameters edge specified group.","code":"\nset.seed(1)\nlibrary(scstruc)\nsce <- mockSCE()\nsce <- logNormCounts(sce)\nincluded_genes <- sample(row.names(sce), 20)\ngs <- scstruc(sce, included_genes, changeSymbol=FALSE)\n\nsv <- strucValues(sce, labels=c(\"Treatment\"), bn = gs$net)\n#> Coefficient calculation per specified group: Treatment\nhead(sv)\n#>        from        to coefficient Treatment\n#> 1 Gene_0556 Gene_0816   0.3136802    treat1\n#> 2 Gene_0017 Gene_0909   0.1301085    treat1\n#> 3 Gene_0556 Gene_1647   0.2261649    treat1\n#> 4 Gene_0695 Gene_1794  -0.2075066    treat1\n#> 5 Gene_0017 Gene_1806  -0.2137052    treat1\n#> 6 Gene_1827 Gene_1806   0.2607372    treat1"},{"path":"fitting-and-comparing-the-parameters.html","id":"plotsubnet","chapter":"7 Fitting and comparing the parameters","heading":"7.2 plotSubNet","text":"plotSubNet plots network centered interesting genes based returned data.frame strucValues. plots separated specified label.","code":"\nlibrary(ggraph)\nplotSubNet(sv, sv$from[4], label = \"Treatment\")"},{"path":"fitting-and-comparing-the-parameters.html","id":"markercoefs-function","chapter":"7 Fitting and comparing the parameters","heading":"7.3 markerCoefs function","text":"marker arcs distinguishing groups can identified markerCoefs function. function accepts returned data.frame strucValues.cell_column cell_label used subset results based cell labels (.e.Â obtained cell clustering annotation). classif_label used specify group interest. sample_column specified additionally sample identifier information group interest.function default uses Boruta algorithm identifying candidate arcs.\nxgboost argument TRUE, classification performed R package xgboost.\nanalyses using algorithms, return_mat option allows output matrix actually used classification.","code":"\nmarks <- markerCoefs(sv, classif_label =  \"Treatment\", cell_column = NULL, sample_column = \"Treatment\")\n#> Performing Boruta algorithm ...\nmarks\n#> [[1]]\n#> Boruta performed 10 iterations in 0.303138 secs.\n#>  No attributes deemed important.\n#>  7 attributes confirmed unimportant:\n#> Gene_0017->Gene_0909, Gene_0017->Gene_1806,\n#> Gene_0556->Gene_0816, Gene_0556->Gene_1647,\n#> Gene_0695->Gene_1794 and 2 more;\n#> \n#> [[2]]\n#> character(0)"},{"path":"plot.html","id":"plot","chapter":"8 Plotting functions","heading":"8 Plotting functions","text":"library various functions visualizing inferred networks highlighting important regulatory relationships comparing inferred networks multiple algorithms, using ggraph, tidygraph ggfx. can useful diagnosis publication figure. Mostly, function accepts bn object bnlearn.","code":""},{"path":"plot.html","id":"plotnet","chapter":"8 Plotting functions","heading":"8.1 plotNet","text":"plotNet function accepts bn object.Optionally, data can passed fit parameters function colors edge using fitted parameters. nodes sized degrees. degreeMode argument can specified degree calculated.","code":"\nlibrary(scstruc)\nsce <- mockSCE()\nsce <- logNormCounts(sce)\nincluded_genes <- sample(row.names(sce), 50)\ngs <- scstruc(sce, included_genes, changeSymbol=FALSE,\n    algorithm=\"glmnet_BIC\", returnData=TRUE)\n\n## Vanilla plot\nplotNet(gs$net)"},{"path":"plot.html","id":"plotavn","chapter":"8 Plotting functions","heading":"8.2 plotAVN","text":"function intended specifically visualizing bootstrapped networks. can pass results functions returning bn.strength object, function. threshold automatically determined specified. plot, strength shown edge width, direction shown edge color. node sizes determined degree.Edges can highlighted specifying highlightEdges argument, plotNet. plotAVN, with_outer_glow function ggfx package used highlight edges preserve strength direction mapping plot.","code":"\nlibrary(ggraph)\ngs.boot <- scstruc(sce, included_genes, changeSymbol=FALSE, boot=TRUE, R=10,\n             algorithm=\"glmnet_BIC\", returnData=TRUE)\n#> Bootstrapping specified\n\nplotAVN(gs.boot$net)"},{"path":"plot.html","id":"ggraph.compare","chapter":"8 Plotting functions","heading":"8.3 ggraph.compare","text":"Similar graphviz.compare function bnlearn, diagnostic plot can made ggraph.compare. accepts list bn object plot nodes edge associated graphs geom_edge_parallel. agreement edges multiple graphs can understood function, however, get complicated many graphs provided.","code":"\nggraph.compare(list(\"boot\"=averaged.network(gs.boot$net), \"raw\"=gs$net))"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
