[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"package aims visualize word text information contained gene omics identifiers microbiome, identify important words among clusters, compare clusters based information. contributes understanding gene clusters aid easy interpretation visualization. documentation using bookdown available , web server using shinyapps.io .","code":"\nlibrary(wcGeneSummary)\n#> \n#> Registered S3 method overwritten by 'pvclust':\n#>   method       from      \n#>   text.pvclust dendextend\nknitr::include_url(\"https://noriakis.github.io/cyjs_test/\")"},{"path":"basic-usage.html","id":"basic-usage","chapter":"2 Basic usage","heading":"2 Basic usage","text":"Load package database converting identifiers.\nexample, use mostly human-derived data, use org.Hs.eg.db.","code":"\nlibrary(wcGeneSummary)\nlibrary(org.Hs.eg.db)\nlibrary(ggplot2)\nlibrary(ggraph)\nlibrary(RColorBrewer)\nlibrary(ReactomePA)\nlibrary(clusterProfiler)\nlibrary(dendextend)\nlibrary(dplyr)"},{"path":"basic-usage.html","id":"producing-word-clouds","chapter":"2 Basic usage","heading":"2.1 Producing word clouds","text":"use ERCC genes input. basic usage package producing word cloud gene summaries querying gene IDs, default symbol. type can set keyType. many words commonly observed, limit word frequency excludeFreq, default 2000. TF-IDF summary precomputed, exclude=\"tfidf\" can specified .accepts values wordcloud() function. numWords specifies many words shown word cloud. words ordered frequency, subset 1:numWords used downstream visualization. values must passed argList arguments list.default, preserve=TRUE, indicates funciton tries preserve original cases characters. Note lower case words capitalized words present, words converted capitalized words, like damage Damage shown Damage preserve=TRUE.also returns data frame consisting frequency term slot name freqDf.Table 2.1: Term frequencies.N-gram supported library tm, specified ngram.\nDefault 1, example specifying 2 shown .Using clusterProfiler functions, one can use enriched pathway names visualization.\nenrich option can specified 'kegg' 'reactome', time specify 'reactome'.One main questions words can clustered together among words contained queried gene cluster. Word clustering (pvclust) identified significant clusters based occurrence text can visualized specifying tag=TRUE. significance threshold, pvclAlpha can specified. default parameters perform pvclust subset dataset words high frequency specified numWords. one want perform whole matrix (natural way), tagWhole=TRUE can specified, although computationally intensive. One can pass clusters perform parallel computing owning pvclust function, specifying cl .example showing ERCC genes, term DNA repair clustered expected.","code":"\n## Configure input genes\ninpSymbol <- c(\"ERCC1\",\"ERCC2\",\"ERCC3\",\"ERCC4\",\"ERCC5\",\"ERCC6\",\"ERCC8\")\ngwc <- wcGeneSummary(inpSymbol)\n#> Input genes: 7\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\ngwc@wc\n## Use palette from palettetown, palettetown::pokepal(150) (Mewtwo!)\ngwc <- wcGeneSummary(inpSymbol,\n                     numWords=100,\n                     excludeFreq=5000,\n                     argList=list(\n                      \"random.order\"=FALSE,\n                     \"colors\"=palette(),\n                     \"rot.per\"=0.4))\n#> Input genes: 7\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 14 words (frequency and/or tfidf)\ngwc@wc\ngwc_p <- wcGeneSummary(inpSymbol, \n                     numWords=100,\n                     excludeFreq=5000,\n                     preserve=FALSE,\n                     argList=list(\n                       rot.per=0.4,\n                       colors=RColorBrewer::brewer.pal(8, \"Set2\"),\n                       random.order=FALSE\n                     ))\n#> Input genes: 7\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 14 words (frequency and/or tfidf)\ngwc_p@wc\ngwc\n#> type: refseq\n#> Number of words: 100\n#> ERCC1/ERCC2/ERCC3/ERCC4/ERCC5/ERCC6/ERCC8\n#> 133.5 Kb\nknitr::kable(\n  head(gwc@freqDf), caption = 'Term frequencies.',\n  row.names = FALSE\n)\ngwc2 <- wcGeneSummary(inpSymbol,\n                      ngram=2,\n                      numWords=50)\n#> Input genes: 7\n#> 'select()' returned 1:1 mapping between keys and\n#> columns\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\ngwc2@wc\ngwc3 <- wcGeneSummary(inpSymbol,\n                      enrich=\"reactome\",\n                      tfidf=TRUE, numWords=50)\n#> Input genes: 7\n#> 'select()' returned 1:1 mapping between keys and\n#> columns\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Performing enrichment analysis\ngwc3@wc\n\npal <- RColorBrewer::brewer.pal(4, \"PuOr\") \npal <- colorRampPalette(pal)(20)\n\n\n## Cluster on subset of words\ngwcl <- wcGeneSummary(inpSymbol,\n                     numWords=30,\n                     tag=TRUE,\n                     pal = pal,\n                     argList=list(rot.per=0.4))\n#> Input genes: 7\n#> 'select()' returned 1:1 mapping between keys and\n#> columns\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Bootstrap (r = 0.5)... Done.\n#> Bootstrap (r = 0.6)... Done.\n#> Bootstrap (r = 0.7)... Done.\n#> Bootstrap (r = 0.8)... Done.\n#> Bootstrap (r = 0.9)... Done.\n#> Bootstrap (r = 1.0)... Done.\n#> Bootstrap (r = 1.1)... Done.\n#> Bootstrap (r = 1.2)... Done.\n#> Bootstrap (r = 1.3)... Done.\n#> Bootstrap (r = 1.4)... Done.\ngwcl@wc\ngwcl@pvpick\n#> $clusters\n#> $clusters[[1]]\n#> [1] \"pigmentosum\" \"xeroderma\"  \n#> \n#> $clusters[[2]]\n#>  [1] \"activity\"                  \"atpdependent\"             \n#>  [3] \"basal\"                     \"cerebrooculofacioskeletal\"\n#>  [5] \"characterized\"             \"complementation\"          \n#>  [7] \"damage\"                    \"defects\"                  \n#>  [9] \"exon\"                      \"factor\"                   \n#> [11] \"forms\"                     \"functions\"                \n#> [13] \"helicase\"                  \"heterodimeric\"            \n#> [15] \"incision\"                  \"including\"                \n#> [17] \"interacts\"                 \"light\"                    \n#> [19] \"nucleotide\"                \"product\"                  \n#> [21] \"transcriptioncoupled\"     \n#> \n#> $clusters[[3]]\n#> [1] \"dna\"    \"repair\"\n#> \n#> $clusters[[4]]\n#> [1] \"cockayne\"      \"excision\"      \"syndrome\"     \n#> [4] \"transcription\"\n#> \n#> \n#> $edges\n#> [1]  6 22 23 25\n\n## Cluster on whole matrix\n\ngwclWhole <- wcGeneSummary(inpSymbol,\n                     numWords=50,\n                     tag=TRUE, tagWhole=TRUE,\n                     pal = pal,\n                     cl=snow::makeCluster(8),\n                     argList=list(rot.per=0.4))\n#> Input genes: 7\n#> 'select()' returned 1:1 mapping between keys and\n#> columns\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Multiscale bootstrap... Done.\ngwclWhole@wc\ngwclWhole@pvpick\n#> $clusters\n#> $clusters[[1]]\n#>  [1] \"abnormally\"        \"active\"           \n#>  [3] \"csb\"               \"defective\"        \n#>  [5] \"disease\"           \"hereditary\"       \n#>  [7] \"identified\"        \"iih\"              \n#>  [9] \"p44\"               \"radiation\"        \n#> [11] \"repeat\"            \"sensitive\"        \n#> [13] \"transcriptionally\" \"ultraviolet\"      \n#> \n#> $clusters[[2]]\n#>  [1] \"activates\"       \"adjacent\"        \"atpase\"         \n#>  [4] \"atpstimulated\"   \"dnabinding\"      \"downstream\"     \n#>  [7] \"encode\"          \"formation\"       \"frame\"          \n#> [10] \"fusion\"          \"individual\"      \"occurs\"         \n#> [13] \"polyadenylation\" \"promote\"         \"reading\"        \n#> [16] \"sequence\"        \"shares\"          \"sites\"          \n#> \n#> $clusters[[3]]\n#> [1] \"class\" \"tfiih\"\n#> \n#> $clusters[[4]]\n#> [1] \"complementation\" \"defects\"        \n#> \n#> $clusters[[5]]\n#> [1] \"eme1\"      \"ercc1\"     \"structure\" \"xp6\"      \n#> \n#> $clusters[[6]]\n#> [1] \"orf\"               \"piggybackderived3\"\n#> [3] \"splice\"           \n#> \n#> $clusters[[7]]\n#> [1] \"pigmentosum\" \"xeroderma\"  \n#> \n#> $clusters[[8]]\n#> [1] \"interacts\" \"type\"     \n#> \n#> $clusters[[9]]\n#> [1] \"incision\"  \"including\" \"light\"    \n#> \n#> $clusters[[10]]\n#> [1] \"transcriptioncoupled\" \"upstream\"            \n#> \n#> $clusters[[11]]\n#>  [1] \"basic\"            \"bivm\"            \n#>  [3] \"cachexia\"         \"cancer\"          \n#>  [5] \"cellular\"         \"characterized\"   \n#>  [7] \"cognitive\"        \"develop\"         \n#>  [9] \"development\"      \"disability\"      \n#> [11] \"disorder\"         \"exists\"          \n#> [13] \"exposure\"         \"function\"        \n#> [15] \"growth\"           \"hypersensitivity\"\n#> [17] \"immunoglobulin\"   \"increased\"       \n#> [19] \"motif\"            \"neighboring\"     \n#> [21] \"patients\"         \"processes\"       \n#> [23] \"read\"             \"referred\"        \n#> [25] \"severe\"           \"singlestrand\"    \n#> [27] \"skin\"             \"specific\"        \n#> [29] \"susceptibility\"   \"uvinduced\"       \n#> [31] \"variable\"         \"vii\"             \n#> [33] \"xp7\"             \n#> \n#> $clusters[[12]]\n#>  [1] \"atpdependent\"        \"basal\"              \n#>  [3] \"belongs\"             \"btf2tfiih\"          \n#>  [5] \"cancerprone\"         \"disorders\"          \n#>  [7] \"factor\"              \"helicase\"           \n#>  [9] \"helicases\"           \"integral\"           \n#> [11] \"mechanism\"           \"rad3xpd\"            \n#> [13] \"subfamily\"           \"trichothiodystrophy\"\n#> \n#> $clusters[[13]]\n#>  [1] \"alter\"                     \"carcinogenesis\"           \n#>  [3] \"catalyzes\"                 \"cd3e\"                     \n#>  [5] \"cerebrooculofacioskeletal\" \"cisplatin\"                \n#>  [7] \"compounds\"                 \"crosslinks\"               \n#>  [9] \"electrophilic\"             \"epsilon\"                  \n#> [11] \"ercc4\"                     \"excising\"                 \n#> [13] \"exon\"                      \"formed\"                   \n#> [15] \"forms\"                     \"heterodimer\"              \n#> [17] \"heterodimeric\"             \"induced\"                  \n#> [19] \"interstrand\"               \"lesion\"                   \n#> [21] \"lesions\"                   \"molecule\"                 \n#> [23] \"overlaps\"                  \"pathway\"                  \n#> [25] \"play\"                      \"polymorphisms\"            \n#> [27] \"process\"                   \"product\"                  \n#> [29] \"recombinational\"           \"required\"                 \n#> [31] \"result\"                    \"strand\"                   \n#> [33] \"xpf\"                      \n#> \n#> $clusters[[14]]\n#> [1] \"dna\"    \"repair\"\n#> \n#> \n#> $edges\n#>  [1]  13  30  97  98 101 104 106 107 110 117 118 119 124 130"},{"path":"basic-usage.html","id":"producing-correlation-networks","chapter":"2 Basic usage","heading":"2.2 Producing correlation networks","text":"next main function producing correlation networks words based co-occurrence words text.edge label corresponding correlation values can shown edgeLabel=TRUE. number words shown plot can specified numWords. threshold correlation can specified corThresh. text color can changed colorText=TRUE. type edge can specified edgeLink, default TRUE (link used).clustering results based pvclust can shown also correlation network, node color (tag=TRUE). can plot igraph object well, using basic plot function implemented.genes associated corresponding words can shown specifying genePlot=TRUE, useful assessing words associated interesting genes. edges connecting words corresponding genes shown.\nAdditionally, one can specify genePlotNum limiting genes shown, can useful identifying important genes associated high-frequent words.associated enriched pathways (present) can shown specifying genePathPlot, using ggforce.\noption, function first performs -representation analysis whole gene set, plot enriched terms included genes plot. Enrichment analysis performed library clusterProfiler ReactomePA, one can control pathways plot genePathPlotSig value.","code":"\nnet <- wcGeneSummary(inpSymbol, plotType=\"network\")\n#> Input genes: 7\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\nnet@net\nnet <- wcGeneSummary(inpSymbol, plotType=\"network\",\n                     edgeLabel=TRUE, corThresh=0.5,\n                     numWords=20, colorText=TRUE)\n#> Input genes: 7\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\nnet@net\nnet <- wcGeneSummary(inpSymbol, plotType=\"network\", corThresh=0.2,\n                     numWords=20, tag=TRUE)\n#> Input genes: 7\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Bootstrap (r = 0.5)... Done.\n#> Bootstrap (r = 0.6)... Done.\n#> Bootstrap (r = 0.7)... Done.\n#> Bootstrap (r = 0.8)... Done.\n#> Bootstrap (r = 0.9)... Done.\n#> Bootstrap (r = 1.0)... Done.\n#> Bootstrap (r = 1.1)... Done.\n#> Bootstrap (r = 1.2)... Done.\n#> Bootstrap (r = 1.3)... Done.\n#> Bootstrap (r = 1.4)... Done.\nnet@net\nnet@pvpick\n#> $clusters\n#> $clusters[[1]]\n#> [1] \"pigmentosum\" \"xeroderma\"  \n#> \n#> $clusters[[2]]\n#>  [1] \"activity\"             \"atpdependent\"        \n#>  [3] \"complementation\"      \"defects\"             \n#>  [5] \"factor\"               \"functions\"           \n#>  [7] \"incision\"             \"interacts\"           \n#>  [9] \"nucleotide\"           \"product\"             \n#> [11] \"transcriptioncoupled\"\n#> \n#> $clusters[[3]]\n#> [1] \"dna\"    \"repair\"\n#> \n#> \n#> $edges\n#> [1]  2 12 13\nplot(net)\nnet <- wcGeneSummary(inpSymbol, plotType=\"network\",\n                     genePlot=TRUE, corThresh=0.5,\n                     tag=TRUE, edgeLink=FALSE,\n                     numWords=20)\n#> Input genes: 7\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Bootstrap (r = 0.5)... Done.\n#> Bootstrap (r = 0.6)... Done.\n#> Bootstrap (r = 0.7)... Done.\n#> Bootstrap (r = 0.8)... Done.\n#> Bootstrap (r = 0.9)... Done.\n#> Bootstrap (r = 1.0)... Done.\n#> Bootstrap (r = 1.1)... Done.\n#> Bootstrap (r = 1.2)... Done.\n#> Bootstrap (r = 1.3)... Done.\n#> Bootstrap (r = 1.4)... Done.\nnet@net\nlibrary(concaveman)\nlibrary(ggforce)\nnet <- wcGeneSummary(inpSymbol, plotType=\"network\",\n                     genePathPlot=\"reactome\", corThresh=0.5,\n                     tag=TRUE, edgeLink=FALSE,\n                     genePathPlotSig=0.05, numWords=20)\n#> Input genes: 7\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Bootstrap (r = 0.5)... Done.\n#> Bootstrap (r = 0.6)... Done.\n#> Bootstrap (r = 0.7)... Done.\n#> Bootstrap (r = 0.8)... Done.\n#> Bootstrap (r = 0.9)... Done.\n#> Bootstrap (r = 1.0)... Done.\n#> Bootstrap (r = 1.1)... Done.\n#> Bootstrap (r = 1.2)... Done.\n#> Bootstrap (r = 1.3)... Done.\n#> Bootstrap (r = 1.4)... Done.\n#> Found 47 enriched term\n\nnet@net"},{"path":"basic-usage.html","id":"visualization-of-pubmed-information.","chapter":"2 Basic usage","heading":"2.3 Visualization of PubMed information.","text":"Using rentrez, one can perform analysis PubMed text like article title abstract. function queries input gene symbols (microbes) visualize. typical use cases, genes identified showing genePlot, hub genes identified gene network analysis can queried. basic parameters searching PubMed, like max number articles retrieved sort articles can specified retMax sortOrder. sure obtain api key querying heavily, specify apiKey argument.returned PubMed IDs stored pmids slot.fetching information desirable time consuming, object can passed redo option re-perform analysis like tagging, changing visualization options.gene symbols plotted, specify onlyGene=TRUE.","code":"\nab <- wcAbst(inpSymbol[1:3], retMax=20)\n#> Proceeding without API key\nab@wc\nab@pmids\n#>  [1] \"20301571\" \"27051024\" \"27838878\" \"31077069\" \"32749109\"\n#>  [6] \"21278243\" \"23593158\" \"34284736\" \"28088319\" \"25867436\"\n#> [11] \"16835333\" \"24023723\" \"27051038\" \"36472749\" \"28803404\"\n#> [16] \"25674148\" \"33125943\" \"8053936\"  \"28474168\" \"20687508\"\nab@pmids |> length()\n#> [1] 20\npal <- brewer.pal(5, \"PuOr\") \nabtag <- wcAbst(redo=ab, tag=TRUE,\n                cl=snow::makeCluster(10), pal=pal)\n#> Resuming from the previous results\n#> Multiscale bootstrap... Done.\nabtag2 <- wcAbst(redo=abtag, tag=TRUE, genePlot=TRUE,\n                 plotType=\"network\", corThresh=0.2, preset=TRUE)\n#> Resuming from the previous results\n#> Using previous pvclust results\nabtag@wc\nabtag2@net\n#> Warning: Removed 3 rows containing missing values\n#> (`geom_point()`).\nnet <- wcAbst(inpSymbol[1:5], plotType=\"network\", onlyGene=TRUE)\n#> Proceeding without API key\n#> Subsetting to the gene symbol in orgDb\nnet@net"},{"path":"basic-usage.html","id":"comparing-two-or-more-networks","chapter":"2 Basic usage","heading":"2.4 Comparing two or more networks","text":"One can compare two networks providing list objects produced wc* functions, like wcGeneSummary wcAbst. can useful assessing similarity dissimilarity various text sources, like PubMed, RefSeq, Reactome pathway names.tag information available gene clusters, combined tags can visualized tag=TRUE.","code":"\ncxcls <- c()\nfor (i in c(1,2,3,5,6,8,9,10,11,12,13,14,16)){\n    cxcls <- c(cxcls, paste0(\"CXCL\",i))\n}\n\nnet1 <- wcGeneSummary(inpSymbol, plotType=\"network\",\n                      corThresh=0.5, numWords=20)\n#> Input genes: 7\n#> 'select()' returned 1:1 mapping between keys and\n#> columns\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\nnet2 <- wcGeneSummary(cxcls, plotType=\"network\",\n                      corThresh=0.5, numWords=20)\n#> Input genes: 13\n#> 'select()' returned 1:1 mapping between keys and\n#> columns\n#>   Converted input genes: 13\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\nnet3 <- wcAbst(redo=ab, plotType=\"network\",\n               corThresh=0.2, numWords=20)\n#> Resuming from the previous results\n\n## Not having meaningful overlaps\ncompareWordNet(list(net1, net2),\n               titles=c(\"ercc\",\"cxcl\"))\n#> Scale for colour is already present.\n#> Adding another scale for colour, which will replace the\n#> existing scale.\n#> Warning in grid.Call(C_stringMetric,\n#> as.graphicsAnnot(x$label)): font family not found in Windows\n#> font database\n\n#> Warning in grid.Call(C_stringMetric,\n#> as.graphicsAnnot(x$label)): font family not found in Windows\n#> font database\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\ncompareWordNet(list(net1, net3),\n               titles=c(\"ercc\",\"ercc-PubMed\"))\n#> Scale for colour is already present.\n#> Adding another scale for colour, which will replace the\n#> existing scale.\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\ncompareWordNet(list(net1, net2, net3),\n               titles=c(\"ercc\",\"cxcl\", \"ercc-PubMed\"))\n#> Scale for colour is already present.\n#> Adding another scale for colour, which will replace the\n#> existing scale.\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\nkeggPathways <- org.Hs.egPATH2EG\nmappedKeys <- mappedkeys(keggPathways)\nkeggList <- as.list(keggPathways[mappedKeys])\n\nnet1 <- wcGeneSummary(keggList$`04110`,\n                      keyType=\"ENTREZID\",\n                      plotType=\"network\",\n                      corThresh=0.3,\n                      numWords=30,\n                      tag=TRUE,\n                      tfidf=TRUE)\n#> Input genes: 124\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Bootstrap (r = 0.5)... Done.\n#> Bootstrap (r = 0.6)... Done.\n#> Bootstrap (r = 0.7)... Done.\n#> Bootstrap (r = 0.8)... Done.\n#> Bootstrap (r = 0.9)... Done.\n#> Bootstrap (r = 1.0)... Done.\n#> Bootstrap (r = 1.1)... Done.\n#> Bootstrap (r = 1.2)... Done.\n#> Bootstrap (r = 1.3)... Done.\n#> Bootstrap (r = 1.4)... Done.\n\nnet2 <- wcGeneSummary(keggList$`04210`,\n                      keyType=\"ENTREZID\",\n                      plotType=\"network\",\n                      corThresh=0.3,\n                      numWords=30,\n                      tfidf=TRUE,\n                      tag=TRUE)\n#> Input genes: 87\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Bootstrap (r = 0.5)... Done.\n#> Bootstrap (r = 0.6)... Done.\n#> Bootstrap (r = 0.7)... Done.\n#> Bootstrap (r = 0.8)... Done.\n#> Bootstrap (r = 0.9)... Done.\n#> Bootstrap (r = 1.0)... Done.\n#> Bootstrap (r = 1.1)... Done.\n#> Bootstrap (r = 1.2)... Done.\n#> Bootstrap (r = 1.3)... Done.\n#> Bootstrap (r = 1.4)... Done.\n\ncompareWordNet(list(net1, net2), tag=TRUE)\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database"},{"path":"basic-usage.html","id":"text-over-represenatation-analysis-experimental","chapter":"2 Basic usage","heading":"2.5 Text over represenatation analysis (experimental)","text":"thresholding can used RefSeq visualization.\nFilter words using ORA threshold frequency threshold setting ora=TRUE.obtaining ORA results, one can plot volcano-plot like plot results using plotORA function.","code":"\ngeneList <- keggList$`00785` # Lipoic acid metabolism\npvs <- textORA(geneList)\nhist(pvs)\npvs[order(pvs)] |> head()\n#>            lipoic              step              acid \n#>      1.600963e-14      8.016934e-08      5.300425e-07 \n#> lipoateactivating  lipoatedependent            lipoyl \n#>      1.484931e-04      1.484931e-04      1.484931e-04\n\ngeneList <- keggList$`05150` # Staphylococcus aureus infection\npvs <- textORA(geneList)\nhist(pvs)\npvs[order(pvs)] |> head()\n#>          drb        chain   complement        class \n#> 0.000000e+00 3.669590e-82 3.266180e-74 5.496543e-46 \n#>         exon         beta \n#> 6.851722e-39 1.318324e-34\nnet <- wcGeneSummary(inpSymbol, plotType=\"network\",\n                     ora=TRUE, edgeLink=FALSE)\n#> Input genes: 7\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Performing ORA\n#> Filtered 148 words (ORA)\nnet@net\nplotORA(net)\nsessionInfo()\n#> R version 4.2.2 (2022-10-31 ucrt)\n#> Platform: x86_64-w64-mingw32/x64 (64-bit)\n#> Running under: Windows 10 x64 (build 22621)\n#> \n#> Matrix products: default\n#> \n#> locale:\n#> [1] LC_COLLATE=Japanese_Japan.utf8 \n#> [2] LC_CTYPE=Japanese_Japan.utf8   \n#> [3] LC_MONETARY=Japanese_Japan.utf8\n#> [4] LC_NUMERIC=C                   \n#> [5] LC_TIME=Japanese_Japan.utf8    \n#> \n#> attached base packages:\n#> [1] stats4    stats     graphics  grDevices utils    \n#> [6] datasets  methods   base     \n#> \n#> other attached packages:\n#>  [1] ggrepel_0.9.2         limma_3.54.0         \n#>  [3] igraph_1.3.5          ggforce_0.4.1        \n#>  [5] concaveman_1.1.0      dplyr_1.0.10         \n#>  [7] dendextend_1.16.0     clusterProfiler_4.6.0\n#>  [9] ReactomePA_1.42.0     RColorBrewer_1.1-3   \n#> [11] ggraph_2.1.0          ggplot2_3.4.0        \n#> [13] org.Hs.eg.db_3.16.0   AnnotationDbi_1.60.0 \n#> [15] IRanges_2.32.0        S4Vectors_0.36.1     \n#> [17] Biobase_2.58.0        BiocGenerics_0.44.0  \n#> [19] wcGeneSummary_0.99.0 \n#> \n#> loaded via a namespace (and not attached):\n#>   [1] shadowtext_0.1.2       fastmatch_1.1-3       \n#>   [3] plyr_1.8.8             lazyeval_0.2.2        \n#>   [5] splines_4.2.2          BiocParallel_1.32.5   \n#>   [7] GenomeInfoDb_1.34.6    digest_0.6.31         \n#>   [9] yulab.utils_0.0.6      htmltools_0.5.4       \n#>  [11] bugsigdbr_1.5.3        GOSemSim_2.24.0       \n#>  [13] viridis_0.6.2          GO.db_3.16.0          \n#>  [15] fansi_1.0.3            GeneSummary_0.99.4    \n#>  [17] magrittr_2.0.3         memoise_2.0.1         \n#>  [19] tm_0.7-10              Biostrings_2.66.0     \n#>  [21] graphlayouts_0.8.4     pvclust_2.2-0         \n#>  [23] wordcloud_2.6          enrichplot_1.18.3     \n#>  [25] colorspace_2.0-3       rappdirs_0.3.3        \n#>  [27] blob_1.2.3             xfun_0.36             \n#>  [29] crayon_1.5.2           RCurl_1.98-1.9        \n#>  [31] jsonlite_1.8.4         scatterpie_0.1.8      \n#>  [33] graph_1.76.0           ape_5.6-2             \n#>  [35] glue_1.6.2             polyclip_1.10-4       \n#>  [37] stopwords_2.3          gtable_0.3.1          \n#>  [39] zlibbioc_1.44.0        XVector_0.38.0        \n#>  [41] GetoptLong_1.0.5       graphite_1.44.0       \n#>  [43] rentrez_1.2.3          scales_1.2.1          \n#>  [45] DOSE_3.24.2            DBI_1.1.3             \n#>  [47] Rcpp_1.0.9             viridisLite_0.4.1     \n#>  [49] xtable_1.8-4           tidytree_0.4.2        \n#>  [51] gridGraphics_0.5-1     reactome.db_1.82.0    \n#>  [53] bit_4.0.5              htmlwidgets_1.6.1     \n#>  [55] httr_1.4.4             fgsea_1.24.0          \n#>  [57] ellipsis_0.3.2         pkgconfig_2.0.3       \n#>  [59] XML_3.99-0.13          farver_2.1.1          \n#>  [61] sass_0.4.4             utf8_1.2.2            \n#>  [63] labeling_0.4.2         ggplotify_0.1.0       \n#>  [65] tidyselect_1.2.0       rlang_1.0.6           \n#>  [67] reshape2_1.4.4         later_1.3.0           \n#>  [69] munsell_0.5.0          tools_4.2.2           \n#>  [71] cachem_1.0.6           downloader_0.4        \n#>  [73] cli_3.6.0              generics_0.1.3        \n#>  [75] RSQLite_2.2.20         gson_0.0.9            \n#>  [77] evaluate_0.19          stringr_1.5.0         \n#>  [79] fastmap_1.1.0          ggdendro_0.1.23       \n#>  [81] yaml_2.3.6             ggtree_3.6.2          \n#>  [83] knitr_1.41             bit64_4.0.5           \n#>  [85] fs_1.5.2               tidygraph_1.2.2       \n#>  [87] purrr_1.0.1            KEGGREST_1.38.0       \n#>  [89] nlme_3.1-161           mime_0.12             \n#>  [91] slam_0.1-50            aplot_0.1.9           \n#>  [93] xml2_1.3.3             compiler_4.2.2        \n#>  [95] rstudioapi_0.14        curl_5.0.0            \n#>  [97] png_0.1-8              treeio_1.22.0         \n#>  [99] tibble_3.1.8           tweenr_2.0.2          \n#> [101] bslib_0.4.2            stringi_1.7.12        \n#> [103] cyjShiny_1.0.34        highr_0.10            \n#> [105] lattice_0.20-45        Matrix_1.5-3          \n#> [107] vctrs_0.5.1            pillar_1.8.1          \n#> [109] lifecycle_1.0.3        jquerylib_0.1.4       \n#> [111] GlobalOptions_0.1.2    data.table_1.14.6     \n#> [113] cowplot_1.1.1          bitops_1.0-7          \n#> [115] httpuv_1.6.8           patchwork_1.1.2       \n#> [117] qvalue_2.30.0          R6_2.5.1              \n#> [119] bookdown_0.31          promises_1.2.0.1      \n#> [121] gridExtra_2.3          codetools_0.2-18      \n#> [123] MASS_7.3-58.1          assertthat_0.2.1      \n#> [125] rjson_0.2.21           withr_2.5.0           \n#> [127] GenomeInfoDbData_1.2.9 parallel_4.2.2        \n#> [129] ISOcodes_2022.09.29    ggfun_0.0.9           \n#> [131] grid_4.2.2             tidyr_1.2.1           \n#> [133] HDO.db_0.99.1          rmarkdown_2.19        \n#> [135] downlit_0.4.2          NLP_0.2-1             \n#> [137] shiny_1.7.4            base64enc_0.1-3"},{"path":"the-basic-usage-for-microbiome-related-data.html","id":"the-basic-usage-for-microbiome-related-data","chapter":"3 The basic usage for microbiome-related data","heading":"3 The basic usage for microbiome-related data","text":"general usage mining information related microbiome-related signatures.use BugSigDB, R port bugsigdbr obtain curated dataset relationship bacterial taxonomy human diseases (Geistlinger et al. 2022). Users can query microbiome names, searched MetaPhlAn taxonomic annotation. target=\"title\", title corresponding articles summarized.target=\"abstract\", corresponding abstract fetched summarized.successful visualization, pre-caculated TF-IDF frequency data frame available one can use filter highly occurring words, prefiltering option used wcGeneSummary.network visualization possible enabling plotType=\"network\".\nparameters can passed wcGeneSummary can used.words--species relationship can plotted mbPlot=TRUE.BugSigDB contains relationship bacterial taxonomy disease, disease name can also plotted. disPlot=TRUE, mbPlot\nset TRUE default.curated databases, PubMed query can also performed setting curate=FALSE. way, text information latest literature microbes diseases can plotted. options use function obtaining PubMed information can specified abstArg list format, like sortOrder=\"pubdate\".microbiome analysis, often case investigating coded enzymes important. Using wcEC function getUPtax function, queried species genus can linked possible interaction enzymes using following databases. downloaded file path specified function like link queried taxonomy enzymes. Specifically, enzymes listed enzyme.dat searched, corresponding UniProt identifiers obtained, followed mapping using speclist.txt. way, links microbe - textual information - enzyme can plotted.enzyme.dat ExpasyUniProt Controlled vocabulary speciesFurther, relationship metabolites microbiome interest. Recent studies revealed various associations gut microbiome composition human plasma metabolites, well environments.Wishart DS, Oler E, Peters H, et al. MiMeDB: Human Microbial Metabolome Database. Nucleic Acids Res. 2023;51(D1):D611-D620. doi:10.1093/nar/gkac868Muller E, Algavi YM, Borenstein E. gut microbiome-metabolome dataset collection: curated resource integrative meta-analysis. npj Biofilms Microbiomes. 2022;8(1):1-7. doi:10.1038/s41522-022-00345-5Dekkers KF, Sayols-Baixeras S, Baldanzi G, et al. online atlas human plasma metabolite signatures gut microbiome composition. Nat Commun. 2022;13(1):5370. doi:10.1038/s41467-022-33050-0We now use data obtained Dekkers et al..\nFirst, read downloaded file using readxl.Pass tibble, well columns represent taxonomy, metabolites, quantitative values metabCol.way, can plot links microbes - metabolites - textual information.","code":"\nlibrary(wcGeneSummary)\nlibrary(ggplot2)\nlibrary(ggraph)\nlibrary(RColorBrewer)\nbasic <- wcBSDB(c(\"Veillonella dispar\",\"Neisseria flava\"),tag=FALSE,\n    curate=TRUE,target=\"title\",pre=TRUE,cl=snow::makeCluster(12),\n    pal=RColorBrewer::brewer.pal(10, \"Set2\"),numWords=80,argList=list(min.freq=1))\n#> Input microbes: 2\n#>   Found 17 entries for Veillonella dispar\n#>   Found 1 entries for Neisseria flava\n#> Including 28 entries\n#> Filter based on BugSigDB\n#> Filtering 0 words (frequency and/or tfidf)\nbasic@freqDf |> head(n=20)\n#>                    word freq\n#> gut                 Gut    8\n#> oral               Oral    5\n#> patients       patients    5\n#> study             study    3\n#> arthritis     arthritis    2\n#> association association    2\n#> bacterial     bacterial    2\n#> covid19         COVID19    2\n#> diabetes       diabetes    2\n#> dysbiosis     Dysbiosis    2\n#> infant           infant    2\n#> infection     Infection    2\n#> obese             obese    2\n#> respiratory respiratory    2\n#> sequencing   sequencing    2\n#> surgery         surgery    2\n#> tract             tract    2\n#>  features      features    1\n#> 16s                 16S    1\n#> aerosol         Aerosol    1\nbasic@wc\nbasic2 <- wcBSDB(c(\"Veillonella dispar\",\"Neisseria flava\"),tag=TRUE,\n    curate=TRUE,target=\"abstract\",pre=TRUE,cl=snow::makeCluster(12),\n    pal=RColorBrewer::brewer.pal(10, \"Set2\"),numWords=80)\n#> Input microbes: 2\n#>   Found 17 entries for Veillonella dispar\n#>   Found 1 entries for Neisseria flava\n#> Including 28 entries\n#> Target is abstract\n#>   Querying PubMed for 17 pmids\n#>   Querying without API key\n#> Filter based on BugSigDB\n#> Filtering 0 words (frequency and/or tfidf)\n#> Multiscale bootstrap... Done.\nbasic2@freqDf |> head()\n#>                word freq\n#> patients   patients   37\n#> gut             Gut   30\n#> oral           Oral   27\n#> bacterial Bacterial   25\n#> species     species   24\n#> microbial Microbial   23\nbasic2@wc\nrmwords <- wcGeneSummary:::allFreqBSDB\nfilter <- rmwords[rmwords$freq>quantile(rmwords$freq, 0.95),]\nfilter |> head(n=20)\n#>             freq        word\n#> microbiota   275  microbiota\n#> gut          242         gut\n#> microbiome   175  microbiome\n#> patients     146    patients\n#> study         69       study\n#> cancer        64      cancer\n#> composition   62 composition\n#> oral          55        oral\n#> human         49       human\n#> intestinal    48  intestinal\n#> children      45    children\n#> microbial     45   microbial\n#> disease       43     disease\n#> fecal         41       fecal\n#> alterations   36 alterations\n#> analysis      34    analysis\n#> association   34 association\n#> dysbiosis     34   dysbiosis\n#> infection     34   infection\n#> risk          33        risk\nnet <- wcBSDB(c(\"Neisseria\",\"Veillonella\"),\n    curate=TRUE,target=\"title\",pre=TRUE,plotType=\"network\",\n    additionalRemove=filter$word, corThresh=0.2, edgeLink=FALSE,\n    numWords=60)\n#> Input microbes: 2\n#>   Found 76 entries for Neisseria\n#>   Found 221 entries for Veillonella\n#> Including 502 entries\n#> Filter based on BugSigDB\n#> Filtering 0 words (frequency and/or tfidf)\nnet@net\nnet2 <- wcBSDB(c(\"Veillonella dispar\",\"Neisseria flava\",\n    \"Veillonella parvula\",\"Akkermansia muciniphila\"), mbPlot=TRUE,\n    curate=TRUE,target=\"title\",pre=TRUE,plotType=\"network\",\n    additionalRemove=filter$word,\n    numWords=40, corThresh=0.2, colorText=TRUE)\n#> Input microbes: 4\n#>   Found 17 entries for Veillonella dispar\n#>   Found 1 entries for Neisseria flava\n#>   Found 20 entries for Veillonella parvula\n#>   Found 21 entries for Akkermansia muciniphila\n#> Including 90 entries\n#> Filter based on BugSigDB\n#> Filtering 0 words (frequency and/or tfidf)\nnet2@net\nnet3 <- wcBSDB(c(\"Veillonella dispar\",\"Neisseria flava\",\n    \"Veillonella parvula\",\"Akkermansia muciniphila\"), mbPlot=TRUE,\n    curate=TRUE,target=\"title\",pre=TRUE,plotType=\"network\",\n    additionalRemove=filter$word, disPlot=TRUE,\n    numWords=40, corThresh=0.2, colorText=TRUE)\n#> Input microbes: 4\n#>   Found 17 entries for Veillonella dispar\n#>   Found 1 entries for Neisseria flava\n#>   Found 20 entries for Veillonella parvula\n#>   Found 21 entries for Akkermansia muciniphila\n#> Including 90 entries\n#> Filter based on BugSigDB\n#> Filtering 0 words (frequency and/or tfidf)\nnet3@net\nnet4 <- wcBSDB(c(\"Veillonella dispar\",\"Neisseria flava\",\n    \"Veillonella parvula\",\"Akkermansia muciniphila\"), mbPlot=TRUE,\n    curate=FALSE,target=\"title\",pre=TRUE,plotType=\"network\",\n    additionalRemove=filter$word, disPlot=TRUE,\n    numWords=40, corThresh=0.2, colorText=TRUE,\n    abstArg = list(retMax=80, sortOrder=\"pubdate\"))\n#> Input microbes: 4\n#>   Found 17 entries for Veillonella dispar\n#>   Found 1 entries for Neisseria flava\n#>   Found 20 entries for Veillonella parvula\n#>   Found 21 entries for Akkermansia muciniphila\n#> Including 90 entries\n#> Proceeding without API key\n#> Filter based on BugSigDB\n#> Filtering 0 words (frequency and/or tfidf)\nnet4@net\n# Not run\nvp <- wcBSDB(c(\"Veillonella parvula\"),\n                 plotType=\"network\",\n                curate=TRUE, target=\"title\", edgeLink=FALSE,\n                mbPlot = TRUE, ecPlot=TRUE, disPlot=TRUE, tag=TRUE,\n                cl=snow::makeCluster(10),colorText=TRUE, pre=TRUE, numWords=30,\n                nodePal=RColorBrewer::brewer.pal(10, \"Set2\"),\n                ecFile=\"../enzyme.dat\",\n                upTaxFile = \"../speclist.txt\")\n#> Input microbes: 1\n#>   Found 20 entries for Veillonella parvula\n#> Including 31 entries\n#> Filter based on BugSigDB\n#> Filtering 0 words (frequency and/or tfidf)\n#> Multiscale bootstrap... Done.\n#> Processing EC file\n#>   Linking taxonomy to EC\nvp@net\nmetab <- readxl::read_excel(\n  \"../41467_2022_33050_MOESM8_ESM.xlsx\",skip = 7)\n\nmetabEx <- wcBSDB(c(\"Akkermansia muciniphila\"),\n                edgeLink=FALSE,\n                curate=TRUE,\n                corThresh=0.3,\n                nodePal=RColorBrewer::brewer.pal(10, \"Dark2\"),\n                pre=TRUE, tag=TRUE,\n                additionalRemove = filter$word,\n                target=\"abstract\", colorText=TRUE,\n                plotType=\"network\", numWords=50,\n                mbPlot=TRUE,\n                metab =metab, metabThresh=0.15,\n                preserve = TRUE,\n                cl=snow::makeCluster(10),\n                abstArg = list(retMax=80,\n                               sortOrder=\"relevance\"))\n#> Input microbes: 1\n#>   Found 21 entries for Akkermansia muciniphila\n#> Including 31 entries\n#> Target is abstract\n#>   Querying PubMed for 20 pmids\n#>   Querying without API key\n#> Filter based on BugSigDB\n#> Filtering 0 words (frequency and/or tfidf)\n#> Multiscale bootstrap... Done.\n#> Checking metabolites\nmetabEx@net\nsessionInfo()\n#> R version 4.2.2 (2022-10-31 ucrt)\n#> Platform: x86_64-w64-mingw32/x64 (64-bit)\n#> Running under: Windows 10 x64 (build 22621)\n#> \n#> Matrix products: default\n#> \n#> locale:\n#> [1] LC_COLLATE=Japanese_Japan.utf8 \n#> [2] LC_CTYPE=Japanese_Japan.utf8   \n#> [3] LC_MONETARY=Japanese_Japan.utf8\n#> [4] LC_NUMERIC=C                   \n#> [5] LC_TIME=Japanese_Japan.utf8    \n#> \n#> attached base packages:\n#> [1] stats     graphics  grDevices utils     datasets \n#> [6] methods   base     \n#> \n#> other attached packages:\n#> [1] RColorBrewer_1.1-3   ggraph_2.1.0        \n#> [3] ggplot2_3.4.0        wcGeneSummary_0.99.0\n#> \n#> loaded via a namespace (and not attached):\n#>   [1] GeneSummary_0.99.4     colorspace_2.0-3      \n#>   [3] rjson_0.2.21           ellipsis_0.3.2        \n#>   [5] XVector_0.38.0         GlobalOptions_0.1.2   \n#>   [7] base64enc_0.1-3        ggdendro_0.1.23       \n#>   [9] fs_1.5.2               rstudioapi_0.14       \n#>  [11] farver_2.1.1           graphlayouts_0.8.4    \n#>  [13] ggrepel_0.9.2          bit64_4.0.5           \n#>  [15] AnnotationDbi_1.60.0   fansi_1.0.3           \n#>  [17] xml2_1.3.3             downlit_0.4.2         \n#>  [19] cachem_1.0.6           knitr_1.41            \n#>  [21] polyclip_1.10-4        jsonlite_1.8.4        \n#>  [23] png_0.1-8              graph_1.76.0          \n#>  [25] ggforce_0.4.1          shiny_1.7.4           \n#>  [27] bugsigdbr_1.5.3        rentrez_1.2.3         \n#>  [29] compiler_4.2.2         httr_1.4.4            \n#>  [31] assertthat_0.2.1       fastmap_1.1.0         \n#>  [33] cli_3.6.0              later_1.3.0           \n#>  [35] tweenr_2.0.2           htmltools_0.5.4       \n#>  [37] tools_4.2.2            igraph_1.3.5          \n#>  [39] NLP_0.2-1              gtable_0.3.1          \n#>  [41] glue_1.6.2             GenomeInfoDbData_1.2.9\n#>  [43] dplyr_1.0.10           Rcpp_1.0.9            \n#>  [45] slam_0.1-50            Biobase_2.58.0        \n#>  [47] jquerylib_0.1.4        vctrs_0.5.1           \n#>  [49] Biostrings_2.66.0      xfun_0.36             \n#>  [51] stringr_1.5.0          mime_0.12             \n#>  [53] lifecycle_1.0.3        pvclust_2.2-0         \n#>  [55] XML_3.99-0.13          dendextend_1.16.0     \n#>  [57] org.Hs.eg.db_3.16.0    zlibbioc_1.44.0       \n#>  [59] MASS_7.3-58.1          scales_1.2.1          \n#>  [61] tidygraph_1.2.2        promises_1.2.0.1      \n#>  [63] parallel_4.2.2         cyjShiny_1.0.34       \n#>  [65] yaml_2.3.6             memoise_2.0.1         \n#>  [67] gridExtra_2.3          yulab.utils_0.0.6     \n#>  [69] sass_0.4.4             stringi_1.7.12        \n#>  [71] RSQLite_2.2.20         S4Vectors_0.36.1      \n#>  [73] BiocGenerics_0.44.0    GenomeInfoDb_1.34.6   \n#>  [75] rlang_1.0.6            pkgconfig_2.0.3       \n#>  [77] bitops_1.0-7           evaluate_0.19         \n#>  [79] purrr_1.0.1            patchwork_1.1.2       \n#>  [81] htmlwidgets_1.6.1      cowplot_1.1.1         \n#>  [83] bit_4.0.5              tidyselect_1.2.0      \n#>  [85] magrittr_2.0.3         bookdown_0.31         \n#>  [87] R6_2.5.1               IRanges_2.32.0        \n#>  [89] generics_0.1.3         DBI_1.1.3             \n#>  [91] pillar_1.8.1           withr_2.5.0           \n#>  [93] KEGGREST_1.38.0        RCurl_1.98-1.9        \n#>  [95] tibble_3.1.8           crayon_1.5.2          \n#>  [97] wordcloud_2.6          utf8_1.2.2            \n#>  [99] rmarkdown_2.19         viridis_0.6.2         \n#> [101] GetoptLong_1.0.5       grid_4.2.2            \n#> [103] blob_1.2.3             digest_0.6.31         \n#> [105] xtable_1.8-4           tm_0.7-10             \n#> [107] tidyr_1.2.1            httpuv_1.6.8          \n#> [109] gridGraphics_0.5-1     stats4_4.2.2          \n#> [111] munsell_0.5.0          ggplotify_0.1.0       \n#> [113] viridisLite_0.4.1      bslib_0.4.2"},{"path":"custom-usage---interactive-inspection-of-bayesian-network-annotated-by-words.html","id":"custom-usage---interactive-inspection-of-bayesian-network-annotated-by-words","chapter":"4 Custom usage - Interactive inspection of Bayesian network annotated by words","heading":"4 Custom usage - Interactive inspection of Bayesian network annotated by words","text":"example, Bayesian network showing module eigengenes relationship inferred using boot.strength function bnlearn weighted gene correlation network analysis (WGCNA) results. modules annotated word clouds produced wcGeneSummary(), can exported format Cytoscape.js vis.js. way, module relationship can interactively inspected functional implications.Use like http-server directory containing exported JavaScript, interactively inspect module relationship word information.example visualization shown (code ).Example visualization Bayesian network","code":"\nlibrary(wcGeneSummary)\nlibrary(ggplot2)\nlibrary(ggraph)\nlibrary(org.Hs.eg.db)\nlibrary(clusterProfiler)\nlibrary(RColorBrewer)\n## In this example, we simulate WGCNA results.\n## you can just use results from WGCNA.\n## Assuming WGCNA results are stored in `mod`\nmod <- wcGeneSummary::returnExample()\nMEs <- mod$MEs\nmodColors <- mod$colors\nensg <- names(modColors)\n\n# library(bnlearn)\nlibrary(igraph)\n\n## Replace like boot.strength(mod$MEs, R=500, algorithm = \"hc\")\n# dag <- model2network(\"[ME1][ME2|ME1]\") # If using bnlearn\ndag <- graph_from_literal( ME1-+ME2, ME1-+ME3 )\n\n## Convert to igraph\n# g <- as.igraph(dag)\ng <- dag\n\n## Assign edge attributes\n## Skip, if you perform boot.strength, the edge attributes can be added from the result\n# el <- data.frame(as_edgelist(g))\n# colnames(el) <- c(\"from\",\"to\")\n# el <- left_join(el, bs)\n# E(g)$strength <- el$strength\n# E(g)$direction <- el$direction\n\n## Node attributes\nV(g)$stripName <- gsub(\"ME\",\"\",V(g)$name)\nsizes <- table(modColors)\nV(g)$size <- as.numeric(sizes[V(g)$stripName])\n\n## Directory to save images and a script\nrootDir <- \"./\"\nnetDir <- \"visCyjs\"\nimageDir <- \"images\"\n\ndir.create(paste0(rootDir, netDir))\ndir.create(paste0(rootDir, netDir, \"/\", imageDir))\n\nimages <- c()\nplotType <- \"bar\"\nnumLim <- 200 # limit for gene number\nfor (i in V(g)$name){\n    print(i)\n    i <- as.numeric(gsub(\"ME\",\"\",i)) # strip ME\n\n    queries <- ensg[modColors==i]\n    if (length(queries)>numLim) {\n        warning(\"Sampling random genes\")\n        queries <- queries[sample(1:length(queries), numLim)] ## Temporary restrict to randomly chosen genes, should be replaced to like kME values\n    }\n    \n    ## Convert to ENTREZ\n    entre <- AnnotationDbi::select(org.Hs.eg.db, keytype=\"ENSEMBL\",\n        keys = queries, columns = \"ENTREZID\")$ENTREZID\n    \n    if (plotType==\"bar\"){\n        plt <- makeBar(entre, keyType=\"ENTREZID\") # get barplot\n    } else { ## If wordcloud\n        # A <- wcGeneSummary(entre, keyType=\"ENTREZID\",\n        #                    argList=list(rot.per=0.4,\n        #                                 colors=brewer.pal(10,\n        #                                                   sample(row.names(RColorBrewer::brewer.pal.info), 1)),\n        #                                 random.order=FALSE),\n        #                    numWords=80)\n        # # plt <- A@wc\n        # # \n        # # ## This time use ggwordcloud()\n        # plt <- ggwordcloud::ggwordcloud(A@freqDf$word, A@freqDf$freq,\n        #                      shape=\"circle\", min.freq = 1,max.words = Inf,\n        #                      rot.per = 0.5, random.order = FALSE,\n        #                      colors = brewer.pal(10,\n        #                                          sample(row.names(RColorBrewer::brewer.pal.info), 1)))+\n        #          scale_size_area(max_size = 40)\n    }\n    ## Save images\n    ggsave(paste0(rootDir, netDir, \"/\", imageDir, \"/\", i ,\".png\"),\n           plt, dpi=300, width=10, height=10)\n    ## Store image dir\n    images <- c(images, paste0(imageDir, \"/\", i ,\".png\"))\n}\n#> [1] \"ME1\"\n#> Input genes: 12\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> [1] \"ME2\"\n#> Input genes: 13\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> [1] \"ME3\"\n#> Input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\nV(g)$image <- images\n\n## Node shape\nif (plotType==\"bar\"){\n    V(g)$shape <- rep(\"rectangle\", length(V(g))) \n} else {\n    V(g)$shape <- rep(\"circle\", length(V(g)))\n}\n\n## Scale the node size\nsizeMin <- 50\nsizeMax <- 200\nrawMin <- min(V(g)$size)\nrawMax <- max(V(g)$size)\nscf <- (sizeMax-sizeMin)/(rawMax-rawMin)\nV(g)$size <- scf * V(g)$size + sizeMin - scf * rawMin\n\n## Export\nexportCyjs(g, rootDir, netDir)\n# or, exportVisjs(g, rootDir, netDir)"},{"path":"custom-usage---annotating-module-eigengenes-dendrogram.html","id":"custom-usage---annotating-module-eigengenes-dendrogram","chapter":"5 Custom usage - Annotating module eigengenes dendrogram","heading":"5 Custom usage - Annotating module eigengenes dendrogram","text":"relationship gene clusters often investigated clustering analysis like WGCNA. users WGCNA typically plot dendrogram heatmap module eigengenes using plotEigengeneNetworks, useful combine wcGeneSummary, plot additional word information dendrogram one line.examining enriched pathway names dendrograms, specify argList wcGeneSummary, like list(enrich=\"kegg\").textual information, can simply annotate dendrogram using enrichment analysis.\nUseful inspecting branches dendrogram contains pathway information.\ncolumn names clusterProfiler results can specified showType.specifically interested pathway, use highlight highlight names dendrogram.","code":"\n# WGCNA::plotEigengeneNetworks(mod$MEs, mod$colors, plotHeatmaps = FALSE)\nplotEigengeneNetworksWithWords(MEs, modColors)\n#> Bootstrap (r = 0.5)... Done.\n#> Bootstrap (r = 0.6)... Done.\n#> Bootstrap (r = 0.7)... Done.\n#> Bootstrap (r = 0.8)... Done.\n#> Bootstrap (r = 0.9)... Done.\n#> Bootstrap (r = 1.0)... Done.\n#> Bootstrap (r = 1.1)... Done.\n#> Bootstrap (r = 1.2)... Done.\n#> Bootstrap (r = 1.3)... Done.\n#> Bootstrap (r = 1.4)... Done.\n#> Input genes: 12\n#>   Converted input genes: 12\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 13\n#>   Converted input genes: 13\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\nplotEigengeneNetworksWithWords(MEs, modColors, type=\"words\", argList=list(enrich=\"kegg\"))\n#> Bootstrap (r = 0.5)... Done.\n#> Bootstrap (r = 0.6)... Done.\n#> Bootstrap (r = 0.7)... Done.\n#> Bootstrap (r = 0.8)... Done.\n#> Bootstrap (r = 0.9)... Done.\n#> Bootstrap (r = 1.0)... Done.\n#> Bootstrap (r = 1.1)... Done.\n#> Bootstrap (r = 1.2)... Done.\n#> Bootstrap (r = 1.3)... Done.\n#> Bootstrap (r = 1.4)... Done.\n#> Input genes: 12\n#>   Converted input genes: 12\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Performing enrichment analysisInput genes: 13\n#>   Converted input genes: 13\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Performing enrichment analysis\nplotEigengeneNetworksWithWords(MEs, modColors, type=\"enrich\")\n#> Bootstrap (r = 0.5)... Done.\n#> Bootstrap (r = 0.6)... Done.\n#> Bootstrap (r = 0.7)... Done.\n#> Bootstrap (r = 0.8)... Done.\n#> Bootstrap (r = 0.9)... Done.\n#> Bootstrap (r = 1.0)... Done.\n#> Bootstrap (r = 1.1)... Done.\n#> Bootstrap (r = 1.2)... Done.\n#> Bootstrap (r = 1.3)... Done.\n#> Bootstrap (r = 1.4)... Done.\nplotEigengeneNetworksWithWords(MEs, modColors, type=\"enrich\", showType=\"Description\")\n#> Bootstrap (r = 0.5)... Done.\n#> Bootstrap (r = 0.6)... Done.\n#> Bootstrap (r = 0.7)... Done.\n#> Bootstrap (r = 0.8)... Done.\n#> Bootstrap (r = 0.9)... Done.\n#> Bootstrap (r = 1.0)... Done.\n#> Bootstrap (r = 1.1)... Done.\n#> Bootstrap (r = 1.2)... Done.\n#> Bootstrap (r = 1.3)... Done.\n#> Bootstrap (r = 1.4)... Done.\nplotEigengeneNetworksWithWords(mod$MEs, mod$colors,\n                               type=\"enrich\", highlight=c(\"hsa04060\"))\n#> Bootstrap (r = 0.5)... Done.\n#> Bootstrap (r = 0.6)... Done.\n#> Bootstrap (r = 0.7)... Done.\n#> Bootstrap (r = 0.8)... Done.\n#> Bootstrap (r = 0.9)... Done.\n#> Bootstrap (r = 1.0)... Done.\n#> Bootstrap (r = 1.1)... Done.\n#> Bootstrap (r = 1.2)... Done.\n#> Bootstrap (r = 1.3)... Done.\n#> Bootstrap (r = 1.4)... Done.\n#> 'select()' returned 1:1 mapping between keys and\n#> columns\n#> 'select()' returned 1:1 mapping between keys and\n#> columns"},{"path":"custom-usage---assess-the-occurrence-of-the-speicific-words-across-gene-clusters.html","id":"custom-usage---assess-the-occurrence-of-the-speicific-words-across-gene-clusters","chapter":"6 Custom usage - Assess the occurrence of the speicific words across gene clusters","heading":"6 Custom usage - Assess the occurrence of the speicific words across gene clusters","text":"","code":"\nlibrary(limma)\n#> \n#> Attaching package: 'limma'\n#> The following object is masked from 'package:BiocGenerics':\n#> \n#>     plotMA\nlibrary(ggrepel)\nquery <- \"DNA repair\"\ntab <- getGeneKEGGLinks(species=\"hsa\")\nlistOfGenes <- list()\nfor (path in unique(tab$PathwayID)){\n    listOfGenes[[path]] <- subset(tab, PathwayID==path)$GeneID\n}\n## Random subset! The results would be different.\nfrq <- findTerm(query, listOfGenes[sample(length(listOfGenes), 20)],\n                split=TRUE,\n                keyType=\"ENTREZID\")\n#> Finding query in 20 clusters ...\n#> Input genes: 170\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 67\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 36\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 114\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 89\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 57\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 17\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 102\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 156\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 114\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 251\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 202\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 104\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 41\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 15\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 33\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 310\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 76\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 40\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Input genes: 157\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\nplt <- data.frame(t(data.frame(frq, check.names=FALSE)),\n                  check.names=FALSE)\n\nplt$name <- gsub(\"path:\", \"\", rownames(plt))\np <- ggplot(plt, aes(dna, repair, label = plt[,3])) +\n    geom_point(color = \"red\")+ \n    geom_text_repel(bg.color=\"white\")+theme_minimal()+\n    xlab(\"dna\")+ylab(\"repair\")\np\n#> Warning: ggrepel: 8 unlabeled data points (too many\n#> overlaps). Consider increasing max.overlaps"},{"path":"custom-usage---recluster-the-cluster-using-word-information.html","id":"custom-usage---recluster-the-cluster-using-word-information","chapter":"7 Custom usage - Recluster the cluster using word information","heading":"7 Custom usage - Recluster the cluster using word information","text":"","code":"\nsimExample <- returnSim(returnExample()$color,\n                        keyType=\"ENSEMBL\", argList=list(ora=TRUE))\n#> Number of clusters: 3\n#> 1\n#> Input genes: 12\n#>   Converted input genes: 12\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Performing ORA\n#> Filtered 109 words (ORA)\n#> 2\n#> Input genes: 13\n#>   Converted input genes: 13\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Performing ORA\n#> Filtered 238 words (ORA)\n#> 3\n#> Input genes: 7\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Performing ORA\n#> Filtered 148 words (ORA)\nheatmap(simExample)\nsimExample <- returnSim(returnExample()$color,\n                        keyType=\"ENSEMBL\",\n                        argList=list(tfidf=TRUE, takeMax=TRUE))\n#> Number of clusters: 3\n#> 1\n#> Input genes: 12\n#>   Converted input genes: 12\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> 2\n#> Input genes: 13\n#>   Converted input genes: 13\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> 3\n#> Input genes: 7\n#>   Converted input genes: 7\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\nheatmap(simExample)"},{"path":"custom-usage---pathview-text.html","id":"custom-usage---pathview-text","chapter":"8 Custom usage - pathview text","heading":"8 Custom usage - pathview text","text":"","code":""},{"path":"custom-usage---pathview-text.html","id":"ko-queries","chapter":"8 Custom usage - pathview text","heading":"8.1 KO queries","text":"KEGG mapping plots produced pathview can populated text information (Luo Brouwer. 2013).Suppose example KEGG Orthology obtained microbiome-related experiments.\nusing MicrobiomeProfiler, enriched pathway using -representation analysis can obtained follows.raw pathview plotTo use pathviewText() one specify database retrieve text, \"refseq\" \"abstract\".\ndefault “abstract”, fetches information RefSeq database. case, KO number included RefSeq, thus abstract chosen. However, querying KO number useful. conver KO number EC number using KEGG REST API, fetches description using wcEC() function, query enzyme name PubMed. way, one must provide searchTerm, termMap, map KO EC. Also, node.types=\"ortholog\" must passed pathview.","code":"\nlibrary(wcGeneSummary)\nlibrary(dplyr)\nlibrary(pathview);library(png)\nkos <- c(\"K00640\",\"K23304\",\"K01760\",\"K01697\",\"K00549\",\"K00899\")\nenriched <- MicrobiomeProfiler::enrichKO(kos)\nclusterProfiler::cnetplot(enriched)\n## As the output is PNG, this script is omitted.\npvInput <- rep(1,length(kos))\nnames(pvInput) <- kos\npathview(kos, pathway.id = \"00270\", species = \"ko\")\ngrid::rasterGrob(readPNG(\"ko00270.pathview.png\"), interpolate=FALSE)\n#> rastergrob[GRID.rastergrob.93]\n\necko <- data.table::fread(\"https://rest.kegg.jp/link/ko/ec\",\n                            header=FALSE)\necko$EC <- sapply(strsplit(ecko$V1, \":\"),\"[\",2)\necko$KO <- sapply(strsplit(ecko$V2, \":\"), \"[\", 2)\nfilt <- ecko[ ecko$KO %in% kos, ]\necnum <- filt$EC\ntermMap <- filt[,c(\"KO\",\"EC\")] |> `colnames<-`(c(\"query\",\"number\"))\necQuery <- wcEC(\"../enzyme.dat\", ecnum = ecnum, onlyTerm =TRUE)\n#> Processing EC file\necMap <- wcEC(\"../enzyme.dat\", ecnum = ecnum, onlyDf =TRUE)\n#> Processing EC file\ntermMap <- merge(termMap, ecMap[,c(\"number\",\"desc\")], by=\"number\") |>\n  `colnames<-`(c(\"number\",\"query\",\"description\"))\n\n## Main function\n\nhor <- pathviewText(kos, keyType = \"KO\",\n     target=\"abstract\",\n     pid = \"00270\",\n     org = \"ko\", \n     searchTerms = ecQuery,\n     termMap = termMap,\n     node.types=\"ortholog\")\n#> Proceeding without API key\n\nhor$concat\n\n## We can transpose the barplot by trans=TRUE\n\nver <- pathviewText(kos, keyType = \"KO\",\n     target=\"abstract\",\n     pid = \"00270\",\n     org = \"ko\", \n       trans = TRUE,\n     searchTerms = ecQuery,\n     termMap = termMap,\n     node.types=\"ortholog\")\n#> Proceeding without API key\n\nver$concat"},{"path":"custom-usage---pathview-text.html","id":"gene-queries","chapter":"8 Custom usage - pathview text","heading":"8.2 Gene queries","text":"gene queries, can obtain plot using relatively simple query.returned osplot object can accessed name text list. Note nodes (words) within final network plotted. words included, path arguments argList include .","code":"\nquery <- c(\"TP53\",\"CDC45\",\"CDC6\")\n\nver <- pathviewText(query,\n     keyType = \"SYMBOL\",\n     target=\"abstract\",\n     pid = \"04110\",\n     org = \"hsa\")\n#> converting to ENTREZID\n#> converted input genes: 3\n#> Proceeding without API key\n\nver$concat\nver$text\n#> Type: pubmed_abstract\n#> Number of words: 20\n#> TP53 OR CDC45 OR CDC6\n#> 381.7 Kb\n\nver <- pathviewText(query,\n     keyType = \"SYMBOL\",\n     target=\"abstract\",\n     pid = \"04110\",\n     org = \"hsa\", argList=list(numWords=Inf, corThresh=0))\n#> converting to ENTREZID\n#> 'select()' returned 1:1 mapping between keys and\n#> columns\n#> converted input genes: 3\n#> Info: Downloading xml files for hsa04110, 1/1 pathways..\n#> Info: Downloading png files for hsa04110, 1/1 pathways..\n#> Info: Working in directory C:/Users/nsato/Dropbox/build_wgcs/book\n#> Info: Writing image file hsa04110.custom.cols.png\n#> Proceeding without API key\n\nver$concat"},{"path":"application-examples.html","id":"application-examples","chapter":"9 Application examples","heading":"9 Application examples","text":"demonstrate use case package, investigates transcriptomic changes induced BK polyomavirus (BKPyV) infection renal proximal tubular epithelial cells (Assetta et al. 2016). Differentially expressed mRNAs 3 days post-infection obtained, -regulated mRNAs BKPyV infected cells examined.","code":""},{"path":"application-examples.html","id":"load-the-necessary-packages-and-genes","chapter":"9 Application examples","heading":"9.1 Load the necessary packages and genes","text":"","code":"\nlibrary(wcGeneSummary)\nlibrary(org.Hs.eg.db)\nlibrary(ggplot2)\nlibrary(ReactomePA);library(clusterProfiler)\nlibrary(ggraph);library(igraph)\nlibrary(ggforce) ## For genePathPlot\ndegs <- wcGeneSummary:::d3degDownAssetta2016\nlength(degs)\n#> [1] 191\ndegs\n#>   [1] \"ABCB4\"           \"ABCB7\"           \"AKTIP\"          \n#>   [4] \"ALS2\"            \"ANKRA2\"          \"ANTXR1\"         \n#>   [7] \"APH1B\"           \"ARHGEF28\"        \"ARNTL\"          \n#>  [10] \"ATMIN\"           \"BDH2\"            \"BIRC2\"          \n#>  [13] \"BTG1\"            \"BTG2\"            \"C4A\"            \n#>  [16] \"C7orf60\"         \"C8orf4\"          \"CALCOCO1\"       \n#>  [19] \"CAPRIN2\"         \"CARS\"            \"CBLB\"           \n#>  [22] \"CCNDBP1\"         \"CCNG2\"           \"CCZ1B\"          \n#>  [25] \"CDC42EP3\"        \"CDH6\"            \"CFLAR\"          \n#>  [28] \"CHMP1B\"          \"CHMP4C\"          \"CLUAP1\"         \n#>  [31] \"COG2\"            \"COG3\"            \"CPQ\"            \n#>  [34] \"CROT\"            \"CTTNBP2NL\"       \"CYP4V2\"         \n#>  [37] \"DAB2\"            \"DDB2\"            \"DDX17\"          \n#>  [40] \"DDX5\"            \"DGKA\"            \"DHX32\"          \n#>  [43] \"DLG1\"            \"DYNC2LI1\"        \"DYRK2\"          \n#>  [46] \"EFHC1\"           \"EIF4A2\"          \"ERMAP\"          \n#>  [49] \"ERMARD\"          \"EXOC1\"           \"FAM134B\"        \n#>  [52] \"FAM160B1\"        \"FAM21C\"          \"FAM84B\"         \n#>  [55] \"FANK1\"           \"FAS\"             \"FBXO38\"         \n#>  [58] \"FCHO2\"           \"FGD6\"            \"FLJ22447\"       \n#>  [61] \"FMNL2\"           \"GADD45A\"         \"GJA1\"           \n#>  [64] \"GLIDR\"           \"GLT8D1\"          \"GOPC\"           \n#>  [67] \"GPBP1L1\"         \"GPR155\"          \"GPR75-ASB3\"     \n#>  [70] \"GRAMD3\"          \"HADHB\"           \"HCG11\"          \n#>  [73] \"HDAC9\"           \"HDHD2\"           \"HERPUD1\"        \n#>  [76] \"HSDL2\"           \"ICA1\"            \"ICK\"            \n#>  [79] \"IFNGR1\"          \"IFT46\"           \"IFT74\"          \n#>  [82] \"IRF6\"            \"ITGA2\"           \"ITGA6\"          \n#>  [85] \"ITGAV\"           \"ITGB6\"           \"KDM5B\"          \n#>  [88] \"KIF3A\"           \"KIF5B\"           \"KLHL20\"         \n#>  [91] \"KLHL24\"          \"KLHL9\"           \"KPNA5\"          \n#>  [94] \"KRCC1\"           \"L3MBTL3\"         \"LINC00657\"      \n#>  [97] \"LOC100131564\"    \"LZTFL1\"          \"MAMDC2\"         \n#> [100] \"MAP4K5\"          \"MAT2B\"           \"MBNL2\"          \n#> [103] \"MDM2\"            \"MECOM\"           \"MFSD1\"          \n#> [106] \"MGEA5\"           \"MICU3\"           \"MSANTD4\"        \n#> [109] \"NBPF11\"          \"NCBP2\"           \"NEAT1\"          \n#> [112] \"NTM\"             \"OGT\"             \"PAFAH1B2\"       \n#> [115] \"PAFAH2\"          \"PCMTD2\"          \"PDE4D\"          \n#> [118] \"PDP1\"            \"PELI1\"           \"PEX1\"           \n#> [121] \"PHF14\"           \"PHOSPHO2-KLHL23\" \"PIK3IP1\"        \n#> [124] \"PLA2R1\"          \"PLCB4\"           \"PLK2\"           \n#> [127] \"POLI\"            \"POSTN\"           \"PPAN-P2RY11\"    \n#> [130] \"PPFIBP1\"         \"PPP2CB\"          \"PRICKLE1\"       \n#> [133] \"PROS1\"           \"PSMD5-AS1\"       \"RAD17\"          \n#> [136] \"RHOQ\"            \"RIMKLB\"          \"RNA18S5\"        \n#> [139] \"RNF170\"          \"RNF20\"           \"RNU1-28P\"       \n#> [142] \"RPL23AP53\"       \"RRM2B\"           \"RRN3\"           \n#> [145] \"RRN3P1\"          \"SEMA3C\"          \"SERINC1\"        \n#> [148] \"SESN1\"           \"SESN3\"           \"SGK1\"           \n#> [151] \"SLC22A5\"         \"SLC37A3\"         \"SVIL\"           \n#> [154] \"SYT11\"           \"TARSL2\"          \"TBC1D19\"        \n#> [157] \"TBCK\"            \"TBRG1\"           \"TGFA\"           \n#> [160] \"TGFB2\"           \"TIPARP\"          \"TMEM136\"        \n#> [163] \"TNFRSF10B\"       \"TNFRSF10D\"       \"TOM1L1\"         \n#> [166] \"TP53INP1\"        \"TRIM13\"          \"TRIM32\"         \n#> [169] \"TRIM4\"           \"TSC1\"            \"TSPYL5\"         \n#> [172] \"UGT2B7\"          \"UNC13B\"          \"UPRT\"           \n#> [175] \"VPS41\"           \"VPS8\"            \"WDR11\"          \n#> [178] \"WDR19\"           \"XPC\"             \"YPEL2\"          \n#> [181] \"ZC2HC1A\"         \"ZFAND5\"          \"ZFP90\"          \n#> [184] \"ZFR\"             \"ZMAT3\"           \"ZNF12\"          \n#> [187] \"ZNF248\"          \"ZNF322\"          \"ZNF561\"         \n#> [190] \"ZNF626\"          \"ZSCAN30\""},{"path":"application-examples.html","id":"enrichment-analysis","chapter":"9 Application examples","heading":"9.2 Enrichment analysis","text":"First, perform enrichment analysis using ReactomePA.\nenrichment analysis results, cluster related transcriptional regulation TP53.store name enriched pathways network downstream analysis.","code":"\n## Convert to ENTREZID\nentre <- AnnotationDbi::select(org.Hs.eg.db, keytype=\"SYMBOL\",\n                               keys = degs, columns = \"ENTREZID\")$ENTREZID\npway <- setReadable(enrichPathway(entre), org.Hs.eg.db)\nsigpway <- subset(pway@result, p.adjust<0.05)\nsigpway$Description\n#>  [1] \"Transcriptional Regulation by TP53\"                              \n#>  [2] \"RIPK1-mediated regulated necrosis\"                               \n#>  [3] \"Regulation of necroptotic cell death\"                            \n#>  [4] \"Regulated Necrosis\"                                              \n#>  [5] \"Intraflagellar transport\"                                        \n#>  [6] \"Regulation by c-FLIP\"                                            \n#>  [7] \"CASP8 activity is inhibited\"                                     \n#>  [8] \"Dimerization of procaspase-8\"                                    \n#>  [9] \"TP53 Regulates Transcription of Death Receptors and Ligands\"     \n#> [10] \"Caspase activation via Death Receptors in the presence of ligand\"\n#> [11] \"FOXO-mediated transcription of cell cycle genes\"                 \n#> [12] \"TP53 Regulates Transcription of Cell Death Genes\"                \n#> [13] \"Cilium Assembly\"\ncnetplot(pway)\n\n## Genes involved in significant pathways\nexcheck <- unlist(unique(sapply(sigpway$geneID,\n                                function (x) strsplit(x,\"/\"))))\nexcheck\n#>  [1] \"BTG2\"      \"DDB2\"      \"DYRK2\"     \"FAS\"      \n#>  [5] \"GADD45A\"   \"MDM2\"      \"PLK2\"      \"PPP2CB\"   \n#>  [9] \"RAD17\"     \"RRM2B\"     \"SESN1\"     \"SESN3\"    \n#> [13] \"SGK1\"      \"TNFRSF10B\" \"TNFRSF10D\" \"TP53INP1\" \n#> [17] \"TSC1\"      \"BIRC2\"     \"CFLAR\"     \"FAS\"      \n#> [21] \"OGT\"       \"PELI1\"     \"TNFRSF10B\" \"BIRC2\"    \n#> [25] \"CFLAR\"     \"CHMP4C\"    \"FAS\"       \"OGT\"      \n#> [29] \"PELI1\"     \"TNFRSF10B\" \"CLUAP1\"    \"DYNC2LI1\" \n#> [33] \"IFT46\"     \"IFT74\"     \"KIF3A\"     \"WDR19\"    \n#> [37] \"CFLAR\"     \"FAS\"       \"TNFRSF10B\" \"FAS\"      \n#> [41] \"TNFRSF10B\" \"TNFRSF10D\" \"BTG1\"      \"CCNG2\"    \n#> [45] \"GADD45A\"   \"FAS\"       \"TNFRSF10B\" \"TNFRSF10D\"\n#> [49] \"TP53INP1\"  \"CLUAP1\"    \"DYNC2LI1\"  \"EXOC1\"    \n#> [53] \"IFT46\"     \"IFT74\"     \"KIF3A\"     \"LZTFL1\"   \n#> [57] \"WDR19\"\nnetreac <- wcGeneSummary(degs,\n                         enrich=\"reactome\",\n                         plotType=\"network\",\n                         numWords=50,\n                         colorText=TRUE)\n#> Input genes: 191\n#> 'select()' returned 1:1 mapping between keys and\n#> columns\n#>   Converted input genes: 174\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Performing enrichment analysis"},{"path":"application-examples.html","id":"text-mining-the-gene-summaries","chapter":"9 Application examples","heading":"9.3 Text mining the gene summaries","text":"Next perform plain function producing correlation network, showing top-genes related high-frequency words text RefSeq summary. obtained list genes geneCount slot.","code":"\nnet1 <- wcGeneSummary(excheck,\n                      plotType=\"network\",\n                      colorText=TRUE,\n                      numWords=30,\n                      corThresh=0.5,\n                      genePlot=TRUE,\n                      genePlotNum=5,\n                      edgeLink=FALSE,\n                      genePathPlot=\"reactome\")\n#> Input genes: 57\n#>   Converted input genes: 57\n#> Filter based on GeneSummary\n#> Filtered 65 words (frequency and/or tfidf)\n#> Found 28 enriched term\nnet1@net\nnet1@geneCount\n#> \n#>     RAD17     SESN1      TSC1      DDB2 TNFRSF10B      BTG1 \n#>         9         9         6         5         5         4 \n#>     DYRK2     BIRC2     CCNG2       FAS   GADD45A    LZTFL1 \n#>         4         3         3         3         3         3 \n#>      MDM2     SESN3      SGK1     CFLAR    CHMP4C       OGT \n#>         3         3         3         2         2         2 \n#> TNFRSF10D     WDR19      BTG2  DYNC2LI1     EXOC1     IFT74 \n#>         2         2         1         1         1         1 \n#>    PPP2CB     RRM2B \n#>         1         1\ntop <- names(net1@geneCount[net1@geneCount>=5])\ntop\n#> [1] \"RAD17\"     \"SESN1\"     \"TSC1\"      \"DDB2\"     \n#> [5] \"TNFRSF10B\""},{"path":"application-examples.html","id":"text-mining-the-available-literature","chapter":"9 Application examples","heading":"9.4 Text mining the available literature","text":"genes queried PubMed information.\nFirst, show network article titles.Obtain show network article abstract.","code":"\ntitlenet <- wcAbst(top,\n                   sortOrder=\"relevance\",\n                   target=\"title\",\n                   plotType=\"network\",\n                   colorText=TRUE,\n                   madeUpperGenes=FALSE,\n                   corThresh=0.2,\n                   preset=TRUE,\n                   retMax=40,\n                   numWords=40,\n                   edgeLink=FALSE)\n#> Proceeding without API key\ntitlenet@net\nabstnet <- wcAbst(top,\n                   target=\"abstract\",\n                   plotType=\"network\",\n                   colorText=TRUE,\n                   madeUpperGenes=FALSE,\n                   corThresh=0.2,\n                   preset=TRUE,\n                   retMax=40,\n                   numWords=40,\n                   edgeLink=FALSE)\n#> Proceeding without API key\nabstnet@net"},{"path":"application-examples.html","id":"combine-and-compare-networks","chapter":"9 Application examples","heading":"9.5 Combine and compare networks","text":"RefSeq summary articles related important genes, cluster functionality DNA damage response, also upregulated BKPyV infection. networks can combined find intersections differences. can see addition Reactome pathway names, plenty information obtained summarized querying databases, aid interpreting clusters genes hypothesis generation.network, DNA damage repair pathway, especially nucleotide excision repair related DDB2, METTL14,RAD17 might related BKPyV infection, prioritize based log2FoldChange enrichment analysis.network can obtained returnNet=TRUE, can used downstream analysis like assessment degrees community detection.Dynamic layout can also used compare networks, graphlayouts, comparing multiple graphs, especially useful time-series analysis. See documentation layout_as_dynamic specifying alpha, default 0.5.","code":"\ncompareWordNet(list(abstnet, titlenet, netreac, net1),\n               titles=c(\"Abstract\",\"Title\",\"Reactome\",\"RefSeq\"))\n#> Warning in RColorBrewer::brewer.pal(catNum, colPal): n too large, allowed maximum for palette Pastel1 is 9\n#> Returning the palette you asked for with that many colors\n#> Scale for colour is already present.\n#> Adding another scale for colour, which will replace the\n#> existing scale.\n#> Warning in grid.Call(C_stringMetric,\n#> as.graphicsAnnot(x$label)): font family not found in Windows\n#> font database\n#> Warning in grid.Call(C_stringMetric,\n#> as.graphicsAnnot(x$label)): font family not found in Windows\n#> font database\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\nconet <- compareWordNet(list(netreac,\n                    net1,\n                    titlenet,\n                    abstnet),\n               returnNet = TRUE)\n\nddrNms <- NULL\nfor (nm in names(V(conet))) {\n    if (tolower(nm) %in% c(\"dna\",\"damage\",\"repair\")) {\n        ddrNms <- c(ddrNms, names(neighbors(conet, nm)))\n    }\n}\nddrNms\n#>  [1] \"checkpoint\"      \"cycle\"           \"DNA\"            \n#>  [4] \"phosphorylation\" \"required\"        \"response\"       \n#>  [7] \"DDB2\"            \"SESN1\"           \"RAD17\"          \n#> [10] \"promotes\"        \"checkpoint\"      \"cycle\"          \n#> [13] \"damage\"          \"phosphorylation\" \"required\"       \n#> [16] \"response\"        \"DDB2\"            \"SESN1\"          \n#> [19] \"RAD17\"           \"Cancer\"          \"degradation\"    \n#> [22] \"promotes\"        \"protein\"         \"regulates\"      \n#> [25] \"Repair\"          \"CDT2\"            \"chromatin\"      \n#> [28] \"complex\"         \"Damage\"          \"function\"       \n#> [31] \"induced\"         \"NER\"             \"DNA\"            \n#> [34] \"DDB2\"            \"Excision\"        \"Global\"         \n#> [37] \"mice\"            \"Nucleotide\"      \"protein\"        \n#> [40] \"Proteins\"        \"level\"           \"METTL14\"        \n#> [43] \"NER\"             \"cellular\"        \"checkpoint\"     \n#> [46] \"DNA\"             \"response\"        \"RAD17\"          \n#> [49] \"Cancer\"          \"chromatin\"       \"function\"       \n#> [52] \"NER\"\n\nddrRelated <- induced.subgraph(conet,\n                 names(V(conet)) %in% unique(ddrNms))\nV(ddrRelated)$SYMBOL <- names(V(ddrRelated)) %in% keys(org.Hs.eg.db,\"SYMBOL\")\nggraph(ddrRelated)+\n    geom_edge_diagonal2(color=\"grey80\")+\n    geom_node_point(aes(color=SYMBOL))+\n    geom_node_text(aes(label=name, color=SYMBOL),check_overlap=TRUE, repel=TRUE,\n                   bg.color = \"white\", segment.color=\"black\",\n                   bg.r = .15)+\n    scale_color_manual(values=c(\"steelblue\",\"tomato\"))+\n    theme_graph()\n#> Using \"stress\" as default layout\n#> Warning: Using the `size` aesthetic in this geom was deprecated in\n#> ggplot2 3.4.0.\n#> ℹ Please use `linewidth` in the `default_aes` field and\n#>   elsewhere instead.\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\nconetDeg <- igraph::degree(conet)\nconetDeg[order(conetDeg, decreasing=TRUE)] |> head(15)\n#>       SESN1         DNA       RAD17        DDB2  checkpoint \n#>          26          22          18          17          16 \n#>      Cancer       Human     protein  activation        TP53 \n#>          15          15          15          12          12 \n#>    response    cellular degradation      Repair      damage \n#>          12          11          11          11          10\n\nconet <- induced_subgraph(conet, conetDeg>1)\n\nwt <- igraph::walktrap.community(conet)\nigraph::V(conet)$walktrap <- wt$membership\npal <- RColorBrewer::brewer.pal(length(unique(wt$membership)),\n                                \"Dark2\") \n#> Warning in RColorBrewer::brewer.pal(length(unique(wt$membership)), \"Dark2\"): n too large, allowed maximum for palette Dark2 is 8\n#> Returning the palette you asked for with that many colors\npal <- colorRampPalette(pal)(20)\n\nggraph(conet)+\n    geom_edge_link(color=\"grey80\")+\n    geom_node_point(aes(color=factor(walktrap)), size=3)+\n    geom_node_text(aes(label=name, color=factor(walktrap)),\n                   check_overlap=TRUE, repel=TRUE,\n                   bg.color = \"white\", segment.color=\"black\",\n                   bg.r = .15)+\n    scale_color_manual(values=pal,\n                         name=\"Walktrap\")+\n    theme_graph()\n#> Using \"stress\" as default layout\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\n\n#> Warning in grid.Call(C_textBounds,\n#> as.graphicsAnnot(x$label), x$x, x$y, : font family not found\n#> in Windows font database\nlibrary(igraph)\ndyn <- plotDynamic(list(abstnet, titlenet), concat=\"intersection\",\n                   titles=c(\"Abstract\",\"Title\"), alpha=0.8)\ndyn\nsessionInfo()\n#> R version 4.2.2 (2022-10-31 ucrt)\n#> Platform: x86_64-w64-mingw32/x64 (64-bit)\n#> Running under: Windows 10 x64 (build 22621)\n#> \n#> Matrix products: default\n#> \n#> locale:\n#> [1] LC_COLLATE=Japanese_Japan.utf8 \n#> [2] LC_CTYPE=Japanese_Japan.utf8   \n#> [3] LC_MONETARY=Japanese_Japan.utf8\n#> [4] LC_NUMERIC=C                   \n#> [5] LC_TIME=Japanese_Japan.utf8    \n#> \n#> attached base packages:\n#> [1] stats4    stats     graphics  grDevices utils    \n#> [6] datasets  methods   base     \n#> \n#> other attached packages:\n#>  [1] ggforce_0.4.1         igraph_1.3.5         \n#>  [3] ggraph_2.1.0          clusterProfiler_4.6.0\n#>  [5] ReactomePA_1.42.0     ggplot2_3.4.0        \n#>  [7] org.Hs.eg.db_3.16.0   AnnotationDbi_1.60.0 \n#>  [9] IRanges_2.32.0        S4Vectors_0.36.1     \n#> [11] Biobase_2.58.0        BiocGenerics_0.44.0  \n#> [13] wcGeneSummary_0.99.0 \n#> \n#> loaded via a namespace (and not attached):\n#>   [1] shadowtext_0.1.2       fastmatch_1.1-3       \n#>   [3] plyr_1.8.8             lazyeval_0.2.2        \n#>   [5] splines_4.2.2          BiocParallel_1.32.5   \n#>   [7] GenomeInfoDb_1.34.6    digest_0.6.31         \n#>   [9] yulab.utils_0.0.6      htmltools_0.5.4       \n#>  [11] bugsigdbr_1.5.3        GOSemSim_2.24.0       \n#>  [13] viridis_0.6.2          GO.db_3.16.0          \n#>  [15] fansi_1.0.3            GeneSummary_0.99.4    \n#>  [17] magrittr_2.0.3         memoise_2.0.1         \n#>  [19] tm_0.7-10              Biostrings_2.66.0     \n#>  [21] graphlayouts_0.8.4     pvclust_2.2-0         \n#>  [23] wordcloud_2.6          enrichplot_1.18.3     \n#>  [25] colorspace_2.0-3       rappdirs_0.3.3        \n#>  [27] blob_1.2.3             ggrepel_0.9.2         \n#>  [29] xfun_0.36              dplyr_1.0.10          \n#>  [31] crayon_1.5.2           RCurl_1.98-1.9        \n#>  [33] jsonlite_1.8.4         scatterpie_0.1.8      \n#>  [35] graph_1.76.0           ape_5.6-2             \n#>  [37] glue_1.6.2             polyclip_1.10-4       \n#>  [39] gtable_0.3.1           zlibbioc_1.44.0       \n#>  [41] XVector_0.38.0         GetoptLong_1.0.5      \n#>  [43] graphite_1.44.0        rentrez_1.2.3         \n#>  [45] scales_1.2.1           DOSE_3.24.2           \n#>  [47] DBI_1.1.3              Rcpp_1.0.9            \n#>  [49] viridisLite_0.4.1      xtable_1.8-4          \n#>  [51] tidytree_0.4.2         gridGraphics_0.5-1    \n#>  [53] reactome.db_1.82.0     bit_4.0.5             \n#>  [55] htmlwidgets_1.6.1      httr_1.4.4            \n#>  [57] fgsea_1.24.0           RColorBrewer_1.1-3    \n#>  [59] ellipsis_0.3.2         pkgconfig_2.0.3       \n#>  [61] XML_3.99-0.13          farver_2.1.1          \n#>  [63] sass_0.4.4             utf8_1.2.2            \n#>  [65] ggplotify_0.1.0        tidyselect_1.2.0      \n#>  [67] rlang_1.0.6            reshape2_1.4.4        \n#>  [69] later_1.3.0            munsell_0.5.0         \n#>  [71] tools_4.2.2            cachem_1.0.6          \n#>  [73] downloader_0.4         cli_3.6.0             \n#>  [75] generics_0.1.3         RSQLite_2.2.20        \n#>  [77] gson_0.0.9             evaluate_0.19         \n#>  [79] stringr_1.5.0          fastmap_1.1.0         \n#>  [81] ggdendro_0.1.23        yaml_2.3.6            \n#>  [83] ggtree_3.6.2           knitr_1.41            \n#>  [85] bit64_4.0.5            fs_1.5.2              \n#>  [87] tidygraph_1.2.2        purrr_1.0.1           \n#>  [89] KEGGREST_1.38.0        dendextend_1.16.0     \n#>  [91] nlme_3.1-161           mime_0.12             \n#>  [93] slam_0.1-50            aplot_0.1.9           \n#>  [95] xml2_1.3.3             compiler_4.2.2        \n#>  [97] rstudioapi_0.14        png_0.1-8             \n#>  [99] treeio_1.22.0          tibble_3.1.8          \n#> [101] tweenr_2.0.2           bslib_0.4.2           \n#> [103] stringi_1.7.12         cyjShiny_1.0.34       \n#> [105] lattice_0.20-45        Matrix_1.5-3          \n#> [107] vctrs_0.5.1            pillar_1.8.1          \n#> [109] lifecycle_1.0.3        jquerylib_0.1.4       \n#> [111] GlobalOptions_0.1.2    data.table_1.14.6     \n#> [113] cowplot_1.1.1          bitops_1.0-7          \n#> [115] httpuv_1.6.8           patchwork_1.1.2       \n#> [117] qvalue_2.30.0          R6_2.5.1              \n#> [119] bookdown_0.31          promises_1.2.0.1      \n#> [121] gridExtra_2.3          codetools_0.2-18      \n#> [123] MASS_7.3-58.1          assertthat_0.2.1      \n#> [125] rjson_0.2.21           withr_2.5.0           \n#> [127] GenomeInfoDbData_1.2.9 parallel_4.2.2        \n#> [129] ggfun_0.0.9            grid_4.2.2            \n#> [131] tidyr_1.2.1            HDO.db_0.99.1         \n#> [133] rmarkdown_2.19         downlit_0.4.2         \n#> [135] NLP_0.2-1              shiny_1.7.4           \n#> [137] base64enc_0.1-3"}]
