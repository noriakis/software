[{"path":"/articles/application_example_BKPyV.html","id":"application-examples","dir":"Articles","previous_headings":"","what":"Application examples","title":"Application example","text":"demonstrate use case package, investigates transcriptomic changes induced BK polyomavirus (BKPyV) infection renal proximal tubular epithelial cells (Assetta et al.Â 2016). Differentially expressed mRNAs 3 days post-infection obtained, -regulated mRNAs BKPyV infected cells examined.","code":""},{"path":"/articles/application_example_BKPyV.html","id":"load-the-necessary-packages-and-genes","dir":"Articles","previous_headings":"Application examples","what":"Load the necessary packages and genes","title":"Application example","text":"","code":"library(wcGeneSummary) library(org.Hs.eg.db) library(ggplot2) library(ReactomePA);library(clusterProfiler) library(ggraph);library(igraph) library(ggforce) ## For genePathPlot degs <- wcGeneSummary:::d3degDownAssetta2016 length(degs) ## [1] 191 degs ##   [1] \"ABCB4\"           \"ABCB7\"           \"AKTIP\"           \"ALS2\"            ##   [5] \"ANKRA2\"          \"ANTXR1\"          \"APH1B\"           \"ARHGEF28\"        ##   [9] \"ARNTL\"           \"ATMIN\"           \"BDH2\"            \"BIRC2\"           ##  [13] \"BTG1\"            \"BTG2\"            \"C4A\"             \"C7orf60\"         ##  [17] \"C8orf4\"          \"CALCOCO1\"        \"CAPRIN2\"         \"CARS\"            ##  [21] \"CBLB\"            \"CCNDBP1\"         \"CCNG2\"           \"CCZ1B\"           ##  [25] \"CDC42EP3\"        \"CDH6\"            \"CFLAR\"           \"CHMP1B\"          ##  [29] \"CHMP4C\"          \"CLUAP1\"          \"COG2\"            \"COG3\"            ##  [33] \"CPQ\"             \"CROT\"            \"CTTNBP2NL\"       \"CYP4V2\"          ##  [37] \"DAB2\"            \"DDB2\"            \"DDX17\"           \"DDX5\"            ##  [41] \"DGKA\"            \"DHX32\"           \"DLG1\"            \"DYNC2LI1\"        ##  [45] \"DYRK2\"           \"EFHC1\"           \"EIF4A2\"          \"ERMAP\"           ##  [49] \"ERMARD\"          \"EXOC1\"           \"FAM134B\"         \"FAM160B1\"        ##  [53] \"FAM21C\"          \"FAM84B\"          \"FANK1\"           \"FAS\"             ##  [57] \"FBXO38\"          \"FCHO2\"           \"FGD6\"            \"FLJ22447\"        ##  [61] \"FMNL2\"           \"GADD45A\"         \"GJA1\"            \"GLIDR\"           ##  [65] \"GLT8D1\"          \"GOPC\"            \"GPBP1L1\"         \"GPR155\"          ##  [69] \"GPR75-ASB3\"      \"GRAMD3\"          \"HADHB\"           \"HCG11\"           ##  [73] \"HDAC9\"           \"HDHD2\"           \"HERPUD1\"         \"HSDL2\"           ##  [77] \"ICA1\"            \"ICK\"             \"IFNGR1\"          \"IFT46\"           ##  [81] \"IFT74\"           \"IRF6\"            \"ITGA2\"           \"ITGA6\"           ##  [85] \"ITGAV\"           \"ITGB6\"           \"KDM5B\"           \"KIF3A\"           ##  [89] \"KIF5B\"           \"KLHL20\"          \"KLHL24\"          \"KLHL9\"           ##  [93] \"KPNA5\"           \"KRCC1\"           \"L3MBTL3\"         \"LINC00657\"       ##  [97] \"LOC100131564\"    \"LZTFL1\"          \"MAMDC2\"          \"MAP4K5\"          ## [101] \"MAT2B\"           \"MBNL2\"           \"MDM2\"            \"MECOM\"           ## [105] \"MFSD1\"           \"MGEA5\"           \"MICU3\"           \"MSANTD4\"         ## [109] \"NBPF11\"          \"NCBP2\"           \"NEAT1\"           \"NTM\"             ## [113] \"OGT\"             \"PAFAH1B2\"        \"PAFAH2\"          \"PCMTD2\"          ## [117] \"PDE4D\"           \"PDP1\"            \"PELI1\"           \"PEX1\"            ## [121] \"PHF14\"           \"PHOSPHO2-KLHL23\" \"PIK3IP1\"         \"PLA2R1\"          ## [125] \"PLCB4\"           \"PLK2\"            \"POLI\"            \"POSTN\"           ## [129] \"PPAN-P2RY11\"     \"PPFIBP1\"         \"PPP2CB\"          \"PRICKLE1\"        ## [133] \"PROS1\"           \"PSMD5-AS1\"       \"RAD17\"           \"RHOQ\"            ## [137] \"RIMKLB\"          \"RNA18S5\"         \"RNF170\"          \"RNF20\"           ## [141] \"RNU1-28P\"        \"RPL23AP53\"       \"RRM2B\"           \"RRN3\"            ## [145] \"RRN3P1\"          \"SEMA3C\"          \"SERINC1\"         \"SESN1\"           ## [149] \"SESN3\"           \"SGK1\"            \"SLC22A5\"         \"SLC37A3\"         ## [153] \"SVIL\"            \"SYT11\"           \"TARSL2\"          \"TBC1D19\"         ## [157] \"TBCK\"            \"TBRG1\"           \"TGFA\"            \"TGFB2\"           ## [161] \"TIPARP\"          \"TMEM136\"         \"TNFRSF10B\"       \"TNFRSF10D\"       ## [165] \"TOM1L1\"          \"TP53INP1\"        \"TRIM13\"          \"TRIM32\"          ## [169] \"TRIM4\"           \"TSC1\"            \"TSPYL5\"          \"UGT2B7\"          ## [173] \"UNC13B\"          \"UPRT\"            \"VPS41\"           \"VPS8\"            ## [177] \"WDR11\"           \"WDR19\"           \"XPC\"             \"YPEL2\"           ## [181] \"ZC2HC1A\"         \"ZFAND5\"          \"ZFP90\"           \"ZFR\"             ## [185] \"ZMAT3\"           \"ZNF12\"           \"ZNF248\"          \"ZNF322\"          ## [189] \"ZNF561\"          \"ZNF626\"          \"ZSCAN30\""},{"path":"/articles/application_example_BKPyV.html","id":"enrichment-analysis","dir":"Articles","previous_headings":"Application examples","what":"Enrichment analysis","title":"Application example","text":"First, perform enrichment analysis using ReactomePA. enrichment analysis results, cluster related transcriptional regulation TP53.  store name enriched pathways network downstream analysis.","code":"## Convert to ENTREZID entre <- AnnotationDbi::select(org.Hs.eg.db, keytype=\"SYMBOL\",                                keys = degs, columns = \"ENTREZID\")$ENTREZID pway <- setReadable(enrichPathway(entre), org.Hs.eg.db) sigpway <- subset(pway@result, p.adjust<0.05) sigpway$Description ##  [1] \"Transcriptional Regulation by TP53\"                               ##  [2] \"RIPK1-mediated regulated necrosis\"                                ##  [3] \"Regulation of necroptotic cell death\"                             ##  [4] \"Regulated Necrosis\"                                               ##  [5] \"Intraflagellar transport\"                                         ##  [6] \"Regulation by c-FLIP\"                                             ##  [7] \"CASP8 activity is inhibited\"                                      ##  [8] \"Dimerization of procaspase-8\"                                     ##  [9] \"TP53 Regulates Transcription of Death Receptors and Ligands\"      ## [10] \"Caspase activation via Death Receptors in the presence of ligand\" ## [11] \"FOXO-mediated transcription of cell cycle genes\"                  ## [12] \"TP53 Regulates Transcription of Cell Death Genes\"                 ## [13] \"Cilium Assembly\" cnetplot(pway) ## Genes involved in significant pathways excheck <- unlist(unique(sapply(sigpway$geneID,                                 function (x) strsplit(x,\"/\")))) excheck ##  [1] \"BTG2\"      \"DDB2\"      \"DYRK2\"     \"FAS\"       \"GADD45A\"   \"MDM2\"      ##  [7] \"PLK2\"      \"PPP2CB\"    \"RAD17\"     \"RRM2B\"     \"SESN1\"     \"SESN3\"     ## [13] \"SGK1\"      \"TNFRSF10B\" \"TNFRSF10D\" \"TP53INP1\"  \"TSC1\"      \"BIRC2\"     ## [19] \"CFLAR\"     \"FAS\"       \"OGT\"       \"PELI1\"     \"TNFRSF10B\" \"BIRC2\"     ## [25] \"CFLAR\"     \"CHMP4C\"    \"FAS\"       \"OGT\"       \"PELI1\"     \"TNFRSF10B\" ## [31] \"CLUAP1\"    \"DYNC2LI1\"  \"IFT46\"     \"IFT74\"     \"KIF3A\"     \"WDR19\"     ## [37] \"CFLAR\"     \"FAS\"       \"TNFRSF10B\" \"FAS\"       \"TNFRSF10B\" \"TNFRSF10D\" ## [43] \"BTG1\"      \"CCNG2\"     \"GADD45A\"   \"FAS\"       \"TNFRSF10B\" \"TNFRSF10D\" ## [49] \"TP53INP1\"  \"CLUAP1\"    \"DYNC2LI1\"  \"EXOC1\"     \"IFT46\"     \"IFT74\"     ## [55] \"KIF3A\"     \"LZTFL1\"    \"WDR19\" netreac <- wcGeneSummary(degs,                          enrich=\"reactome\",                          plotType=\"network\",                          numWords=50,                          colorText=TRUE) ## input genes: 191 ## 'select()' returned 1:1 mapping between keys and columns ## converted input genes: 174 ## filter based on GeneSummary ## filtered 65 words (frequency and/or tfidf) ... ## performing enrichment analysis ..."},{"path":"/articles/application_example_BKPyV.html","id":"text-mining-the-gene-summaries","dir":"Articles","previous_headings":"Application examples","what":"Text mining the gene summaries","title":"Application example","text":"Next perform plain function producing correlation network, showing top-genes related high-frequency words text RefSeq summary. obtained list genes geneCount slot.","code":"net1 <- wcGeneSummary(excheck,                       plotType=\"network\",                       colorText=TRUE,                       numWords=30,                       corThresh=0.5,                       genePlot=TRUE,                       genePlotNum=5,                       edgeLink=FALSE,                       genePathPlot=\"reactome\") ## input genes: 57 ## converted input genes: 57 ## filtered 61 words (frequency and/or tfidf) ... ## found 28 enriched term ... net1@net net1@geneCount ##  ##     RAD17     SESN1      TSC1      DDB2 TNFRSF10B      BTG1     DYRK2     BIRC2  ##         9         9         6         5         5         4         4         3  ##     CCNG2       FAS   GADD45A    LZTFL1      MDM2     SESN3      SGK1     CFLAR  ##         3         3         3         3         3         3         3         2  ##    CHMP4C       OGT TNFRSF10D     WDR19      BTG2  DYNC2LI1     EXOC1     IFT74  ##         2         2         2         2         1         1         1         1  ##    PPP2CB     RRM2B  ##         1         1 top <- names(net1@geneCount[net1@geneCount>=5]) top ## [1] \"RAD17\"     \"SESN1\"     \"TSC1\"      \"DDB2\"      \"TNFRSF10B\""},{"path":"/articles/application_example_BKPyV.html","id":"text-mining-the-available-literature","dir":"Articles","previous_headings":"Application examples","what":"Text mining the available literature","title":"Application example","text":"genes queried PubMed information. First, show network article titles.  Obtain show network article abstract.","code":"titlenet <- wcAbst(top,                    sortOrder=\"relevance\",                    target=\"title\",                    plotType=\"network\",                    colorText=TRUE,                    madeUpperGenes=FALSE,                    corThresh=0.2,                    preset=TRUE,                    retMax=40,                    numWords=40,                    edgeLink=FALSE) ## Proceeding without API key titlenet@net abstnet <- wcAbst(top,                    target=\"abstract\",                    plotType=\"network\",                    colorText=TRUE,                    madeUpperGenes=FALSE,                    corThresh=0.2,                    preset=TRUE,                    retMax=40,                    numWords=40,                    edgeLink=FALSE) ## Proceeding without API key abstnet@net"},{"path":"/articles/application_example_BKPyV.html","id":"combine-and-compare-networks","dir":"Articles","previous_headings":"Application examples","what":"Combine and compare networks","title":"Application example","text":"RefSeq summary articles related important genes, cluster functionality DNA damage response, also upregulated BKPyV infection. networks can combined find intersections differences. can see addition Reactome pathway names, plenty information obtained summarized querying databases, aid interpreting clusters genes hypothesis generation.  network, DNA damage repair pathway, especially nucleotide excision repair related DDB2, METTL14,RAD17 might related BKPyV infection, prioritize based log2FoldChange enrichment analysis.  network can obtained returnNet=TRUE, can used downstream analysis like assessment degrees community detection.  Dynamic layout can also used compare networks, graphlayouts, comparing multiple graphs, especially useful time-series analysis. See documentation layout_as_dynamic specifying alpha, default 0.5.","code":"compareWordNet(list(abstnet, titlenet, netreac, net1),                titles=c(\"Abstract\",\"Title\",\"Reactome\",\"RefSeq\")) ## Warning in RColorBrewer::brewer.pal(catNum, colPal): n too large, allowed maximum for palette Pastel1 is 9 ## Returning the palette you asked for with that many colors ## Scale for colour is already present. ## Adding another scale for colour, which will replace the existing scale. conet <- compareWordNet(list(netreac,                     net1,                     titlenet,                     abstnet),                returnNet = TRUE)  ddrNms <- NULL for (nm in names(V(conet))) {     if (tolower(nm) %in% c(\"dna\",\"damage\",\"repair\")) {         ddrNms <- c(ddrNms, names(neighbors(conet, nm)))     } } ddrNms ##  [1] \"checkpoint\"      \"cycle\"           \"DNA\"             \"phosphorylation\" ##  [5] \"required\"        \"response\"        \"DDB2\"            \"SESN1\"           ##  [9] \"RAD17\"           \"cellular\"        \"checkpoint\"      \"cycle\"           ## [13] \"damage\"          \"phosphorylation\" \"required\"        \"response\"        ## [17] \"DDB2\"            \"SESN1\"           \"RAD17\"           \"Cancer\"          ## [21] \"Circulating\"     \"Damage\"          \"degradation\"     \"promotes\"        ## [25] \"protein\"         \"regulates\"       \"Repair\"          \"CDT2\"            ## [29] \"chromatin\"       \"complex\"         \"function\"        \"induced\"         ## [33] \"NER\"             \"cellular\"        \"DNA\"             \"response\"        ## [37] \"RAD17\"           \"Cancer\"          \"Circulating\"     \"promotes\"        ## [41] \"chromatin\"       \"complex\"         \"function\"        \"NER\"             ## [45] \"DNA\"             \"DDB2\"            \"Excision\"        \"Global\"          ## [49] \"mice\"            \"Nucleotide\"      \"protein\"         \"level\"           ## [53] \"METTL14\"         \"NER\" ddrRelated <- induced.subgraph(conet,                  names(V(conet)) %in% unique(ddrNms)) V(ddrRelated)$SYMBOL <- names(V(ddrRelated)) %in% keys(org.Hs.eg.db,\"SYMBOL\") ggraph(ddrRelated)+     geom_edge_diagonal2(color=\"grey80\")+     geom_node_point(aes(color=SYMBOL))+     geom_node_text(aes(label=name, color=SYMBOL),check_overlap=TRUE, repel=TRUE,                    bg.color = \"white\", segment.color=\"black\",                    bg.r = .15)+     scale_color_manual(values=c(\"steelblue\",\"tomato\"))+     theme_graph() ## Using \"stress\" as default layout ## Warning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0. ## â¹ Please use `linewidth` in the `default_aes` field and elsewhere instead. conetDeg <- igraph::degree(conet) conetDeg[order(conetDeg, decreasing=TRUE)] |> head(15) ##        SESN1          DNA        RAD17         DDB2      protein       Cancer  ##           25           24           19           16           15           14  ##    apoptosis   activation     response  degradation         TP53     cellular  ##           13           12           12           12           11           11  ##       Damage    Carcinoma inflammation  ##           11           10           10 conet <- induced_subgraph(conet, conetDeg>1)  wt <- igraph::walktrap.community(conet) igraph::V(conet)$walktrap <- wt$membership pal <- RColorBrewer::brewer.pal(length(unique(wt$membership)),                                 \"Dark2\") ## Warning in RColorBrewer::brewer.pal(length(unique(wt$membership)), \"Dark2\"): n too large, allowed maximum for palette Dark2 is 8 ## Returning the palette you asked for with that many colors pal <- colorRampPalette(pal)(20)  ggraph(conet)+     geom_edge_link(color=\"grey80\")+     geom_node_point(aes(color=factor(walktrap)), size=3)+     geom_node_text(aes(label=name, color=factor(walktrap)),                    check_overlap=TRUE, repel=TRUE,                    bg.color = \"white\", segment.color=\"black\",                    bg.r = .15)+     scale_color_manual(values=pal,                          name=\"Walktrap\")+     theme_graph() ## Using \"stress\" as default layout ## Warning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0. ## â¹ Please use `linewidth` in the `default_aes` field and elsewhere instead. library(igraph) dyn <- plotDynamic(list(abstnet, titlenet), concat=\"intersection\",                    titles=c(\"Abstract\",\"Title\"), alpha=0.8) dyn sessionInfo() ## R version 4.2.2 (2022-10-31 ucrt) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 22621) ##  ## Matrix products: default ##  ## locale: ## [1] LC_COLLATE=Japanese_Japan.utf8  LC_CTYPE=Japanese_Japan.utf8    ## [3] LC_MONETARY=Japanese_Japan.utf8 LC_NUMERIC=C                    ## [5] LC_TIME=Japanese_Japan.utf8     ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] ggforce_0.4.1         igraph_1.3.5          ggraph_2.1.0          ##  [4] clusterProfiler_4.6.0 ReactomePA_1.42.0     ggplot2_3.4.0         ##  [7] org.Hs.eg.db_3.16.0   AnnotationDbi_1.60.0  IRanges_2.32.0        ## [10] S4Vectors_0.36.1      Biobase_2.58.0        BiocGenerics_0.44.0   ## [13] wcGeneSummary_0.99.0  BiocStyle_2.26.0      ##  ## loaded via a namespace (and not attached): ##   [1] shadowtext_0.1.2       fastmatch_1.1-3        systemfonts_1.0.4      ##   [4] plyr_1.8.8             lazyeval_0.2.2         splines_4.2.2          ##   [7] BiocParallel_1.32.5    GenomeInfoDb_1.34.6    digest_0.6.31          ##  [10] yulab.utils_0.0.6      htmltools_0.5.4        bugsigdbr_1.5.3        ##  [13] GOSemSim_2.24.0        viridis_0.6.2          GO.db_3.16.0           ##  [16] fansi_1.0.3            GeneSummary_0.99.4     magrittr_2.0.3         ##  [19] memoise_2.0.1          tm_0.7-10              Biostrings_2.66.0      ##  [22] graphlayouts_0.8.4     pvclust_2.2-0          wordcloud_2.6          ##  [25] pkgdown_2.0.7          enrichplot_1.18.3      colorspace_2.0-3       ##  [28] rappdirs_0.3.3         blob_1.2.3             ggrepel_0.9.2          ##  [31] textshaping_0.3.6      xfun_0.36              dplyr_1.0.10           ##  [34] crayon_1.5.2           RCurl_1.98-1.9         jsonlite_1.8.4         ##  [37] scatterpie_0.1.8       graph_1.76.0           ape_5.6-2              ##  [40] glue_1.6.2             polyclip_1.10-4        stopwords_2.3          ##  [43] gtable_0.3.1           zlibbioc_1.44.0        XVector_0.38.0         ##  [46] GetoptLong_1.0.5       graphite_1.44.0        rentrez_1.2.3          ##  [49] scales_1.2.1           DOSE_3.24.2            DBI_1.1.3              ##  [52] Rcpp_1.0.9             viridisLite_0.4.1      xtable_1.8-4           ##  [55] tidytree_0.4.2         gridGraphics_0.5-1     reactome.db_1.82.0     ##  [58] bit_4.0.5              htmlwidgets_1.6.1      httr_1.4.4             ##  [61] fgsea_1.24.0           RColorBrewer_1.1-3     ellipsis_0.3.2         ##  [64] pkgconfig_2.0.3        XML_3.99-0.13          farver_2.1.1           ##  [67] sass_0.4.4             utf8_1.2.2             labeling_0.4.2         ##  [70] reshape2_1.4.4         ggplotify_0.1.0        tidyselect_1.2.0       ##  [73] rlang_1.0.6            later_1.3.0            munsell_0.5.0          ##  [76] tools_4.2.2            cachem_1.0.6           downloader_0.4         ##  [79] cli_3.6.0              generics_0.1.3         RSQLite_2.2.20         ##  [82] gson_0.0.9             evaluate_0.19          stringr_1.5.0          ##  [85] fastmap_1.1.0          ggdendro_0.1.23        yaml_2.3.6             ##  [88] ragg_1.2.5             ggtree_3.6.2           knitr_1.41             ##  [91] bit64_4.0.5            fs_1.5.2               tidygraph_1.2.2        ##  [94] purrr_1.0.1            KEGGREST_1.38.0        dendextend_1.16.0      ##  [97] nlme_3.1-161           mime_0.12              slam_0.1-50            ## [100] aplot_0.1.9            xml2_1.3.3             compiler_4.2.2         ## [103] rstudioapi_0.14        curl_5.0.0             png_0.1-8              ## [106] treeio_1.22.0          tibble_3.1.8           tweenr_2.0.2           ## [109] bslib_0.4.2            stringi_1.7.12         cyjShiny_1.0.34        ## [112] highr_0.10             desc_1.4.2             lattice_0.20-45        ## [115] Matrix_1.5-3           vctrs_0.5.1            pillar_1.8.1           ## [118] lifecycle_1.0.3        BiocManager_1.30.19    jquerylib_0.1.4        ## [121] GlobalOptions_0.1.2    data.table_1.14.6      cowplot_1.1.1          ## [124] bitops_1.0-7           qvalue_2.30.0          httpuv_1.6.8           ## [127] patchwork_1.1.2        R6_2.5.1               bookdown_0.31          ## [130] promises_1.2.0.1       gridExtra_2.3          codetools_0.2-18       ## [133] MASS_7.3-58.1          assertthat_0.2.1       rprojroot_2.0.3        ## [136] rjson_0.2.21           withr_2.5.0            GenomeInfoDbData_1.2.9 ## [139] parallel_4.2.2         ISOcodes_2022.09.29    ggfun_0.0.9            ## [142] grid_4.2.2             tidyr_1.2.1            HDO.db_0.99.1          ## [145] rmarkdown_2.19         NLP_0.2-1              shiny_1.7.4            ## [148] base64enc_0.1-3"},{"path":"/articles/basic_usage_of_wcGeneSummary.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"wcGeneSummary","text":"Load package database converting identifiers. example, use mostly human-derived data, use org.Hs.eg.db.","code":"library(wcGeneSummary) library(org.Hs.eg.db) library(ggplot2) library(ggraph) library(RColorBrewer) library(ReactomePA) library(clusterProfiler) library(dendextend) library(dplyr)"},{"path":"/articles/basic_usage_of_wcGeneSummary.html","id":"producing-word-clouds","dir":"Articles","previous_headings":"Basic usage","what":"Producing word clouds","title":"wcGeneSummary","text":"use ERCC genes input. basic usage package producing word cloud gene summaries querying gene IDs, default symbol. type can set keyType. many words commonly observed, limit word frequency excludeFreq, default 2000. TF-IDF summary precomputed, exclude=\"tfidf\" can specified .  accepts values wordcloud() function. numWords specifies many words shown word cloud. words ordered frequency, subset 1:numWords used downstream visualization.  default, preserve=TRUE, indicates funciton tries preserve original cases characters.  also returns data frame consisting frequency term. Term frequencies. N-gram supported library tm, specified ngram. Default 1, example specifying 2 shown .  Using clusterProfiler functions, one can use enriched pathway names visualization. enrich option can specified 'kegg' 'reactome', time specify 'reactome'.  One main questions words can clustered together among words contained queried gene cluster. Word clustering (pvclust) identified significant clusters based occurrence text can visualized specifying tag=TRUE. significance threshold, pvclAlpha can specified. default parameters perform pvclust subset dataset words high frequency specified numWords. one want perform whole matrix (natural way), tagWhole=TRUE can specified, although computationally intensive.   example showing ERCC genes, term DNA repair clustered expected.","code":"## Configure input genes inpSymbol <- c(\"ERCC1\",\"ERCC2\",\"ERCC3\",\"ERCC4\",\"ERCC5\",\"ERCC6\",\"ERCC8\") gwc <- wcGeneSummary(inpSymbol) ## input genes: 7 ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... gwc@wc ## Use palette from palettetown, palettetown::pokepal(150) (Mewtwo!) gwc <- wcGeneSummary(inpSymbol, random.order=FALSE,                      numWords=100,                      excludeFreq=5000,                      colors=palette(),                      rot.per=0.4) ## input genes: 7 ## converted input genes: 7 ## filtered 10 words (frequency and/or tfidf) ... gwc@wc gwc_p <- wcGeneSummary(inpSymbol, random.order=FALSE,                      numWords=100,                      excludeFreq=5000,                      colors=brewer.pal(8, \"Set2\"),                      preserve=FALSE,                      rot.per=0.4) ## input genes: 7 ## converted input genes: 7 ## filtered 10 words (frequency and/or tfidf) ... gwc_p@wc gwc ## type: refseq ## Number of words: 100 ## ERCC1/ERCC2/ERCC3/ERCC4/ERCC5/ERCC6/ERCC8 ## 120.4 Kb knitr::kable(   head(gwc@freqDf), caption = 'Term frequencies.',   row.names = FALSE ) gwc2 <- wcGeneSummary(inpSymbol, ngram=2, numWords=50) ## input genes: 7 ## 'select()' returned 1:1 mapping between keys and columns ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... gwc2@wc gwc3 <- wcGeneSummary(inpSymbol, enrich=\"reactome\", tfidf=TRUE, numWords=50) ## input genes: 7 ## 'select()' returned 1:1 mapping between keys and columns ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... ## performing enrichment analysis ... gwc3@wc pal <- brewer.pal(4, \"PuOr\")  pal <- colorRampPalette(pal)(20)   ## Cluster on subset of words gwcl <- wcGeneSummary(inpSymbol,                      numWords=30,                      tag=TRUE,                      pal = pal,                      rot.per=0.4) ## input genes: 7 ## 'select()' returned 1:1 mapping between keys and columns ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... ## Bootstrap (r = 0.5)... Done. ## Bootstrap (r = 0.6)... Done. ## Bootstrap (r = 0.7)... Done. ## Bootstrap (r = 0.8)... Done. ## Bootstrap (r = 0.9)... Done. ## Bootstrap (r = 1.0)... Done. ## Bootstrap (r = 1.1)... Done. ## Bootstrap (r = 1.2)... Done. ## Bootstrap (r = 1.3)... Done. ## Bootstrap (r = 1.4)... Done. gwcl@wc gwcl@pvpick ## $clusters ## $clusters[[1]] ## [1] \"pigmentosum\" \"xeroderma\"   ##  ## $clusters[[2]] ##  [1] \"activity\"                  \"atpdependent\"              ##  [3] \"basal\"                     \"cerebrooculofacioskeletal\" ##  [5] \"characterized\"             \"complementation\"           ##  [7] \"damage\"                    \"defects\"                   ##  [9] \"exon\"                      \"factor\"                    ## [11] \"forms\"                     \"functions\"                 ## [13] \"helicase\"                  \"heterodimeric\"             ## [15] \"incision\"                  \"including\"                 ## [17] \"interacts\"                 \"light\"                     ## [19] \"nucleotide\"                \"product\"                   ## [21] \"transcriptioncoupled\"      ##  ## $clusters[[3]] ## [1] \"dna\"    \"repair\" ##  ##  ## $edges ## [1]  6 22 23 ## Cluster on whole matrix  gwclWhole <- wcGeneSummary(inpSymbol,                      numWords=50,                      tag=TRUE, tagWhole=TRUE,                      pal = pal,                      cl=snow::makeCluster(8),                      rot.per=0.4) ## input genes: 7 ## 'select()' returned 1:1 mapping between keys and columns ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... ## Multiscale bootstrap... Done. gwclWhole@wc gwclWhole@pvpick ## $clusters ## $clusters[[1]] ##  [1] \"abnormally\"        \"active\"            \"csb\"               ##  [4] \"defective\"         \"disease\"           \"hereditary\"        ##  [7] \"identified\"        \"iih\"               \"p44\"               ## [10] \"radiation\"         \"repeat\"            \"sensitive\"         ## [13] \"transcriptionally\" \"ultraviolet\"       ##  ## $clusters[[2]] ##  [1] \"activates\"       \"adjacent\"        \"atpase\"          \"atpstimulated\"   ##  [5] \"dnabinding\"      \"downstream\"      \"encode\"          \"formation\"       ##  [9] \"frame\"           \"fusion\"          \"geneid\"          \"individual\"      ## [13] \"occurs\"          \"polyadenylation\" \"promote\"         \"reading\"         ## [17] \"sequence\"        \"shares\"          \"sites\"           ##  ## $clusters[[3]] ## [1] \"class\" \"tfiih\" ##  ## $clusters[[4]] ## [1] \"complementation\" \"defects\"         ##  ## $clusters[[5]] ## [1] \"eme1\"      \"ercc1\"     \"structure\" \"xp6\"       ##  ## $clusters[[6]] ## [1] \"orf\"               \"piggybackderived3\" \"splice\"            ##  ## $clusters[[7]] ## [1] \"pigmentosum\" \"xeroderma\"   ##  ## $clusters[[8]] ## [1] \"interacts\" \"type\"      ##  ## $clusters[[9]] ## [1] \"incision\"  \"including\" \"light\"     ##  ## $clusters[[10]] ## [1] \"transcriptioncoupled\" \"upstream\"             ##  ## $clusters[[11]] ##  [1] \"basic\"            \"bivm\"             \"cachexia\"         \"cancer\"           ##  [5] \"cellular\"         \"characterized\"    \"cognitive\"        \"develop\"          ##  [9] \"development\"      \"disability\"       \"disorder\"         \"exists\"           ## [13] \"exposure\"         \"function\"         \"growth\"           \"hypersensitivity\" ## [17] \"immunoglobulin\"   \"increased\"        \"motif\"            \"neighboring\"      ## [21] \"patients\"         \"processes\"        \"read\"             \"referred\"         ## [25] \"severe\"           \"singlestrand\"     \"skin\"             \"specific\"         ## [29] \"susceptibility\"   \"uvinduced\"        \"variable\"         \"vii\"              ## [33] \"xp7\"              ##  ## $clusters[[12]] ##  [1] \"atpdependent\"        \"basal\"               \"belongs\"             ##  [4] \"btf2tfiih\"           \"cancerprone\"         \"disorders\"           ##  [7] \"factor\"              \"helicase\"            \"helicases\"           ## [10] \"integral\"            \"mechanism\"           \"rad3xpd\"             ## [13] \"subfamily\"           \"trichothiodystrophy\" ##  ## $clusters[[13]] ##  [1] \"alter\"                     \"carcinogenesis\"            ##  [3] \"catalyzes\"                 \"cd3e\"                      ##  [5] \"cerebrooculofacioskeletal\" \"cisplatin\"                 ##  [7] \"compounds\"                 \"crosslinks\"                ##  [9] \"electrophilic\"             \"epsilon\"                   ## [11] \"ercc4\"                     \"excising\"                  ## [13] \"exon\"                      \"formed\"                    ## [15] \"forms\"                     \"heterodimer\"               ## [17] \"heterodimeric\"             \"induced\"                   ## [19] \"interstrand\"               \"lesion\"                    ## [21] \"lesions\"                   \"molecule\"                  ## [23] \"overlaps\"                  \"pathway\"                   ## [25] \"play\"                      \"polymorphisms\"             ## [27] \"process\"                   \"product\"                   ## [29] \"recombinational\"           \"required\"                  ## [31] \"result\"                    \"strand\"                    ## [33] \"xpf\"                       ##  ## $clusters[[14]] ## [1] \"dna\"    \"repair\" ##  ##  ## $edges ##  [1]  13  31  98  99 102 105 107 108 111 118 119 121 125 131"},{"path":"/articles/basic_usage_of_wcGeneSummary.html","id":"producing-correlation-networks","dir":"Articles","previous_headings":"Basic usage","what":"Producing correlation networks","title":"wcGeneSummary","text":"next main function producing correlation networks words based co-occurrence words text.  edge label corresponding correlation values can shown edgeLabel=TRUE. number words shown plot can specified numWords. threshold correlation can specified corThresh. text color can changed colorText=TRUE. type edge can specified edgeLink, default TRUE (link used).  clustering results based pvclust can shown also correlation network, node color (tag=TRUE).  genes associated corresponding words can shown specifying genePlot=TRUE, useful assessing words associated interesting genes. edges connecting words corresponding genes shown. Additionally, one can specify genePlotNum limiting genes shown, can useful identifying important genes associated high-frequent words.  associated enriched pathways (present) can shown specifying genePathPlot, using ggforce. option, function first performs -representation analysis whole gene set, plot enriched terms included genes plot. Enrichment analysis performed library clusterProfiler ReactomePA, one can control pathways plot genePathPlotSig value.","code":"net <- wcGeneSummary(inpSymbol, plotType=\"network\") ## input genes: 7 ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... net@net net <- wcGeneSummary(inpSymbol, plotType=\"network\",                      edgeLabel=TRUE, corThresh=0.5,                      numWords=20, colorText=TRUE) ## input genes: 7 ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... net@net net <- wcGeneSummary(inpSymbol, plotType=\"network\", corThresh=0.2,                      numWords=20, tag=TRUE) ## input genes: 7 ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... ## Bootstrap (r = 0.5)... Done. ## Bootstrap (r = 0.6)... Done. ## Bootstrap (r = 0.7)... Done. ## Bootstrap (r = 0.8)... Done. ## Bootstrap (r = 0.9)... Done. ## Bootstrap (r = 1.0)... Done. ## Bootstrap (r = 1.1)... Done. ## Bootstrap (r = 1.2)... Done. ## Bootstrap (r = 1.3)... Done. ## Bootstrap (r = 1.4)... Done. net@net net@pvpick ## $clusters ## $clusters[[1]] ## [1] \"pigmentosum\" \"xeroderma\"   ##  ## $clusters[[2]] ##  [1] \"activity\"             \"atpdependent\"         \"complementation\"      ##  [4] \"defects\"              \"factor\"               \"functions\"            ##  [7] \"incision\"             \"interacts\"            \"nucleotide\"           ## [10] \"product\"              \"transcriptioncoupled\" ##  ## $clusters[[3]] ## [1] \"dna\"    \"repair\" ##  ##  ## $edges ## [1]  2 12 13 net <- wcGeneSummary(inpSymbol, plotType=\"network\",                      genePlot=TRUE, corThresh=0.5,                      tag=TRUE, edgeLink=FALSE,                      numWords=20) ## input genes: 7 ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... ## Bootstrap (r = 0.5)... Done. ## Bootstrap (r = 0.6)... Done. ## Bootstrap (r = 0.7)... Done. ## Bootstrap (r = 0.8)... Done. ## Bootstrap (r = 0.9)... Done. ## Bootstrap (r = 1.0)... Done. ## Bootstrap (r = 1.1)... Done. ## Bootstrap (r = 1.2)... Done. ## Bootstrap (r = 1.3)... Done. ## Bootstrap (r = 1.4)... Done. net@net library(concaveman) library(ggforce) net <- wcGeneSummary(inpSymbol, plotType=\"network\",                      genePathPlot=\"reactome\", corThresh=0.5,                      tag=TRUE, edgeLink=FALSE,                      genePathPlotSig=0.05, numWords=20) ## input genes: 7 ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... ## Bootstrap (r = 0.5)... Done. ## Bootstrap (r = 0.6)... Done. ## Bootstrap (r = 0.7)... Done. ## Bootstrap (r = 0.8)... Done. ## Bootstrap (r = 0.9)... Done. ## Bootstrap (r = 1.0)... Done. ## Bootstrap (r = 1.1)... Done. ## Bootstrap (r = 1.2)... Done. ## Bootstrap (r = 1.3)... Done. ## Bootstrap (r = 1.4)... Done. ## found 47 enriched term ... net@net"},{"path":"/articles/basic_usage_of_wcGeneSummary.html","id":"visualization-of-pubmed-information-","dir":"Articles","previous_headings":"Basic usage","what":"Visualization of PubMed information.","title":"wcGeneSummary","text":"Using rentrez, one can perform analysis PubMed text like article title abstract. function queries input gene symbols (microbes) visualize. typical use cases, genes identified showing genePlot, hub genes identified gene network analysis can queried. basic parameters searching PubMed, like max number articles retrieved sort articles can specified retMax sortOrder. sure obtain api key querying heavily, specify apiKey argument.  fetching information desirable time consuming, object can passed redo option re-perform analysis like tagging, changing visualization options.","code":"ab <- wcAbst(inpSymbol[1:3], retMax=20) ## Proceeding without API key ab@wc pal <- brewer.pal(5, \"PuOr\")  abtag <- wcAbst(redo=ab, tag=TRUE,                 cl=snow::makeCluster(10), pal=pal) ## Resuming from the previous results ... ## Multiscale bootstrap... Done. abtag2 <- wcAbst(redo=abtag, tag=TRUE, genePlot=TRUE,                  plotType=\"network\", corThresh=0.2, preset=TRUE) ## Resuming from the previous results ... ## Using previous pvclust results ... abtag@wc abtag2@net ## Warning: Removed 3 rows containing missing values (`geom_point()`)."},{"path":"/articles/basic_usage_of_wcGeneSummary.html","id":"comparing-two-or-more-networks","dir":"Articles","previous_headings":"Basic usage","what":"Comparing two or more networks","title":"wcGeneSummary","text":"One can compare two networks providing list objects produced wc* functions, like wcGeneSummary wcAbst. can useful assessing similarity dissimilarity various text sources, like PubMed, RefSeq, Reactome pathway names.    tag information available gene clusters, combined tags can visualized tag=TRUE.","code":"cxcls <- c() for (i in c(1,2,3,5,6,8,9,10,11,12,13,14,16)){     cxcls <- c(cxcls, paste0(\"CXCL\",i)) }  net1 <- wcGeneSummary(inpSymbol, plotType=\"network\",                       corThresh=0.5, numWords=20) ## input genes: 7 ## 'select()' returned 1:1 mapping between keys and columns ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... net2 <- wcGeneSummary(cxcls, plotType=\"network\",                       corThresh=0.5, numWords=20) ## input genes: 13 ## 'select()' returned 1:1 mapping between keys and columns ## converted input genes: 13 ## filtered 61 words (frequency and/or tfidf) ... net3 <- wcAbst(redo=ab, plotType=\"network\",                corThresh=0.2, numWords=20) ## Resuming from the previous results ... ## Not having meaningful overlaps compareWordNet(list(net1, net2),                titles=c(\"ercc\",\"cxcl\")) ## Scale for colour is already present. ## Adding another scale for colour, which will replace the existing scale. compareWordNet(list(net1, net3),                titles=c(\"ercc\",\"ercc-PubMed\")) ## Scale for colour is already present. ## Adding another scale for colour, which will replace the existing scale. compareWordNet(list(net1, net2, net3),                titles=c(\"ercc\",\"cxcl\", \"ercc-PubMed\")) ## Scale for colour is already present. ## Adding another scale for colour, which will replace the existing scale. keggPathways <- org.Hs.egPATH2EG mappedKeys <- mappedkeys(keggPathways) keggList <- as.list(keggPathways[mappedKeys])  net1 <- wcGeneSummary(keggList$`04110`,                       keyType=\"ENTREZID\",                       plotType=\"network\",                       corThresh=0.3,                       numWords=30,                       tag=TRUE,                       tfidf=TRUE) ## input genes: 124 ## filtered 61 words (frequency and/or tfidf) ... ## Bootstrap (r = 0.5)... Done. ## Bootstrap (r = 0.6)... Done. ## Bootstrap (r = 0.7)... Done. ## Bootstrap (r = 0.8)... Done. ## Bootstrap (r = 0.9)... Done. ## Bootstrap (r = 1.0)... Done. ## Bootstrap (r = 1.1)... Done. ## Bootstrap (r = 1.2)... Done. ## Bootstrap (r = 1.3)... Done. ## Bootstrap (r = 1.4)... Done. net2 <- wcGeneSummary(keggList$`04210`,                       keyType=\"ENTREZID\",                       plotType=\"network\",                       corThresh=0.3,                       numWords=30,                       tfidf=TRUE,                       tag=TRUE) ## input genes: 87 ## filtered 61 words (frequency and/or tfidf) ... ## Bootstrap (r = 0.5)... Done. ## Bootstrap (r = 0.6)... Done. ## Bootstrap (r = 0.7)... Done. ## Bootstrap (r = 0.8)... Done. ## Bootstrap (r = 0.9)... Done. ## Bootstrap (r = 1.0)... Done. ## Bootstrap (r = 1.1)... Done. ## Bootstrap (r = 1.2)... Done. ## Bootstrap (r = 1.3)... Done. ## Bootstrap (r = 1.4)... Done. compareWordNet(list(net1, net2), tag=TRUE)"},{"path":[]},{"path":"/articles/basic_usage_of_wcGeneSummary.html","id":"text-over-represenatation-analysis-experimental","dir":"Articles","previous_headings":"Basic usage","what":"Text over represenatation analysis (experimental)","title":"wcGeneSummary","text":"thresholding can used RefSeq visualization. Filter words using ORA threshold frequency threshold setting ora=TRUE.","code":"geneList <- keggList$`00785` # Lipoic acid metabolism pvs <- textORA(geneList) hist(pvs) pvs[order(pvs)] |> head() ##            lipoic              step              acid lipoateactivating  ##      1.600963e-14      8.016934e-08      5.300425e-07      1.484931e-04  ##  lipoatedependent            lipoyl  ##      1.484931e-04      1.484931e-04 geneList <- keggList$`05150` # Staphylococcus aureus infection pvs <- textORA(geneList) hist(pvs) pvs[order(pvs)] |> head() ##          drb        chain   complement        class         exon         beta  ## 0.000000e+00 3.669590e-82 3.266180e-74 5.496543e-46 6.851722e-39 1.318324e-34 net <- wcGeneSummary(inpSymbol, plotType=\"network\",                      ora=TRUE, edgeLink=FALSE) ## input genes: 7 ## converted input genes: 7 ## filtered 61 words (frequency and/or tfidf) ... ## performing ORA ## filtered 148 words (ORA) ... net@net"},{"path":[]},{"path":"/articles/basic_usage_of_wcGeneSummary.html","id":"recluster-the-cluster-using-word-information","dir":"Articles","previous_headings":"Custom usage","what":"Recluster the cluster using word information","title":"wcGeneSummary","text":"","code":"simExample <- returnSim(returnExample()$color,                         keyType=\"ENSEMBL\", ora=TRUE) ## Number of clusters: 3 ## 1 ## input genes: 12 ## converted input genes: 12 ## filter based on GeneSummary ## filtered 65 words (frequency and/or tfidf) ... ## performing ORA ## filtered 109 words (ORA) ... ## 2 ## input genes: 13 ## converted input genes: 13 ## filter based on GeneSummary ## filtered 65 words (frequency and/or tfidf) ... ## performing ORA ## filtered 238 words (ORA) ... ## 3 ## input genes: 7 ## converted input genes: 7 ## filter based on GeneSummary ## filtered 65 words (frequency and/or tfidf) ... ## performing ORA ## filtered 148 words (ORA) ... heatmap(simExample)"},{"path":"/articles/basic_usage_of_wcGeneSummary.html","id":"interactive-inspection-of-bayesian-network-annotated-by-words","dir":"Articles","previous_headings":"Custom usage","what":"Interactive inspection of Bayesian network annotated by words","title":"wcGeneSummary","text":"example, Bayesian network showing module eigengenes relationship inferred using boot.strength function bnlearn weighted gene correlation network analysis (WGCNA) results. modules annotated word clouds produced wcGeneSummary(), can exported format Cytoscape.js vis.js. way, module relationship can interactively inspected functional implications. Use like http-server directory containing exported JavaScript, interactively inspect module relationship word information. example visualization shown (code ). Example visualization Bayesian network","code":"## In this example, we simulate WGCNA results. ## you can just use results from WGCNA. ## Assuming WGCNA results are stored in `mod` mod <- wcGeneSummary::returnExample() MEs <- mod$MEs modColors <- mod$colors ensg <- names(modColors)  # library(bnlearn) library(igraph)  ## Replace like boot.strength(mod$MEs, R=500, algorithm = \"hc\") # dag <- model2network(\"[ME1][ME2|ME1]\") # If using bnlearn dag <- graph_from_literal( ME1-+ME2, ME1-+ME3 )  ## Convert to igraph # g <- as.igraph(dag) g <- dag  ## Assign edge attributes ## Skip, if you perform boot.strength, the edge attributes can be added from the result # el <- data.frame(as_edgelist(g)) # colnames(el) <- c(\"from\",\"to\") # el <- left_join(el, bs) # E(g)$strength <- el$strength # E(g)$direction <- el$direction  ## Node attributes V(g)$stripName <- gsub(\"ME\",\"\",V(g)$name) sizes <- table(modColors) V(g)$size <- as.numeric(sizes[V(g)$stripName])  ## Directory to save images and a script rootDir <- \"./\" netDir <- \"visCyjs\" imageDir <- \"images\"  dir.create(paste0(rootDir, netDir)) dir.create(paste0(rootDir, netDir, \"/\", imageDir))  images <- c() plotType <- \"bar\" numLim <- 200 # limit for gene number for (i in V(g)$name){     print(i)     i <- as.numeric(gsub(\"ME\",\"\",i)) # strip ME      queries <- ensg[modColors==i]     if (length(queries)>numLim) {         warning(\"Sampling random genes\")         queries <- queries[sample(1:length(queries), numLim)] ## Temporary restrict to randomly chosen genes, should be replaced to like kME values     }          ## Convert to ENTREZ     entre <- AnnotationDbi::select(org.Hs.eg.db, keytype=\"ENSEMBL\",         keys = queries, columns = \"ENTREZID\")$ENTREZID          if (plotType==\"bar\"){         plt <- makeBar(entre, keyType=\"ENTREZID\") # get barplot     } else { ## If wordcloud         # A <- wcGeneSummary(entre,         #                    madeUpper=c(\"dna\",\"rna\",         #                                tolower(keys(org.Hs.eg.db, keytype=\"SYMBOL\"))))         # palNum <- sample(1:151,1) # palettetown         #          # ## This time use ggwordcloud()         # plt <- ggwordcloud::ggwordcloud(A$df$word, A$df$freq,         #                      shape=\"circle\", min.freq = 10,         #                      rot.per = 0.5, random.order = FALSE,         #                      colors = pokepal(palNum))+         #          scale_size_area(max_size = 40)     }     ## Save images     ggsave(paste0(rootDir, netDir, \"/\", imageDir, \"/\", i ,\".png\"),            plt, dpi=300, width=10, height=10)     ## Store image dir     images <- c(images, paste0(imageDir, \"/\", i ,\".png\")) } ## [1] \"ME1\" ## input genes: 12 ## filter based on GeneSummary ## filtered 65 words (frequency and/or tfidf) ... ## [1] \"ME2\" ## input genes: 13 ## filter based on GeneSummary ## filtered 65 words (frequency and/or tfidf) ... ## [1] \"ME3\" ## input genes: 7 ## filter based on GeneSummary ## filtered 65 words (frequency and/or tfidf) ... V(g)$image <- images  ## Node shape if (plotType==\"bar\"){     V(g)$shape <- rep(\"rectangle\", length(V(g)))  } else {     V(g)$shape <- rep(\"circle\", length(V(g))) }  ## Scale the node size sizeMin <- 50 sizeMax <- 200 rawMin <- min(V(g)$size) rawMax <- max(V(g)$size) scf <- (sizeMax-sizeMin)/(rawMax-rawMin) V(g)$size <- scf * V(g)$size + sizeMin - scf * rawMin  ## Export exportCyjs(g, rootDir, netDir) # or, exportVisjs(g, rootDir, netDir)"},{"path":"/articles/basic_usage_of_wcGeneSummary.html","id":"annotating-module-eigengenes-dendrogram","dir":"Articles","previous_headings":"Custom usage","what":"Annotating module eigengenes dendrogram","title":"wcGeneSummary","text":"relationship gene clusters often investigated clustering analysis like WGCNA. users WGCNA typically plot dendrogram heatmap module eigengenes using plotEigengeneNetworks, useful combine wcGeneSummary, plot additional word information dendrogram one line.  textual information, can simply annotate dendrogram using enrichment analysis. Useful inspecting branches dendrogram contains pathway information.","code":"# WGCNA::plotEigengeneNetworks(mod$MEs, mod$colors, plotHeatmaps = FALSE) plotEigengeneNetworksWithWords(MEs, modColors) ## Bootstrap (r = 0.5)... Done. ## Bootstrap (r = 0.6)... Done. ## Bootstrap (r = 0.7)... Done. ## Bootstrap (r = 0.8)... Done. ## Bootstrap (r = 0.9)... Done. ## Bootstrap (r = 1.0)... Done. ## Bootstrap (r = 1.1)... Done. ## Bootstrap (r = 1.2)... Done. ## Bootstrap (r = 1.3)... Done. ## Bootstrap (r = 1.4)... Done. # WGCNA::plotEigengeneNetworks(mod$MEs, mod$colors, plotHeatmaps = FALSE) plotEigengeneNetworksWithWords(MEs, modColors, type=\"enrich\") ## Bootstrap (r = 0.5)... Done. ## Bootstrap (r = 0.6)... Done. ## Bootstrap (r = 0.7)... Done. ## Bootstrap (r = 0.8)... Done. ## Bootstrap (r = 0.9)... Done. ## Bootstrap (r = 1.0)... Done. ## Bootstrap (r = 1.1)... Done. ## Bootstrap (r = 1.2)... Done. ## Bootstrap (r = 1.3)... Done. ## Bootstrap (r = 1.4)... Done."},{"path":"/articles/basic_usage_of_wcGeneSummary.html","id":"assess-the-occurrence-of-the-speicific-words-across-gene-clusters","dir":"Articles","previous_headings":"Custom usage","what":"Assess the occurrence of the speicific words across gene clusters","title":"wcGeneSummary","text":"","code":"library(limma) ##  ## Attaching package: 'limma' ## The following object is masked from 'package:BiocGenerics': ##  ##     plotMA library(ggrepel) query <- \"DNA repair\" tab <- getGeneKEGGLinks(species=\"hsa\") listOfGenes <- list() for (path in unique(tab$PathwayID)){     listOfGenes[[path]] <- subset(tab, PathwayID==path)$GeneID } frq <- findTerm(query, listOfGenes[sample(length(listOfGenes), 20)],                 split=TRUE,                 keyType=\"ENTREZID\") ## Finding query in 20 clusters ... ## input genes: 42 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 63 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 102 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 77 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 49 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 37 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 119 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 139 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 354 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 148 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 57 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 78 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 132 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 107 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 60 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 50 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 27 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 180 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 222 ## filtered 61 words (frequency and/or tfidf) ... ## input genes: 50 ## filtered 61 words (frequency and/or tfidf) ... plt <- data.frame(t(data.frame(frq, check.names=FALSE)),                   check.names=FALSE)  plt$name <- gsub(\"path:\", \"\", rownames(plt)) p <- ggplot(plt, aes(dna, repair, label = plt[,3])) +     geom_point(color = \"red\")+      geom_text_repel(bg.color=\"white\")+theme_minimal()+     xlab(\"dna\")+ylab(\"repair\") p ## Warning: ggrepel: 12 unlabeled data points (too many overlaps). Consider ## increasing max.overlaps sessionInfo() ## R version 4.2.2 (2022-10-31 ucrt) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 22621) ##  ## Matrix products: default ##  ## locale: ## [1] LC_COLLATE=Japanese_Japan.utf8  LC_CTYPE=Japanese_Japan.utf8    ## [3] LC_MONETARY=Japanese_Japan.utf8 LC_NUMERIC=C                    ## [5] LC_TIME=Japanese_Japan.utf8     ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] igraph_1.3.5          dplyr_1.0.10          dendextend_1.16.0     ##  [4] clusterProfiler_4.6.0 ReactomePA_1.42.0     RColorBrewer_1.1-3    ##  [7] ggraph_2.1.0          ggplot2_3.4.0         org.Hs.eg.db_3.16.0   ## [10] AnnotationDbi_1.60.0  IRanges_2.32.0        S4Vectors_0.36.1      ## [13] Biobase_2.58.0        BiocGenerics_0.44.0   wcGeneSummary_0.99.0  ## [16] BiocStyle_2.26.0      ##  ## loaded via a namespace (and not attached): ##   [1] shadowtext_0.1.2       fastmatch_1.1-3        systemfonts_1.0.4      ##   [4] plyr_1.8.8             lazyeval_0.2.2         splines_4.2.2          ##   [7] BiocParallel_1.32.5    GenomeInfoDb_1.34.6    digest_0.6.31          ##  [10] yulab.utils_0.0.6      htmltools_0.5.4        bugsigdbr_1.5.3        ##  [13] GOSemSim_2.24.0        viridis_0.6.2          GO.db_3.16.0           ##  [16] fansi_1.0.3            GeneSummary_0.99.4     magrittr_2.0.3         ##  [19] memoise_2.0.1          tm_0.7-10              Biostrings_2.66.0      ##  [22] graphlayouts_0.8.4     pvclust_2.2-0          wordcloud_2.6          ##  [25] pkgdown_2.0.7          enrichplot_1.18.3      colorspace_2.0-3       ##  [28] rappdirs_0.3.3         blob_1.2.3             ggrepel_0.9.2          ##  [31] textshaping_0.3.6      xfun_0.36              crayon_1.5.2           ##  [34] RCurl_1.98-1.9         jsonlite_1.8.4         scatterpie_0.1.8       ##  [37] graph_1.76.0           ape_5.6-2              glue_1.6.2             ##  [40] polyclip_1.10-4        stopwords_2.3          gtable_0.3.1           ##  [43] zlibbioc_1.44.0        XVector_0.38.0         GetoptLong_1.0.5       ##  [46] graphite_1.44.0        rentrez_1.2.3          scales_1.2.1           ##  [49] DOSE_3.24.2            DBI_1.1.3              Rcpp_1.0.9             ##  [52] viridisLite_0.4.1      xtable_1.8-4           tidytree_0.4.2         ##  [55] gridGraphics_0.5-1     reactome.db_1.82.0     bit_4.0.5              ##  [58] htmlwidgets_1.6.1      httr_1.4.4             fgsea_1.24.0           ##  [61] ellipsis_0.3.2         pkgconfig_2.0.3        XML_3.99-0.13          ##  [64] farver_2.1.1           sass_0.4.4             utf8_1.2.2             ##  [67] labeling_0.4.2         reshape2_1.4.4         ggplotify_0.1.0        ##  [70] tidyselect_1.2.0       rlang_1.0.6            later_1.3.0            ##  [73] munsell_0.5.0          tools_4.2.2            cachem_1.0.6           ##  [76] downloader_0.4         cli_3.6.0              generics_0.1.3         ##  [79] RSQLite_2.2.20         gson_0.0.9             evaluate_0.19          ##  [82] stringr_1.5.0          fastmap_1.1.0          ggdendro_0.1.23        ##  [85] yaml_2.3.6             ragg_1.2.5             ggtree_3.6.2           ##  [88] knitr_1.41             bit64_4.0.5            fs_1.5.2               ##  [91] tidygraph_1.2.2        purrr_1.0.1            KEGGREST_1.38.0        ##  [94] nlme_3.1-161           mime_0.12              slam_0.1-50            ##  [97] aplot_0.1.9            xml2_1.3.3             compiler_4.2.2         ## [100] rstudioapi_0.14        curl_5.0.0             png_0.1-8              ## [103] treeio_1.22.0          tibble_3.1.8           tweenr_2.0.2           ## [106] bslib_0.4.2            stringi_1.7.12         cyjShiny_1.0.34        ## [109] highr_0.10             desc_1.4.2             lattice_0.20-45        ## [112] Matrix_1.5-3           vctrs_0.5.1            pillar_1.8.1           ## [115] lifecycle_1.0.3        BiocManager_1.30.19    jquerylib_0.1.4        ## [118] GlobalOptions_0.1.2    data.table_1.14.6      cowplot_1.1.1          ## [121] bitops_1.0-7           qvalue_2.30.0          httpuv_1.6.8           ## [124] patchwork_1.1.2        R6_2.5.1               bookdown_0.31          ## [127] promises_1.2.0.1       gridExtra_2.3          codetools_0.2-18       ## [130] MASS_7.3-58.1          assertthat_0.2.1       rprojroot_2.0.3        ## [133] rjson_0.2.21           withr_2.5.0            GenomeInfoDbData_1.2.9 ## [136] parallel_4.2.2         ISOcodes_2022.09.29    ggfun_0.0.9            ## [139] grid_4.2.2             tidyr_1.2.1            HDO.db_0.99.1          ## [142] rmarkdown_2.19         ggforce_0.4.1          NLP_0.2-1              ## [145] shiny_1.7.4            base64enc_0.1-3"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Noriaki Sato. Maintainer, author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sato N (2023). wcGeneSummary: easy visualization interpretation omics summary data. R package version 0.99.0.","code":"@Manual{,   title = {wcGeneSummary: easy visualization and interpretation of omics summary data},   author = {Noriaki Sato},   year = {2023},   note = {R package version 0.99.0}, }"},{"path":"/index.html","id":"wcgenesummary","dir":"","previous_headings":"","what":"easy visualization and interpretation of omics summary data","title":"easy visualization and interpretation of omics summary data","text":"package makes summarized visualization gene set using textual information various sources. basic function makes wordcloud plot correlation network gene set RefSeq description using R libraries GeneSummary, tm wordcloud.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"easy visualization and interpretation of omics summary data","text":"","code":"devtools::install_github(\"noriakis/wcGeneSummary\") library(wcGeneSummary)"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"easy visualization and interpretation of omics summary data","text":"https://noriakis.github.io/software/wcGeneSummary/","code":""},{"path":"/index.html","id":"example-of-ercc","dir":"","previous_headings":"","what":"Example of ERCC","title":"easy visualization and interpretation of omics summary data","text":"","code":"erccs <- c(\"ERCC1\",\"ERCC2\",\"ERCC3\",\"ERCC4\",\"ERCC5\",\"ERCC6\",\"ERCC8\") gwc <- wcGeneSummary(erccs, excludeFreq = 5000, max.words=200, random.order=FALSE,                      colors=palettetown::pokepal(150), rot.per=0.4) # ggsave(\"erccWc.png\", gwc@wc, width=8, height=8)"},{"path":"/index.html","id":"example-of-cxcl","dir":"","previous_headings":"","what":"Example of CXCL","title":"easy visualization and interpretation of omics summary data","text":"","code":"cxcls <- c() for (i in c(1,2,3,5,6,8,9,10,11,12,13,14,16)){     cxcls <- c(cxcls, paste0(\"CXCL\",i)) } gwc <- wcGeneSummary(cxcls, excludeFreq=14000,                      madeUpper=c(\"dna\",\"rna\",tolower(keys(org.Hs.eg.db, keytype=\"SYMBOL\"))),                      max.words=200, random.order=FALSE,                      colors=palettetown::pokepal(151), rot.per=0.4) # ggsave(\"cxclWc.png\", gwc@wc, width=8, height=8)"},{"path":"/index.html","id":"example-of-ccl-correlation-network","dir":"","previous_headings":"","what":"Example of CCL (correlation network)","title":"easy visualization and interpretation of omics summary data","text":"","code":"library(wcGeneSummary) library(org.Hs.eg.db) library(ggraph) ccls <- c() for (i in c(1,2,3,4,5,6,7,8,9)){     ccls <- c(ccls, paste0(\"CCL\",i)) } cclNet <- wcGeneSummary(ccls, plotType=\"network\",                         layout=\"nicely\",                         madeUpper=c(\"dna\",\"rna\",tolower(keys(org.Hs.eg.db, keytype=\"SYMBOL\"))),                         numWords = 15, excludeFreq = 5000, edgeLink=FALSE, showLegend=FALSE) cclNetTrans <- cclNet@net + theme(plot.background = element_rect(fill = \"transparent\",colour = NA)) # ggsave(file=\"cclNet.png\", cclNetTrans, width=7, height=7, bg=\"transparent\")"},{"path":"/index.html","id":"example-of-a-corelation-network-of-words-in-the-pathway","dir":"","previous_headings":"","what":"Example of a corelation network of words in the pathway","title":"easy visualization and interpretation of omics summary data","text":"Additionally perform enrichment analysis gene list plot correlation network.","code":"library(org.Hs.eg.db) keggPathways <- org.Hs.egPATH2EG mappedKeys <- mappedkeys(keggPathways) keggList <- as.list(keggPathways[mappedKeys]) ## Hepatitis C hCNet <- wcGeneSummary(keggList$`05160`, plotType=\"network\",                         layout=\"nicely\", corThresh = 0.2, keyType=\"ENTREZID\",                         madeUpper=c(\"dna\",\"rna\",tolower(keys(org.Hs.eg.db, keytype=\"SYMBOL\"))),                         numWords = 30, excludeFreq = 5000, colorText=TRUE,                         edgeLink=FALSE, showLegend=FALSE) hCNetTrans <- hCNet@net + theme(plot.background = element_rect(fill = \"transparent\",colour = NA)) # ggsave(file=\"hCNet.png\", hCNetTrans, width=12, height=12, bg=\"transparent\") hCNetReac <- wcGeneSummary(keggList$`05160`, enrich=\"reactome\", keyType=\"ENTREZID\"                            topPath=30, numWords=30,                            plotType=\"network\", corThresh=0.2) hCNetReacTrans <- hCNetReac@net + theme(plot.background = element_rect(fill = \"transparent\",colour = NA)) # ggsave(file=\"hCNetTrans.png\", hCNetReacTrans, width=12, height=12, bg=\"transparent\")"},{"path":"/index.html","id":"example-of-annotating-bayesian-network","dir":"","previous_headings":"","what":"Example of annotating Bayesian network","title":"easy visualization and interpretation of omics summary data","text":"Interactive inspection Bayesian network module eigengenes using Cytoscape.js wcGeneSummary.","code":""},{"path":"/index.html","id":"example-of-annotating-dendrogram-of-gene-cluster-by-words","dir":"","previous_headings":"","what":"Example of annotating dendrogram of gene cluster by words","title":"easy visualization and interpretation of omics summary data","text":"example annotating dendrogram pyramid plots word counts shown. example, WGCNA used cluster gene expression values. Module eigengenes clustered pvclust. getWordsOnDendro can used obtain patchworkGrob list. Grobs can plotted dendrogram plot using annotation_custom.","code":"library(wcGeneSummary) ## MEs and colors are stored in `bwmod`, a blockwise module result from WGCNA plotEigengeneNetworksWithWords(bwmod$MEs, bwmod$colors)"},{"path":"/index.html","id":"the-other-examples","dir":"","previous_headings":"","what":"The other examples","title":"easy visualization and interpretation of omics summary data","text":"Example annotating gene clusters using WGCNA Example Bayesian network analysis","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"easy visualization and interpretation of omics summary data","text":"Zuguang Gu. GeneSummary Feinerer , Hornik K, Meyer D. Text Mining Infrastructure R. J Stat Softw 2008;25:1â54. doi:10.18637/jss.v025.i05 Ian Fellows. wordcloud: Word Clouds. R package version 2.6. 2018. Lucas T. palettetown: Pokemon themed colour schemes R.","code":""},{"path":"/reference/compareWordNet.html","id":null,"dir":"Reference","previous_headings":"","what":"compareWordNet â compareWordNet","title":"compareWordNet â compareWordNet","text":"compare two gene clusters based words","code":""},{"path":"/reference/compareWordNet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compareWordNet â compareWordNet","text":"","code":"compareWordNet(   listOfNets,   titles = NULL,   layout = \"nicely\",   hull = FALSE,   size = \"freq\",   conc = 1,   tag = FALSE,   tagLevel = 1,   edgeLink = TRUE,   freqMean = FALSE,   scaleRange = c(5, 10),   returnNet = FALSE,   colPal = \"Pastel1\",   colNum = 20,   colorText = FALSE )"},{"path":"/reference/compareWordNet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compareWordNet â compareWordNet","text":"listOfNets list consisting results wc* functions (plotType=\"network\") titles title shown plot layout layout hull show category hull size node size, freq, overlap numeric number conc concavity parameter tag show tag plot tagLevel words tagged many networks included edgeLink whether use link diagonal freqMean concatenate frequency (TRUE: mean, FALSE: sum) scaleRange point size scaling returnNet return network (ig) colPal color palette used RColorBrewer colNum color number used plot colorText whether color text based category","code":""},{"path":"/reference/compareWordNet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compareWordNet â compareWordNet","text":"plot comparing gene clusters","code":""},{"path":"/reference/compareWordNet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compareWordNet â compareWordNet","text":"","code":"net1 <- wcGeneSummary(c(\"DDX41\",\"IRF3\"), plotType=\"network\") #> input genes: 2 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 2 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> Warning: the standard deviation is zero net2 <- wcGeneSummary(c(\"DDX41\",\"PNKP\"), plotType=\"network\") #> input genes: 2 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 2 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> Warning: the standard deviation is zero compare <- compareWordNet(list(net1, net2)) #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"/reference/exportCyjs.html","id":null,"dir":"Reference","previous_headings":"","what":"exportCyjs â exportCyjs","title":"exportCyjs â exportCyjs","text":"Export Cytoscape.js script, HTML stylesheet graph image","code":""},{"path":"/reference/exportCyjs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exportCyjs â exportCyjs","text":"","code":"exportCyjs(g, rootDir, netDir)"},{"path":"/reference/exportCyjs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"exportCyjs â exportCyjs","text":"g igraph object rootDir root directory path netDir directory store scripts","code":""},{"path":"/reference/exportCyjs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"exportCyjs â exportCyjs","text":"return nothing, export specified directory","code":""},{"path":"/reference/exportCyjs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"exportCyjs â exportCyjs","text":"","code":"library(igraph) #>  #> Attaching package: 'igraph' #> The following objects are masked from 'package:stats': #>  #>     decompose, spectrum #> The following object is masked from 'package:base': #>  #>     union g <- graph_from_literal( ME1-+ME2 ) V(g)$image <- c(\"path1\",\"path2\") V(g)$shape <- c(\"image\",\"image\") V(g)$size <- c(1,1) if (FALSE) exportCyjs(g, \"./\", \"net\")"},{"path":"/reference/exportVisjs.html","id":null,"dir":"Reference","previous_headings":"","what":"exportVisjs â exportVisjs","title":"exportVisjs â exportVisjs","text":"Export vis.js script, HTML stylesheet graph image","code":""},{"path":"/reference/exportVisjs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exportVisjs â exportVisjs","text":"","code":"exportVisjs(g, rootDir, netDir)"},{"path":"/reference/exportVisjs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"exportVisjs â exportVisjs","text":"g igraph object rootDir root directory path netDir directory store scripts","code":""},{"path":"/reference/exportVisjs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"exportVisjs â exportVisjs","text":"return nothing, export specified directory","code":""},{"path":"/reference/exportVisjs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"exportVisjs â exportVisjs","text":"","code":"library(igraph) g <- graph_from_literal( ME1-+ME2 ) V(g)$image <- c(\"path1\",\"path2\") V(g)$shape <- c(\"image\",\"image\") V(g)$size <- c(1,1) if (FALSE) exportVisjs(g, \"./\", \"net\")"},{"path":"/reference/findTerm.html","id":null,"dir":"Reference","previous_headings":"","what":"findTerm â findTerm","title":"findTerm â findTerm","text":"find queried terms list gene clusters return frequency","code":""},{"path":"/reference/findTerm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"findTerm â findTerm","text":"","code":"findTerm(   query,   listOfGenes,   split = FALSE,   ngram = NA,   tfidf = TRUE,   calc = \"sum\",   keyType = \"SYMBOL\",   ... )"},{"path":"/reference/findTerm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"findTerm â findTerm","text":"query query words listOfGenes named list genes split split query space, default FALSE ngram use ngram tfidf use tfidf creating TDM calc \"sum\", \"mean\" \"highest\" keyType key type listOfGenes ... passed wcGeneSummary","code":""},{"path":"/reference/findTerm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"findTerm â findTerm","text":"named list frequency","code":""},{"path":"/reference/findTerm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"findTerm â findTerm","text":"","code":"query <- \"DNA repair\" lg <- list() lg[[\"sample\"]] <- c(\"ERCC1\",\"ERCC2\") findTerm(query, lg) #> Finding query in 1 clusters ... #> input genes: 2 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 2 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> $sample #> dna repair  #>          0  #>"},{"path":"/reference/getUPtax.html","id":null,"dir":"Reference","previous_headings":"","what":"getUPtax â getUPtax","title":"getUPtax â getUPtax","text":"Obtain list UniProt organism identification codes, querying taxonomy UniProt codes. https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/docs/speclist.txt file must downloaded specified file argument.","code":""},{"path":"/reference/getUPtax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getUPtax â getUPtax","text":"","code":"getUPtax(file, candUP, candTax = NULL)"},{"path":"/reference/getUPtax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getUPtax â getUPtax","text":"file downloaded file candUP candidate UniProt organism identification codes candTax candidate taxonomy name","code":""},{"path":"/reference/getWordsOnDendro.html","id":null,"dir":"Reference","previous_headings":"","what":"getWordsOnDendro â getWordsOnDendro","title":"getWordsOnDendro â getWordsOnDendro","text":"Get grobs plot dendrogram position information","code":""},{"path":"/reference/getWordsOnDendro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getWordsOnDendro â getWordsOnDendro","text":"","code":"getWordsOnDendro(   dhc,   geneVec,   geneNumLimit = 1000,   geneVecType = \"ENSEMBL\",   numberOfWords = 25,   type = \"words\",   ... )"},{"path":"/reference/getWordsOnDendro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getWordsOnDendro â getWordsOnDendro","text":"dhc dendrogram geneVec gene-named vector node names dendrogram geneNumLimit gene number threshold, pyramid plots produced geneVecType type name geneVec (default: ENSEMBL) numberOfWords number words plot (default: 25) type \"words\" \"enrich\" ... passed wcGeneSummary","code":""},{"path":"/reference/getWordsOnDendro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getWordsOnDendro â getWordsOnDendro","text":"list pyramid plot grobs positions","code":""},{"path":"/reference/getWordsOnDendro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getWordsOnDendro â getWordsOnDendro","text":"","code":"mod <- returnExample() #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns result <- hclust(dist(t(mod$MEs))) dhc <- result |>     as.dendrogram() |>     dendextend::hang.dendrogram() geneVec <- paste0(\"ME\", mod$colors) names(geneVec) <- names(mod$colors) getWordsOnDendro(dhc, geneVec, numberOfWords = 2) #> input genes: 12 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 12 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> input genes: 13 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 13 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> $`1` #> $`1`$plot #> TableGrob (20 x 47) \"layout\": 52 grobs #>     z         cells       name                                       grob #> 1   5 ( 9- 9, 7- 7)   spacer-1                             zeroGrob[NULL] #> 2   7 (11-11, 7- 7)   axis-l-1         absoluteGrob[GRID.absoluteGrob.13] #> 3   3 (13-13, 7- 7)   spacer-1                             zeroGrob[NULL] #> 4   6 ( 9- 9, 9- 9)   axis-t-1                             zeroGrob[NULL] #> 5   1 (11-11, 9- 9)    panel-1                    gTree[panel-1.gTree.11] #> 6   9 (13-13, 9- 9)   axis-b-1         absoluteGrob[GRID.absoluteGrob.12] #> 7   4 ( 9- 9,11-11)   spacer-1                             zeroGrob[NULL] #> 8   8 (11-11,11-11)   axis-r-1                             zeroGrob[NULL] #> 9   2 (13-13,11-11)   spacer-1                             zeroGrob[NULL] #> 10 10 ( 8- 8, 9- 9)   xlab-t-1                             zeroGrob[NULL] #> 11 11 (14-14, 9- 9)   xlab-b-1 zeroGrob[axis.title.x.bottom..zeroGrob.14] #> 12 12 (11-11, 6- 6)   ylab-l-1   zeroGrob[axis.title.y.left..zeroGrob.15] #> 13 13 (11-11,12-12)   ylab-r-1                             zeroGrob[NULL] #> 14 14 ( 5- 5, 9- 9) subtitle-1       zeroGrob[plot.subtitle..zeroGrob.17] #> 15 15 ( 4- 4, 9- 9)    title-1          zeroGrob[plot.title..zeroGrob.16] #> 16 16 (15-15, 9- 9)  caption-1        zeroGrob[plot.caption..zeroGrob.19] #> 17 17 ( 3- 3, 3- 3)      tag-1            zeroGrob[plot.tag..zeroGrob.18] #> 18 22 ( 9- 9,22-22)   spacer-2                             zeroGrob[NULL] #> 19 24 (11-11,22-22)   axis-l-2         absoluteGrob[GRID.absoluteGrob.31] #> 20 20 (13-13,22-22)   spacer-2                             zeroGrob[NULL] #> 21 23 ( 9- 9,24-24)   axis-t-2                             zeroGrob[NULL] #> 22 18 (11-11,24-24)    panel-2                    gTree[panel-1.gTree.29] #> 23 26 (13-13,24-24)   axis-b-2         absoluteGrob[GRID.absoluteGrob.30] #> 24 21 ( 9- 9,26-26)   spacer-2                             zeroGrob[NULL] #> 25 25 (11-11,26-26)   axis-r-2                             zeroGrob[NULL] #> 26 19 (13-13,26-26)   spacer-2                             zeroGrob[NULL] #> 27 27 ( 8- 8,24-24)   xlab-t-2                             zeroGrob[NULL] #> 28 28 (14-14,24-24)   xlab-b-2 zeroGrob[axis.title.x.bottom..zeroGrob.32] #> 29 29 (11-11,21-21)   ylab-l-2   zeroGrob[axis.title.y.left..zeroGrob.33] #> 30 30 (11-11,27-27)   ylab-r-2                             zeroGrob[NULL] #> 31 31 ( 5- 5,24-24) subtitle-2       zeroGrob[plot.subtitle..zeroGrob.35] #> 32 32 ( 4- 4,24-24)    title-2          zeroGrob[plot.title..zeroGrob.34] #> 33 33 (15-15,24-24)  caption-2        zeroGrob[plot.caption..zeroGrob.37] #> 34 34 ( 3- 3,18-18)      tag-2            zeroGrob[plot.tag..zeroGrob.36] #> 35 39 ( 9- 9,37-37)   spacer-3                             zeroGrob[NULL] #> 36 41 (11-11,37-37)   axis-l-3         absoluteGrob[GRID.absoluteGrob.50] #> 37 37 (13-13,37-37)   spacer-3                             zeroGrob[NULL] #> 38 40 ( 9- 9,39-39)   axis-t-3                             zeroGrob[NULL] #> 39 35 (11-11,39-39)    panel-3                    gTree[panel-1.gTree.48] #> 40 43 (13-13,39-39)   axis-b-3         absoluteGrob[GRID.absoluteGrob.49] #> 41 38 ( 9- 9,41-41)   spacer-3                             zeroGrob[NULL] #> 42 42 (11-11,41-41)   axis-r-3                             zeroGrob[NULL] #> 43 36 (13-13,41-41)   spacer-3                             zeroGrob[NULL] #> 44 44 ( 8- 8,39-39)   xlab-t-3                             zeroGrob[NULL] #> 45 45 (14-14,39-39)   xlab-b-3 zeroGrob[axis.title.x.bottom..zeroGrob.51] #> 46 46 (11-11,36-36)   ylab-l-3   zeroGrob[axis.title.y.left..zeroGrob.52] #> 47 47 (11-11,42-42)   ylab-r-3                             zeroGrob[NULL] #> 48 48 ( 5- 5,39-39) subtitle-3       zeroGrob[plot.subtitle..zeroGrob.54] #> 49 49 ( 4- 4,39-39)    title-3          zeroGrob[plot.title..zeroGrob.53] #> 50 50 (15-15,39-39)  caption-3        zeroGrob[plot.caption..zeroGrob.56] #> 51 51 ( 3- 3,33-33)      tag-3            zeroGrob[plot.tag..zeroGrob.55] #> 52  0 ( 1-20, 1-47) background             rect[plot.background..rect.71] #>  #> $`1`$height #> [1] 3.162278 #>  #> $`1`$xmin #> [1] 2 #>  #> $`1`$xmax #> [1] 3 #>  #> $`1`$heightup #> [1] 18.43909 #>  #>"},{"path":"/reference/makeBar.html","id":null,"dir":"Reference","previous_headings":"","what":"makeBar â makeBar","title":"makeBar â makeBar","text":"Makeing barplot word frequency queried genes","code":""},{"path":"/reference/makeBar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"makeBar â makeBar","text":"","code":"makeBar(   queries,   top = 10,   keyType = \"SYMBOL\",   pal = NULL,   textSize = 20,   reorder = TRUE,   orgDb = org.Hs.eg.db,   flip = FALSE,   grad = FALSE,   retList = FALSE,   ... )"},{"path":"/reference/makeBar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"makeBar â makeBar","text":"queries gene IDs top many numbers words shown keyType default SYMBOL pal palette used barplot textSize text size barplot reorder order frequency orgDb orgDb flip flip barplot (gene name y-axis) grad use gradient frequency retList return result wcGeneSummary ... passed wcGeneSummary()","code":""},{"path":"/reference/makeBar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"makeBar â makeBar","text":"barplot word frequency","code":""},{"path":"/reference/makeBar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"makeBar â makeBar","text":"","code":"geneList <- c(\"DDX41\") makeBar(geneList) #> input genes: 1 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 1 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ..."},{"path":"/reference/makeCorpus.html","id":null,"dir":"Reference","previous_headings":"","what":"makeCorpus â makeCorpus","title":"makeCorpus â makeCorpus","text":"Clean-corpus","code":""},{"path":"/reference/makeCorpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"makeCorpus â makeCorpus","text":"","code":"makeCorpus(docs, filterWords, additionalRemove, numOnly, stem, lower = TRUE)"},{"path":"/reference/makeCorpus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"makeCorpus â makeCorpus","text":"docs corpus clean filterWords words filter based frequency additionalRemove words filter numOnly delete number stem use stem lower transform lower corpus","code":""},{"path":"/reference/makeCorpus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"makeCorpus â makeCorpus","text":"cleaned corpus","code":""},{"path":"/reference/osp.html","id":null,"dir":"Reference","previous_headings":"","what":"osp â osp","title":"osp â osp","text":"alias wcGeneSummary","code":""},{"path":"/reference/osp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"osp â osp","text":"","code":"osp(   geneList,   keyType = \"SYMBOL\",   excludeFreq = 2000,   exclude = \"frequency\",   filterMax = FALSE,   excludeType = \">\",   tfidf = FALSE,   genePlotNum = 10,   preserve = TRUE,   takeMax = FALSE,   additionalRemove = NA,   onlyCorpus = FALSE,   madeUpper = c(\"dna\", \"rna\"),   organism = 9606,   pal = c(\"blue\", \"red\"),   numWords = 15,   scaleRange = c(5, 10),   showLegend = FALSE,   orgDb = org.Hs.eg.db,   edgeLabel = FALSE,   pvclAlpha = 0.95,   bn = FALSE,   R = 20,   cl = FALSE,   ngram = NA,   plotType = \"wc\",   onlyTDM = FALSE,   stem = FALSE,   colorText = FALSE,   corThresh = 0.2,   genePlot = FALSE,   genePathPlot = NA,   genePathPlotSig = 0.05,   tag = FALSE,   layout = \"nicely\",   edgeLink = TRUE,   deleteZeroDeg = TRUE,   enrich = NULL,   topPath = 10,   ora = FALSE,   tagWhole = FALSE,   mergeCorpus = NULL,   numOnly = TRUE,   madeUpperGenes = TRUE,   onWholeTDM = FALSE,   pre = TRUE,   verbPOS = c(\"VBZ\"),   nodePal = palette(),   collapse = FALSE,   verb = FALSE,   udpipeModel = \"english-ewt-ud-2.5-191206.udpipe\",   ... )"},{"path":"/reference/osp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"osp â osp","text":"","code":"osp(\"DDX41\") #> input genes: 1 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 1 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> type: refseq #> Number of words: 15 #> DDX41 #> 73.7 Kb"},{"path":"/reference/ospa.html","id":null,"dir":"Reference","previous_headings":"","what":"ospa â ospa","title":"ospa â ospa","text":"alias wcAbst","code":""},{"path":"/reference/ospa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ospa â ospa","text":"","code":"ospa(   queries,   redo = NULL,   madeUpper = c(\"dna\", \"rna\"),   target = \"abstract\",   useFil = NA,   filType = \"above\",   filNum = 0,   sortOrder = \"relevance\",   pvclAlpha = 0.95,   numOnly = TRUE,   delim = \"OR\",   limit = 10,   geneUpper = TRUE,   apiKey = NULL,   tfidf = FALSE,   cl = FALSE,   pal = c(\"blue\", \"red\"),   numWords = 30,   scaleRange = c(5, 10),   showLegend = FALSE,   plotType = \"wc\",   colorText = FALSE,   quote = FALSE,   corThresh = 0.2,   layout = \"nicely\",   tag = FALSE,   tagWhole = FALSE,   onlyCorpus = FALSE,   onlyTDM = FALSE,   bn = FALSE,   R = 20,   retMax = 10,   edgeLabel = FALSE,   edgeLink = TRUE,   ngram = NA,   genePlot = FALSE,   onlyDf = FALSE,   nodePal = palette(),   preserve = TRUE,   takeMax = FALSE,   deleteZeroDeg = TRUE,   additionalRemove = NA,   orgDb = org.Hs.eg.db,   preset = FALSE,   onWholeDTM = FALSE,   madeUpperGenes = TRUE,   stem = FALSE,   ... )"},{"path":"/reference/ospa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ospa â ospa","text":"","code":"ospa(\"DDX41\") #> Proceeding without API key #> type: pubmed_abstract #> Number of words: 30 #> DDX41 #> 322.4 Kb"},{"path":"/reference/ospb.html","id":null,"dir":"Reference","previous_headings":"","what":"ospb â ospb","title":"ospb â ospb","text":"alias wcBSDB alias wcBSDB","code":""},{"path":"/reference/ospb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ospb â ospb","text":"","code":"ospb(   mbList,   excludeFreq = 1000,   exclude = \"frequency\",   excludeType = \">\",   additionalRemove = NA,   tfidf = FALSE,   target = \"title\",   apiKey = NULL,   takeMax = FALSE,   pre = FALSE,   pvclAlpha = 0.95,   numOnly = TRUE,   madeUpper = c(\"dna\", \"rna\"),   redo = NULL,   pal = c(\"blue\", \"red\"),   numWords = 15,   preserve = TRUE,   metab = NULL,   metabThresh = 0.2,   curate = TRUE,   abstArg = list(),   nodePal = palette(),   metCol = NULL,   scaleRange = c(5, 10),   showLegend = FALSE,   ecPlot = FALSE,   edgeLabel = FALSE,   mbPlot = FALSE,   onlyTDM = FALSE,   ecFile = NULL,   upTaxFile = NULL,   filterMax = FALSE,   ngram = NA,   plotType = \"wc\",   disPlot = FALSE,   onWholeDTM = FALSE,   colorText = FALSE,   corThresh = 0.2,   tag = FALSE,   tagWhole = FALSE,   stem = FALSE,   layout = \"nicely\",   edgeLink = TRUE,   deleteZeroDeg = TRUE,   cl = FALSE,   ... )  ospb(   mbList,   excludeFreq = 1000,   exclude = \"frequency\",   excludeType = \">\",   additionalRemove = NA,   tfidf = FALSE,   target = \"title\",   apiKey = NULL,   takeMax = FALSE,   pre = FALSE,   pvclAlpha = 0.95,   numOnly = TRUE,   madeUpper = c(\"dna\", \"rna\"),   redo = NULL,   pal = c(\"blue\", \"red\"),   numWords = 15,   preserve = TRUE,   metab = NULL,   metabThresh = 0.2,   curate = TRUE,   abstArg = list(),   nodePal = palette(),   metCol = NULL,   scaleRange = c(5, 10),   showLegend = FALSE,   ecPlot = FALSE,   edgeLabel = FALSE,   mbPlot = FALSE,   onlyTDM = FALSE,   ecFile = NULL,   upTaxFile = NULL,   filterMax = FALSE,   ngram = NA,   plotType = \"wc\",   disPlot = FALSE,   onWholeDTM = FALSE,   colorText = FALSE,   corThresh = 0.2,   tag = FALSE,   tagWhole = FALSE,   stem = FALSE,   layout = \"nicely\",   edgeLink = TRUE,   deleteZeroDeg = TRUE,   cl = FALSE,   ... )"},{"path":"/reference/ospb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ospb â ospb","text":"","code":"ospb(\"Veillonella dispar\") #> Input microbes: 1 #> Using cached version from 2023-01-16 00:17:33 #>   Found 17 entries for Veillonella dispar #> Including 27 entries ... #> filter based on BugSigDB #> Filtering 0 words (frequency and/or tfidf) ... #> type: BSDB_title #> Number of words: 15 #> Veillonella dispar #> 342.2 Kb ospb(\"Veillonella dispar\") #> Input microbes: 1 #> Using cached version from 2023-01-16 00:17:33 #>   Found 17 entries for Veillonella dispar #> Including 27 entries ... #> filter based on BugSigDB #> Filtering 0 words (frequency and/or tfidf) ... #> type: BSDB_title #> Number of words: 15 #> Veillonella dispar #> 342.2 Kb"},{"path":"/reference/osplot.html","id":null,"dir":"Reference","previous_headings":"","what":"osplot â osplot","title":"osplot â osplot","text":"wrapper functions wcGeneSummary, wcAbst, wcBSDB","code":""},{"path":"/reference/osplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"osplot â osplot","text":"","code":"osplot(target, ...)"},{"path":"/reference/osplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"osplot â osplot","text":"target \"pubmed\", \"bugsigdb\", \"refseq\", \"ec\" ... passed function","code":""},{"path":"/reference/osplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"osplot â osplot","text":"list data frames ggplot2 object","code":""},{"path":"/reference/osplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"osplot â osplot","text":"","code":"geneList <- c(\"DDX41\") osplot(\"refseq\", geneList) #> input genes: 1 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 1 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> type: refseq #> Number of words: 15 #> DDX41 #> 73.7 Kb"},{"path":"/reference/pathviewText.html","id":null,"dir":"Reference","previous_headings":"","what":"pathviewText â pathviewText","title":"pathviewText â pathviewText","text":"colorize pathview map, link word frequency","code":""},{"path":"/reference/pathviewText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pathviewText â pathviewText","text":"","code":"pathviewText(   geneList,   keyType,   pid,   org = \"hsa\",   pal = \"RdBu\",   target = \"refseq\",   searchTerms = NULL,   node.types = \"gene\",   termMap = NULL,   orgDb = org.Hs.eg.db,   numWords = 20,   trans = FALSE,   areas = NULL,   ... )"},{"path":"/reference/pathviewText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pathviewText â pathviewText","text":"geneList gene ID list keyType keytype queried gene pid pathway id org organism ID KEGG, default hsa pal palette passed RColorBrewer coloring nodes target target DB word, \"refseq\" \"abstract\" searchTerms search terms used wcAbst, different query geneList node.types passed node.map e.g. \"genes\" \"ortholog\" termMap data.frame consisting columns \"query\" \"description\", shows query \"geneList\", description \"searchTerms\". e.g. \"K08097\" \"phosphosulfolactate synthase\" orgDb organism database convert symbol numWords number words barplot trans transpose barplot areas used patchwork ... passed wc functions","code":""},{"path":"/reference/plotDynamic.html","id":null,"dir":"Reference","previous_headings":"","what":"plotDynamic â plotDynamic","title":"plotDynamic â plotDynamic","text":"list network words using graphlayouts::layout_as_dynamic","code":""},{"path":"/reference/plotDynamic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotDynamic â plotDynamic","text":"","code":"plotDynamic(   listOfNets,   concat = \"union\",   alpha = 0.5,   titles = NULL,   tag = FALSE )"},{"path":"/reference/plotDynamic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotDynamic â plotDynamic","text":"listOfNets list consisting results wc* functions (plotType=\"network\") concat \"union\" \"intersection\" alpha pass layout_as_dynamic titles title shown plot tag show tag plot","code":""},{"path":"/reference/plotDynamic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotDynamic â plotDynamic","text":"plot comparing gene clusters","code":""},{"path":"/reference/plotDynamic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotDynamic â plotDynamic","text":"","code":"library(igraph) wc1 <- wcGeneSummary(c(\"DDX41\",\"IRF3\"), plotType=\"network\") #> input genes: 2 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 2 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> Warning: the standard deviation is zero wc2 <- wcGeneSummary(c(\"DDX41\",\"PNKP\"), plotType=\"network\") #> input genes: 2 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 2 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> Warning: the standard deviation is zero compare <- plotDynamic(list(wc1, wc2))"},{"path":"/reference/plotEigengeneNetworksWithWords.html","id":null,"dir":"Reference","previous_headings":"","what":"plotEigengeneNetworksWithWords â plotEigengeneNetworksWithWords","title":"plotEigengeneNetworksWithWords â plotEigengeneNetworksWithWords","text":"plot eigengene dendrogram word annotation","code":""},{"path":"/reference/plotEigengeneNetworksWithWords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotEigengeneNetworksWithWords â plotEigengeneNetworksWithWords","text":"","code":"plotEigengeneNetworksWithWords(   MEs,   colors,   nboot = 100,   numberOfWords = 10,   geneNumLimit = 1000,   geneVecType = \"ENSEMBL\",   border = TRUE,   type = \"words\",   ... )"},{"path":"/reference/plotEigengeneNetworksWithWords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotEigengeneNetworksWithWords â plotEigengeneNetworksWithWords","text":"MEs module eigengene data colors named vector cluster nboot pvclust bootstrap number numberOfWords number words included pyramid plots geneNumLimit clusters gene number threshold ignored geneVecType type IDs `colors` border whether draw border pyramid plots type \"words\" \"enrich\" ... passed wcGeneSummary()","code":""},{"path":"/reference/plotEigengeneNetworksWithWords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotEigengeneNetworksWithWords â plotEigengeneNetworksWithWords","text":"plot dendrogram module eigengenes word annotations","code":""},{"path":"/reference/plotEigengeneNetworksWithWords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotEigengeneNetworksWithWords â plotEigengeneNetworksWithWords","text":"","code":"mod <- returnExample() #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns plotEigengeneNetworksWithWords(mod$MEs, mod$colors) #> Bootstrap (r = 0.5)... Done. #> Bootstrap (r = 0.6)... Done. #> Bootstrap (r = 0.7)... Done. #> Bootstrap (r = 0.8)... Done. #> Bootstrap (r = 0.9)... Done. #> Bootstrap (r = 1.0)... Done. #> Bootstrap (r = 1.1)... Done. #> Bootstrap (r = 1.2)... Done. #> Bootstrap (r = 1.3)... Done. #> Bootstrap (r = 1.4)... Done. #> input genes: 12 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 12 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> input genes: 13 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 13 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ..."},{"path":"/reference/returnExample.html","id":null,"dir":"Reference","previous_headings":"","what":"returnExample â returnExample","title":"returnExample â returnExample","text":"return example dataset used analysis","code":""},{"path":"/reference/returnExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returnExample â returnExample","text":"","code":"returnExample()"},{"path":"/reference/returnExample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returnExample â returnExample","text":"return example MEs colors","code":""},{"path":"/reference/returnExample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returnExample â returnExample","text":"","code":"returnExample() #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> $MEs #>    ME1 ME2 ME3 #> 1    1   2  10 #> 2    2   3   9 #> 3    3   4   8 #> 4    4   5   7 #> 5    5   6   6 #> 6    6   7   5 #> 7    7   8   4 #> 8    8   9   3 #> 9    9  10   2 #> 10  10  11   1 #>  #> $colors #> ENSG00000108702 ENSG00000108691 ENSG00000277632 ENSG00000278567 ENSG00000274221  #>               1               1               1               1               1  #> ENSG00000275302 ENSG00000277943 ENSG00000275824 ENSG00000271503 ENSG00000274233  #>               1               1               1               1               1  #> ENSG00000108688 ENSG00000108700 ENSG00000163739 ENSG00000081041 ENSG00000163734  #>               1               1               2               2               2  #> ENSG00000163735 ENSG00000124875 ENSG00000169429 ENSG00000138755 ENSG00000169245  #>               2               2               2               2               2  #> ENSG00000169248 ENSG00000107562 ENSG00000156234 ENSG00000145824 ENSG00000161921  #>               2               2               2               2               2  #> ENSG00000012061 ENSG00000104884 ENSG00000163161 ENSG00000175595 ENSG00000134899  #>               3               3               3               3               3  #> ENSG00000225830 ENSG00000049167  #>               3               3  #>"},{"path":"/reference/returnP.html","id":null,"dir":"Reference","previous_headings":"","what":"returnP â returnP","title":"returnP â returnP","text":"Calculate p-values","code":""},{"path":"/reference/returnP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returnP â returnP","text":"","code":"returnP(name, matSorted, allFreqGeneSummary)"},{"path":"/reference/returnP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returnP â returnP","text":"name name gene matSorted words frequency cluster allFreqGeneSummary words frequency whole description","code":""},{"path":"/reference/returnP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returnP â returnP","text":"p-values words","code":""},{"path":"/reference/returnPyramid.html","id":null,"dir":"Reference","previous_headings":"","what":"returnPyramid â returnPyramid","title":"returnPyramid â returnPyramid","text":"Return pyramid plots","code":""},{"path":"/reference/returnPyramid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returnPyramid â returnPyramid","text":"","code":"returnPyramid(   L,   R,   geneVec,   geneVecType,   numberOfWords = 25,   widths = c(0.3, 0.3, 0.3),   lowCol = \"blue\",   highCol = \"red\",   type = \"words\",   wrap = 15,   enrichID = \"ID\",   orgDb = org.Hs.eg.db,   ... )"},{"path":"/reference/returnPyramid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returnPyramid â returnPyramid","text":"L genes cluster R genes cluster geneVec gene-named vector node names dendrogram geneVecType type name geneVec (default: ENSEMBL) numberOfWords number words plot widths parameters pass patchwork lowCol gradient low color highCol gradient high color type \"words\" \"enrich\" enrichID \"Description\" \"ID\" orgDb organism database use enrich ... parameters passed wcGeneSummary()","code":""},{"path":"/reference/returnPyramid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returnPyramid â returnPyramid","text":"list pyramid plot grobs positions","code":""},{"path":"/reference/returnSim.html","id":null,"dir":"Reference","previous_headings":"","what":"returnSim â returnSim","title":"returnSim â returnSim","text":"return similarity matrix cluster based intersection union words","code":""},{"path":"/reference/returnSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returnSim â returnSim","text":"","code":"returnSim(cllist, keyType = \"ENTREZID\", numLimit = 5000, ...)"},{"path":"/reference/returnSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returnSim â returnSim","text":"cllist cluster list (named vector list) keyType keytype numLimit threshold gene number limit default 5000 ... parameters pass wcGeneSummary()","code":""},{"path":"/reference/returnSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returnSim â returnSim","text":"similarity matrix","code":""},{"path":"/reference/returnSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returnSim â returnSim","text":"","code":"ex <- returnExample() #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns returnSim(ex$color, keyType=\"ENSEMBL\") #> Number of clusters: 3 #> 1 #> input genes: 12 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 12 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> 2 #> input genes: 13 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 13 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> 3 #> input genes: 7 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 7 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #>           1         2 3 #> 1 1.0000000 0.3043478 0 #> 2 0.3043478 1.0000000 0 #> 3 0.0000000 0.0000000 1"},{"path":"/reference/textORA.html","id":null,"dir":"Reference","previous_headings":"","what":"textORA â textORA","title":"textORA â textORA","text":"Return p-values hypergeometric distribution (experimental)","code":""},{"path":"/reference/textORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"textORA â textORA","text":"","code":"textORA(queries)"},{"path":"/reference/textORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"textORA â textORA","text":"queries gene list (Entrez ID)","code":""},{"path":"/reference/textORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"textORA â textORA","text":"p-values words p-values words","code":""},{"path":"/reference/textORA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"textORA â textORA","text":"","code":"textORA(c(\"2067\",\"2068\",\"2071\",\"2072\")) #>                      gene                    repair                       dna  #>              1.723250e-02              2.772523e-18              1.412944e-07  #>                  excision                nucleotide                   protein  #>              5.905547e-13              2.215455e-08              6.769246e-01  #>                   encoded              endonuclease               pigmentosum  #>              1.627141e-01              8.893513e-10              6.281349e-12  #>                  syndrome                 xeroderma                   complex  #>              2.329540e-04              4.607269e-12              1.245653e-01  #>                 functions                  involved                transcript  #>              8.491204e-03              1.510704e-01              3.638789e-01  #>             transcription                  variants              atpdependent  #>              1.549991e-02              2.417545e-01              1.686698e-04  #>                     basal                  cockayne           complementation  #>              2.305002e-04              1.029649e-06              1.501759e-04  #>                   defects                  encoding                      ercc  #>              9.015186e-03              2.395635e-01                        NA  #>                    factor                     forms                  helicase  #>              9.057894e-02              7.894472e-03              2.769888e-04  #>             heterodimeric                  incision                  isoforms  #>              2.532191e-04              4.120025e-07              2.205596e-01  #>                  multiple                 mutations                   pathway  #>              3.179347e-01              1.142886e-01              1.692310e-02  #>                   product                    result       trichothiodystrophy  #>              2.396638e-02              4.516619e-03              4.120025e-07  #>                  activity                     alter               alternative  #>              3.152288e-01              6.289064e-03              5.033251e-01  #>             alternatively                   belongs                  btftfiih  #>              4.346374e-01              3.275639e-01                        NA  #>               cancerprone            carcinogenesis                 catalyzes  #>              2.628328e-04              1.357661e-02              1.670544e-01  #>                       cde cerebrooculofacioskeletal                 cisplatin  #>              2.628328e-04              5.255969e-04              1.050919e-03  #>                     class                 compounds                crosslinks  #>              1.683685e-01              2.003843e-02              6.289064e-03  #>                    damage                 disorders             electrophilic  #>              4.897482e-02              5.470904e-02              4.458827e-03  #>                       eme                   encodes                   epsilon  #>                        NA              8.532138e-01              1.513130e-02  #>                  excising                      exon                expression  #>              2.628328e-04              5.743933e-02              6.070455e-01  #>                    formed                 helicases               heterodimer  #>              2.209731e-02              1.409511e-02              4.521650e-02  #>                 including                   induced                  integral  #>              2.726557e-01              6.632010e-02              8.431458e-02  #>                 interacts               interstrand                    lesion  #>              1.798868e-01              1.575967e-03              1.313477e-03  #>                   lesions                     light                 mechanism  #>              7.594327e-03              4.446306e-02              3.028991e-02  #>                  molecule                  overlaps                      play  #>              6.213682e-02              7.333411e-03              3.479769e-01  #>             polymorphisms                   process                    radxpd  #>              4.822434e-02              5.296749e-02                        NA  #>           recombinational                  required                      role  #>              5.255969e-04              1.690247e-01              5.553340e-01  #>                  specific                   spliced                  splicing  #>              1.484395e-01              4.399795e-01              5.533333e-01  #>                    strand                 structure                 subfamily  #>              1.720043e-02              2.319130e-01              1.733866e-01  #>                   subunit                     tfiih      transcriptioncoupled  #>              4.347864e-01              2.100740e-03              1.313477e-03  #>                       xpf  #>              5.255969e-04"},{"path":"/reference/wcAbst.html","id":null,"dir":"Reference","previous_headings":"","what":"wcAbst â wcAbst","title":"wcAbst â wcAbst","text":"make word cloud correlation network PubMed","code":""},{"path":"/reference/wcAbst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wcAbst â wcAbst","text":"","code":"wcAbst(   queries,   redo = NULL,   madeUpper = c(\"dna\", \"rna\"),   target = \"abstract\",   useFil = NA,   filType = \"above\",   filNum = 0,   sortOrder = \"relevance\",   pvclAlpha = 0.95,   numOnly = TRUE,   delim = \"OR\",   limit = 10,   geneUpper = TRUE,   apiKey = NULL,   tfidf = FALSE,   cl = FALSE,   pal = c(\"blue\", \"red\"),   numWords = 30,   scaleRange = c(5, 10),   showLegend = FALSE,   plotType = \"wc\",   colorText = FALSE,   quote = FALSE,   corThresh = 0.2,   layout = \"nicely\",   tag = FALSE,   tagWhole = FALSE,   onlyCorpus = FALSE,   onlyTDM = FALSE,   bn = FALSE,   R = 20,   retMax = 10,   edgeLabel = FALSE,   edgeLink = TRUE,   ngram = NA,   genePlot = FALSE,   onlyDf = FALSE,   nodePal = palette(),   preserve = TRUE,   takeMax = FALSE,   deleteZeroDeg = TRUE,   additionalRemove = NA,   orgDb = org.Hs.eg.db,   preset = FALSE,   onWholeDTM = FALSE,   madeUpperGenes = TRUE,   stem = FALSE,   ... )"},{"path":"/reference/wcAbst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wcAbst â wcAbst","text":"queries gene symbols redo plot parameters, input previous list madeUpper make words uppercase resulting plot target \"abstract\" \"title\" useFil filter based \"GS_TfIdf\" (whole gene summary tf-idf) \"BSDB_TfIdf\" (whole bugsigdb tf-idf) filType \"\" \"\" filNum specify filter tfidf sortOrder sort order, passed rentrez function pvclAlpha alpha pvpick() numOnly delete number delim delimiter queries limit limit number query count, default 10 geneUpper make queries uppercase apiKey api key eutilities tfidf use TfIdf making TDM cl cluster pass pvclust (snow::makeCluster(n)) pal palette color gradient correlation network numWords number words shown scaleRange scale label node size correlation network showLegend whether show legend correlation network plotType \"wc\" \"network\" colorText color text label based frequency correlation network quote whether quote queries corThresh correlation threshold layout layout correlation network, defaul \"nicely\" tag cluster words based text using pvclust tagWhole tag based whole data subset onlyCorpus return corpus onlyTDM return TDM bn perform bootstrap-based Bayesian network inference  instead correlation using bnlearn R many bootstrap bn stated retMax many items retlieved? edgeLabel TRUE, plot edge label (default: FALSE) edgeLink FALSE, use geom_edge_diagonal ngram default NA (1) genePlot plot associated genes (default: FALSE) onlyDf return raw data.frame searching PubMed nodePal node palette tag TRUE preserve try preserve original characters takeMax summarizing term-document matrix, take max. Otherwise take sum. deleteZeroDeg delete zero degree node plot correlation network additionalRemove specific words excluded orgDb org database, default org.Hs.eg.db preset filter preset words onWholeDTM calculate correlation network whole dataset top-words specified numWords madeUpperGenes make genes upper case automatically (default TRUE) stem whether use stemming ... parameters pass wordcloud()","code":""},{"path":"/reference/wcAbst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wcAbst â wcAbst","text":"list data frame ggplot2 object","code":""},{"path":"/reference/wcAbst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wcAbst â wcAbst","text":"","code":"wcAbst(\"DDX41\") #> Proceeding without API key #> type: pubmed_abstract #> Number of words: 30 #> DDX41 #> 322.4 Kb"},{"path":"/reference/wcBSDB.html","id":null,"dir":"Reference","previous_headings":"","what":"wcBSDB â wcBSDB","title":"wcBSDB â wcBSDB","text":"Visualize BugSigDB","code":""},{"path":"/reference/wcBSDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wcBSDB â wcBSDB","text":"","code":"wcBSDB(   mbList,   excludeFreq = 1000,   exclude = \"frequency\",   excludeType = \">\",   additionalRemove = NA,   tfidf = FALSE,   target = \"title\",   apiKey = NULL,   takeMax = FALSE,   pre = FALSE,   pvclAlpha = 0.95,   numOnly = TRUE,   madeUpper = c(\"dna\", \"rna\"),   redo = NULL,   pal = c(\"blue\", \"red\"),   numWords = 15,   preserve = TRUE,   metab = NULL,   metabThresh = 0.2,   curate = TRUE,   abstArg = list(),   nodePal = palette(),   metCol = NULL,   scaleRange = c(5, 10),   showLegend = FALSE,   ecPlot = FALSE,   edgeLabel = FALSE,   mbPlot = FALSE,   onlyTDM = FALSE,   ecFile = NULL,   upTaxFile = NULL,   filterMax = FALSE,   ngram = NA,   plotType = \"wc\",   disPlot = FALSE,   onWholeDTM = FALSE,   colorText = FALSE,   corThresh = 0.2,   tag = FALSE,   tagWhole = FALSE,   stem = FALSE,   layout = \"nicely\",   edgeLink = TRUE,   deleteZeroDeg = TRUE,   cl = FALSE,   ... )"},{"path":"/reference/wcBSDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wcBSDB â wcBSDB","text":"mbList microbe list excludeFreq default 1000 (words excluded) exclude \"frequency\" \"tfidf\", excludeType \">\" \"<\" additionalRemove specific words excluded tfidf use TfIdf making TDM target \"title\" \"abstract\" apiKey api key eutilities takeMax summarizing term-document matrix, take max. pre predefined filter words pvclAlpha alpha pvpick() numOnly delete number madeUpper make words uppercase resulting plot redo \"abstract\" chosen target, one can provide resulting object pal palette color gradient correlation network tag coloring numWords number words shown preserve try preserve original characters metab tibble metabolite - taxon association metabThresh threshold association curate include articles bugsigdb abstArg passed PubMed function using curate=FALSE nodePal node palette tag TRUE metCol metabolite data frame column name order \"candidate taxon\", \"metabolite\", \"quantitative values thresholding\" scaleRange scale label node size correlation network showLegend whether show legend correlation network ecPlot plot link enzyme microbes option requires two files passed wcEC() getUPTax(). edgeLabel TRUE, plot edge label (default: FALSE) mbPlot plot microbe names onlyTDM return TDM ecFile enzyme database file upTaxFile UniProt taxonomy file filterMax use pre-calculated filter based max-values excluding TfIdf Otherwise take sum. ngram default NA (1) plotType \"wc\" \"network\" disPlot plot diseases onWholeDTM calculate correlation network whole dataset top-words specified numWords colorText color text label based frequency correlation network corThresh correlation threshold tag perform pvclust words colorlize wordcloud tagWhole tag whole set subset stem whether use stemming layout layout correlation network, defaul \"nicely\" edgeLink FALSE, use geom_edge_diagonal deleteZeroDeg delete zero degree node plot correlation network cl cluster object passed pvclust ... parameters pass wordcloud()","code":""},{"path":"/reference/wcBSDB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wcBSDB â wcBSDB","text":"list data frame ggplot2 object","code":""},{"path":"/reference/wcBSDB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wcBSDB â wcBSDB","text":"","code":"mbList <- c(\"Veillonella dispar\") wcBSDB(mbList) #> Input microbes: 1 #> Using cached version from 2023-01-16 00:17:33 #>   Found 17 entries for Veillonella dispar #> Including 27 entries ... #> filter based on BugSigDB #> Filtering 0 words (frequency and/or tfidf) ... #> type: BSDB_title #> Number of words: 15 #> Veillonella dispar #> 342.2 Kb"},{"path":"/reference/wcBSDBFast.html","id":null,"dir":"Reference","previous_headings":"","what":"wcBSDB â wcBSDBFast","title":"wcBSDB â wcBSDBFast","text":"Visualize BugSigDB (Use data.table parallel correlation speed )","code":""},{"path":"/reference/wcBSDBFast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wcBSDB â wcBSDBFast","text":"","code":"wcBSDBFast(   mbList,   excludeFreq = 1000,   excludeTfIdf = NA,   additionalRemove = NA,   tfidf = FALSE,   target = \"title\",   apiKey = NULL,   pre = FALSE,   pvclAlpha = 0.95,   numOnly = TRUE,   madeUpper = c(\"dna\", \"rna\"),   redo = NULL,   pal = c(\"blue\", \"red\"),   numWords = 15,   preserve = TRUE,   metab = NULL,   metabThresh = 0.2,   curate = TRUE,   abstArg = list(),   nodePal = palette(),   scaleRange = c(5, 10),   showLegend = FALSE,   edgeLabel = FALSE,   mbPlot = FALSE,   onlyTDM = FALSE,   ngram = NA,   plotType = \"wc\",   disPlot = FALSE,   onWholeDTM = FALSE,   colorText = FALSE,   corThresh = 0.2,   tag = FALSE,   tagWhole = FALSE,   stem = FALSE,   layout = \"nicely\",   edgeLink = TRUE,   deleteZeroDeg = TRUE,   cl = FALSE,   ... )"},{"path":"/reference/wcBSDBFast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wcBSDB â wcBSDBFast","text":"mbList microbe list excludeFreq exclude words overall frequency excludeFreq default 0 excludeTfIdf exclude based tfidf (default: NA) additionalRemove specific words excluded tfidf use TfIdf making TDM target \"title\" \"abstract\" apiKey api key eutilities pre predefined filter words pvclAlpha alpha pvpick() numOnly delete number madeUpper make words uppercase resulting plot redo \"abstract\" chosen target, one can provide resulting object pal palette color gradient correlation network tag coloring numWords number words shown preserve try preserve original characters metab tibble metabolite - taxon association metabThresh threshold association curate include articles bugsigdb abstArg passed PubMed function using curate=FALSE nodePal node palette tag TRUE scaleRange scale label node size correlation network showLegend whether show legend correlation network edgeLabel TRUE, plot edge label (default: FALSE) mbPlot plot microbe names onlyTDM return TDM ngram default NA (1) plotType \"wc\" \"network\" disPlot plot diseases onWholeDTM calculate correlation network whole dataset top-words specified numWords colorText color text label based frequency correlation network corThresh correlation threshold tag perform pvclust words colorlize wordcloud tagWhole tag whole set subset stem whether use stemming layout layout correlation network, defaul \"nicely\" edgeLink FALSE, use geom_edge_diagonal deleteZeroDeg delete zero degree node plot correlation network cl cluster object passed pvclust ... parameters pass wordcloud()","code":""},{"path":"/reference/wcBSDBFast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wcBSDB â wcBSDBFast","text":"list data frame ggplot2 object","code":""},{"path":"/reference/wcBSDBFast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wcBSDB â wcBSDBFast","text":"","code":"mbList <- c(\"Veillonella dispar\") wcBSDBFast(mbList) #> Input microbes: 1 #> Error in data.table(importBugSigDB()): could not find function \"data.table\""},{"path":"/reference/wcEC.html","id":null,"dir":"Reference","previous_headings":"","what":"wcEC â wcEC","title":"wcEC â wcEC","text":"Query Enzyme Comission number obtain description, search pubmed enzymes make word cloud correlation network. Need \"enzyme.dat\" ExPASy (https://enzyme.expasy.org/).","code":""},{"path":"/reference/wcEC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wcEC â wcEC","text":"","code":"wcEC(   file,   ecnum,   onlyTerm = FALSE,   onlyDf = FALSE,   taxec = FALSE,   taxFile = NULL,   candTax = NULL,   ... )"},{"path":"/reference/wcEC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wcEC â wcEC","text":"file file downloaded expasy ecnum candidate ecnum, like obtained eggNOG-mapper onlyTerm return quoted queries wcAbst onlyDf return ec description data.frame onlyTerm onlyDf specified, onlyTerm priority taxec link taxonomy EC using UniProt Taxonomy ID file TRUE, data.frame returned candTax taxec=TRUE, search species. ... passed osplot(target=\"pubmed\")","code":""},{"path":"/reference/wcGeneSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"wcGeneSummary â wcGeneSummary","title":"wcGeneSummary â wcGeneSummary","text":"Plot wordcloud RefSeq description obtained GeneSummary Testing function new class","code":""},{"path":"/reference/wcGeneSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wcGeneSummary â wcGeneSummary","text":"","code":"wcGeneSummary(   geneList,   keyType = \"SYMBOL\",   excludeFreq = 2000,   exclude = \"frequency\",   filterMax = FALSE,   excludeType = \">\",   tfidf = FALSE,   genePlotNum = 10,   preserve = TRUE,   takeMax = FALSE,   additionalRemove = NA,   onlyCorpus = FALSE,   madeUpper = c(\"dna\", \"rna\"),   organism = 9606,   pal = c(\"blue\", \"red\"),   numWords = 15,   scaleRange = c(5, 10),   showLegend = FALSE,   orgDb = org.Hs.eg.db,   edgeLabel = FALSE,   pvclAlpha = 0.95,   bn = FALSE,   R = 20,   cl = FALSE,   ngram = NA,   plotType = \"wc\",   onlyTDM = FALSE,   stem = FALSE,   colorText = FALSE,   corThresh = 0.2,   genePlot = FALSE,   genePathPlot = NA,   genePathPlotSig = 0.05,   tag = FALSE,   layout = \"nicely\",   edgeLink = TRUE,   deleteZeroDeg = TRUE,   enrich = NULL,   topPath = 10,   ora = FALSE,   tagWhole = FALSE,   mergeCorpus = NULL,   numOnly = TRUE,   madeUpperGenes = TRUE,   onWholeTDM = FALSE,   pre = TRUE,   verbPOS = c(\"VBZ\"),   nodePal = palette(),   collapse = FALSE,   verb = FALSE,   udpipeModel = \"english-ewt-ud-2.5-191206.udpipe\",   ... )"},{"path":"/reference/wcGeneSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wcGeneSummary â wcGeneSummary","text":"geneList gene ID list keyType default SYMBOL excludeFreq default 5000 exclude \"frequency\" \"tfidf\", filterMax use pre-calculated filter based max-values excluding TfIdf Otherwise take sum. excludeType \">\" \"<\" tfidf use TfIdf making TDM genePlotNum number genes plotted preserve preserve original characters takeMax take max values term term-document matrix additionalRemove specific words excluded onlyCorpus return corpus madeUpper make words uppercase resulting plot organism organism ID use pal palette color gradient correlation network tag coloring numWords number words shown scaleRange scale label node size correlation network showLegend whether show legend correlation network orgDb default org.Hs.eg.db edgeLabel TRUE, plot edge label (default: FALSE) pvclAlpha alpha pvpick() bn perform bootstrap-based Bayesian network inference instead correlation using bnlearn R many bootstrap bn stated cl parPvclust, parallel clustering can performed ngram default NA (1) plotType \"wc\" \"network\" onlyTDM return TDF stem whether use stemming colorText color text label based frequency correlation network corThresh correlation threshold genePlot plot associated genes (default: FALSE) genePathPlot plot associated genes pathways (default: FALSE) \"kegg\" \"reactome\" genePathPlotSig threshold adjusted p-values (default: 0.05) tag perform pvclust words colorlize wordcloud layout layout correlation network, defaul \"nicely\" edgeLink FALSE, use geom_edge_diagonal deleteZeroDeg delete zero degree node plot correlation network enrich currently, 'reactome' 'kegg' supported topPath many pathway descriptions included text analysis ora perform ora (experimental) tagWhole whether perform pvclust whole matrix subset mergeCorpus specify multiple corpus intend combine . like PubMed information RefSeq summary numOnly delete number (deleting XXX123) madeUpperGenes make genes upper case automatically (default TRUE) onWholeTDM calculate correlation network whole dataset top-words specified numWords pre remove words \"pmids\", \"geneids\" verbPOS Part Speech tags verbs, like \"VBN\", \"VBZ\" nodePal node palette tag TRUE collapse default FALSE, collapse sentences verb show verb edges (using udpipe) peform udpipe_download_model(language = \"english\") beforehand, path udpipe file udpipeModel udpipeModel udpipe model file name ... parameters pass wordcloud()","code":""},{"path":"/reference/wcGeneSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wcGeneSummary â wcGeneSummary","text":"list data frame ggplot2 object","code":""},{"path":"/reference/wcGeneSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wcGeneSummary â wcGeneSummary","text":"","code":"geneList <- c(\"DDX41\") wcGeneSummary(geneList) #> input genes: 1 #> 'select()' returned 1:1 mapping between keys and columns #> converted input genes: 1 #> filter based on GeneSummary #> filtered 65 words (frequency and/or tfidf) ... #> type: refseq #> Number of words: 15 #> DDX41 #> 73.7 Kb"}]
