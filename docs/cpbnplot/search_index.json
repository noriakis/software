[["the-other-options.html", "Chapter 6 The other options 6.1 Bootstrap reasoning 6.2 Discretization 6.3 Custom visualization 6.4 Comparing multi scale and standard bootstrapping", " Chapter 6 The other options 6.1 Bootstrap reasoning For the bootstrapping approach, the averaged network sometimes does not hold directed acyclic assumptions, and the probabilistic reasoning cannot be performed. The bootReason function is implemented that performs probabilistic reasoning for each bootstrap replicate and return the mean of events, as well as difference in mean from the control level. metadata &lt;- data.frame(tcgaData@colData) %&gt;% dplyr::select(age_at_diagnosis, gender, paper_mutation.in.TP53, paper_Combined.T.and.LN.category) %&gt;% na.omit() %&gt;% filter(paper_mutation.in.TP53!=&quot;ND&quot;) %&gt;% filter(paper_Combined.T.and.LN.category!=&quot;ND&quot;) ## Set TP53 status to numeric of 0/1. metadata$paper_mutation.in.TP53 &lt;- as.numeric(as.factor(metadata$paper_mutation.in.TP53))-1 metadata$age_at_diagnosis &lt;- as.numeric(scale(metadata$age_at_diagnosis)) metadata$paper_Combined.T.and.LN.category &lt;- as.factor(metadata$paper_Combined.T.and.LN.category) metadata$gender &lt;- as.factor(metadata$gender) ## Return only the data frame df &lt;- bngeneplot(pway, vstedTCGA, pathNum=3, expSample=rownames(metadata), otherVar=metadata, otherVarName=c(&quot;Age&quot;,&quot;Gender&quot;,&quot;TP53&quot;,&quot;Category&quot;), onlyDf=T) ## Calculate for multiple levels tp53Res &lt;- bootReasonOne(df, 20, node=c(&quot;CENPH&quot;,&quot;NUP107&quot;), c(&quot;TP53&quot;), level=c(0, 0.25, 0.5, 0.75, 1), cont=0) kable(tp53Res$difMean) Mean stdev level node 0.0713995 0.0111631 0.25 CENPH 0.1443039 0.0152261 0.50 CENPH 0.2185805 0.0240919 0.75 CENPH 0.2908855 0.0292008 1.00 CENPH -0.0297757 0.0277762 0.25 NUP107 -0.0548161 0.0488408 0.50 NUP107 -0.0812913 0.0738378 0.75 NUP107 -0.1112355 0.0989338 1.00 NUP107 6.2 Discretization If passed an option disc=TRUE, the continuous variables are discretized using arules::discretize function (Hahsler et al. 2011). The discretization of the gene expression data is discussed in Gallo et al. (2016). If the same discretization is to be applied on the other data like the training and test dataset, you can pass the training samples to tr option, and if some variables are not intended to be discretized, you should pass the column name to remainCont. bngeneplot(results = pway, exp = vsted, pathNum = 1, disc=TRUE, layout=&quot;sugiyama&quot;) 6.3 Custom visualization 6.3.1 The glowing nodes and edges In addition to the normal plot, custom function of visualization is implemented (bngeneplotCustom and bnpathplotCustom). For example, to effectively visualize the hub genes and edges with high strength by glowing the respective nodes and edges, below is an example using an idea of ggCyberPunk. Additionally, the edge and node colors are fully customizable. cl = parallel::makeCluster(6) bngeneplotCustom(results = pway, exp = vsted, expSample = incSample, R=50, cl=cl, layout=&quot;kk&quot;, fontFamily=&quot;sans&quot;, pathNum = c(11), strType=&quot;normal&quot;, sizeDep=T, dep=dep, showDir=T, hub=5, glowEdgeNum=5, strThresh=0.6, strengthPlot = T) For the demonstrative purpose, using the palettes and fonts of vapoRwave and showtext, the other visualizations are possible. Note that in custom visualization, only the network plot and strength barplot are supported. ## Use alien encounter fonts (http://www.hipsthetic.com/alien-encounters-free-80s-font-family/) sysfonts::font_add(family=&quot;alien&quot;,regular=&quot;SFAlienEncounters.ttf&quot;) showtext::showtext_auto() cl = parallel::makeCluster(6) bngeneplotCustom(results = pway, exp = vsted, expSample = incSample, R=20, cl=cl, fontFamily=&quot;alien&quot;, labelSize=4, pathNum = c(15), strType=&quot;normal&quot;, showDir=F, hub=5, glowEdgeNum=5, strThresh=0.6, strengthPlot = T, sizeDep=F, dep=dep, layout=&quot;kk&quot;, edgePal=c(&quot;#9239F6&quot;,&quot;#FF4373&quot;), nodePal=c(&quot;#F8B660&quot;,&quot;#FF0076&quot;), barLegendKeyCol=&quot;#0F0D1A&quot;, textCol=&quot;#EE9537&quot;, titleCol=&quot;#EE9537&quot;, backCol=&quot;#0F0D1A&quot;, barAxisCol=&quot;#EE9537&quot;, barTextCol=&quot;#EE9537&quot;, barPal=c(&quot;#9239F6&quot;, &quot;#FF4373&quot;), barPanelGridCol=&quot;#FFB967&quot;, barBackCol=&quot;#0F0D1A&quot;, titleSize=14 ) 6.4 Comparing multi scale and standard bootstrapping cl &lt;- parallel::makeCluster(6) comparePlot &lt;- bngeneplot(results = pway, exp = vsted, cl=cl, strType=&quot;normal&quot;, pathNum = 15, R = 50, returnNet=T, shadowText = TRUE) comparePlotMS &lt;- bngeneplot(results = pway, exp = vsted, cl=cl, strType=&quot;ms&quot;, pathNum = 15, R = 50, returnNet=T, shadowText = TRUE) kable(comparePlot$str %&gt;% filter(direction&gt;0.5) %&gt;% arrange(desc(strength)) %&gt;% head()) from to strength direction RAD51AP1 BRCA1 0.9444444 0.5163690 RFC5 XRCC3 0.9259259 0.5181878 RFC2 ATR 0.9074074 0.5231481 TOPBP1 ATR 0.8703704 0.8495370 CHEK1 RAD51 0.8703704 0.7180886 RAD51AP1 CHEK1 0.8518519 0.7349537 kable(comparePlotMS$str %&gt;% filter(direction&gt;0.5) %&gt;% arrange(desc(strength)) %&gt;% head()) from to strength direction ATR RFC2 0.9966205 0.6803287 TOPBP1 ATR 0.9931674 0.8454787 BRCA1 RAD51AP1 0.9913134 0.6190552 XRCC3 RFC5 0.9910847 0.5989356 EXO1 DNA2 0.9909080 0.8713681 BLM DNA2 0.9896103 0.9359751 References "]]
